// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package liquiditypool

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LiquiditypoolABI is the input ABI used to generate the binding from.
const LiquiditypoolABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lpTokenAmt\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"burnLPTokenAmt\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddrs\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateLPTokenDepositOrWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpTokenMapping\",\"outputs\":[{\"internalType\":\"contractLPToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gateway_\",\"type\":\"address\"}],\"name\":\"setGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// LiquiditypoolBin is the compiled bytecode used for deploying new contracts.
var LiquiditypoolBin = ""

// DeployLiquiditypool deploys a new Ethereum contract, binding an instance of Liquiditypool to it.
func DeployLiquiditypool(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Liquiditypool, error) {
	parsed, err := abi.JSON(strings.NewReader(LiquiditypoolABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LiquiditypoolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Liquiditypool{LiquiditypoolCaller: LiquiditypoolCaller{contract: contract}, LiquiditypoolTransactor: LiquiditypoolTransactor{contract: contract}, LiquiditypoolFilterer: LiquiditypoolFilterer{contract: contract}}, nil
}

// Liquiditypool is an auto generated Go binding around an Ethereum contract.
type Liquiditypool struct {
	LiquiditypoolCaller     // Read-only binding to the contract
	LiquiditypoolTransactor // Write-only binding to the contract
	LiquiditypoolFilterer   // Log filterer for contract events
}

// LiquiditypoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type LiquiditypoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquiditypoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LiquiditypoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquiditypoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LiquiditypoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LiquiditypoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LiquiditypoolSession struct {
	Contract     *Liquiditypool    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LiquiditypoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LiquiditypoolCallerSession struct {
	Contract *LiquiditypoolCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// LiquiditypoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LiquiditypoolTransactorSession struct {
	Contract     *LiquiditypoolTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// LiquiditypoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type LiquiditypoolRaw struct {
	Contract *Liquiditypool // Generic contract binding to access the raw methods on
}

// LiquiditypoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LiquiditypoolCallerRaw struct {
	Contract *LiquiditypoolCaller // Generic read-only contract binding to access the raw methods on
}

// LiquiditypoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LiquiditypoolTransactorRaw struct {
	Contract *LiquiditypoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLiquiditypool creates a new instance of Liquiditypool, bound to a specific deployed contract.
func NewLiquiditypool(address common.Address, backend bind.ContractBackend) (*Liquiditypool, error) {
	contract, err := bindLiquiditypool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Liquiditypool{LiquiditypoolCaller: LiquiditypoolCaller{contract: contract}, LiquiditypoolTransactor: LiquiditypoolTransactor{contract: contract}, LiquiditypoolFilterer: LiquiditypoolFilterer{contract: contract}}, nil
}

// NewLiquiditypoolCaller creates a new read-only instance of Liquiditypool, bound to a specific deployed contract.
func NewLiquiditypoolCaller(address common.Address, caller bind.ContractCaller) (*LiquiditypoolCaller, error) {
	contract, err := bindLiquiditypool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LiquiditypoolCaller{contract: contract}, nil
}

// NewLiquiditypoolTransactor creates a new write-only instance of Liquiditypool, bound to a specific deployed contract.
func NewLiquiditypoolTransactor(address common.Address, transactor bind.ContractTransactor) (*LiquiditypoolTransactor, error) {
	contract, err := bindLiquiditypool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LiquiditypoolTransactor{contract: contract}, nil
}

// NewLiquiditypoolFilterer creates a new log filterer instance of Liquiditypool, bound to a specific deployed contract.
func NewLiquiditypoolFilterer(address common.Address, filterer bind.ContractFilterer) (*LiquiditypoolFilterer, error) {
	contract, err := bindLiquiditypool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LiquiditypoolFilterer{contract: contract}, nil
}

// bindLiquiditypool binds a generic wrapper to an already deployed contract.
func bindLiquiditypool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LiquiditypoolABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Liquiditypool *LiquiditypoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Liquiditypool.Contract.LiquiditypoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Liquiditypool *LiquiditypoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Liquiditypool.Contract.LiquiditypoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Liquiditypool *LiquiditypoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Liquiditypool.Contract.LiquiditypoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Liquiditypool *LiquiditypoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Liquiditypool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Liquiditypool *LiquiditypoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Liquiditypool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Liquiditypool *LiquiditypoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Liquiditypool.Contract.contract.Transact(opts, method, params...)
}

// CalculateLPTokenDepositOrWithdraw is a free data retrieval call binding the contract method 0xe9e43f2c.
//
// Solidity: function calculateLPTokenDepositOrWithdraw(address token, uint256 amount) view returns(uint256)
func (_Liquiditypool *LiquiditypoolCaller) CalculateLPTokenDepositOrWithdraw(opts *bind.CallOpts, token common.Address, amount *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Liquiditypool.contract.Call(opts, &out, "calculateLPTokenDepositOrWithdraw", token, amount)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateLPTokenDepositOrWithdraw is a free data retrieval call binding the contract method 0xe9e43f2c.
//
// Solidity: function calculateLPTokenDepositOrWithdraw(address token, uint256 amount) view returns(uint256)
func (_Liquiditypool *LiquiditypoolSession) CalculateLPTokenDepositOrWithdraw(token common.Address, amount *big.Int) (*big.Int, error) {
	return _Liquiditypool.Contract.CalculateLPTokenDepositOrWithdraw(&_Liquiditypool.CallOpts, token, amount)
}

// CalculateLPTokenDepositOrWithdraw is a free data retrieval call binding the contract method 0xe9e43f2c.
//
// Solidity: function calculateLPTokenDepositOrWithdraw(address token, uint256 amount) view returns(uint256)
func (_Liquiditypool *LiquiditypoolCallerSession) CalculateLPTokenDepositOrWithdraw(token common.Address, amount *big.Int) (*big.Int, error) {
	return _Liquiditypool.Contract.CalculateLPTokenDepositOrWithdraw(&_Liquiditypool.CallOpts, token, amount)
}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() view returns(address)
func (_Liquiditypool *LiquiditypoolCaller) Gateway(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Liquiditypool.contract.Call(opts, &out, "gateway")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() view returns(address)
func (_Liquiditypool *LiquiditypoolSession) Gateway() (common.Address, error) {
	return _Liquiditypool.Contract.Gateway(&_Liquiditypool.CallOpts)
}

// Gateway is a free data retrieval call binding the contract method 0x116191b6.
//
// Solidity: function gateway() view returns(address)
func (_Liquiditypool *LiquiditypoolCallerSession) Gateway() (common.Address, error) {
	return _Liquiditypool.Contract.Gateway(&_Liquiditypool.CallOpts)
}

// LiquidityPool is a free data retrieval call binding the contract method 0xcc8edc09.
//
// Solidity: function liquidityPool(address , address ) view returns(uint256)
func (_Liquiditypool *LiquiditypoolCaller) LiquidityPool(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Liquiditypool.contract.Call(opts, &out, "liquidityPool", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LiquidityPool is a free data retrieval call binding the contract method 0xcc8edc09.
//
// Solidity: function liquidityPool(address , address ) view returns(uint256)
func (_Liquiditypool *LiquiditypoolSession) LiquidityPool(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Liquiditypool.Contract.LiquidityPool(&_Liquiditypool.CallOpts, arg0, arg1)
}

// LiquidityPool is a free data retrieval call binding the contract method 0xcc8edc09.
//
// Solidity: function liquidityPool(address , address ) view returns(uint256)
func (_Liquiditypool *LiquiditypoolCallerSession) LiquidityPool(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Liquiditypool.Contract.LiquidityPool(&_Liquiditypool.CallOpts, arg0, arg1)
}

// LpTokenMapping is a free data retrieval call binding the contract method 0x31b2554d.
//
// Solidity: function lpTokenMapping(address ) view returns(address)
func (_Liquiditypool *LiquiditypoolCaller) LpTokenMapping(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Liquiditypool.contract.Call(opts, &out, "lpTokenMapping", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LpTokenMapping is a free data retrieval call binding the contract method 0x31b2554d.
//
// Solidity: function lpTokenMapping(address ) view returns(address)
func (_Liquiditypool *LiquiditypoolSession) LpTokenMapping(arg0 common.Address) (common.Address, error) {
	return _Liquiditypool.Contract.LpTokenMapping(&_Liquiditypool.CallOpts, arg0)
}

// LpTokenMapping is a free data retrieval call binding the contract method 0x31b2554d.
//
// Solidity: function lpTokenMapping(address ) view returns(address)
func (_Liquiditypool *LiquiditypoolCallerSession) LpTokenMapping(arg0 common.Address) (common.Address, error) {
	return _Liquiditypool.Contract.LpTokenMapping(&_Liquiditypool.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Liquiditypool *LiquiditypoolCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Liquiditypool.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Liquiditypool *LiquiditypoolSession) Owner() (common.Address, error) {
	return _Liquiditypool.Contract.Owner(&_Liquiditypool.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Liquiditypool *LiquiditypoolCallerSession) Owner() (common.Address, error) {
	return _Liquiditypool.Contract.Owner(&_Liquiditypool.CallOpts)
}

// AddLiquidity is a paid mutator transaction binding the contract method 0x56688700.
//
// Solidity: function addLiquidity(address token, uint256 amount) returns()
func (_Liquiditypool *LiquiditypoolTransactor) AddLiquidity(opts *bind.TransactOpts, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Liquiditypool.contract.Transact(opts, "addLiquidity", token, amount)
}

// AddLiquidity is a paid mutator transaction binding the contract method 0x56688700.
//
// Solidity: function addLiquidity(address token, uint256 amount) returns()
func (_Liquiditypool *LiquiditypoolSession) AddLiquidity(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Liquiditypool.Contract.AddLiquidity(&_Liquiditypool.TransactOpts, token, amount)
}

// AddLiquidity is a paid mutator transaction binding the contract method 0x56688700.
//
// Solidity: function addLiquidity(address token, uint256 amount) returns()
func (_Liquiditypool *LiquiditypoolTransactorSession) AddLiquidity(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Liquiditypool.Contract.AddLiquidity(&_Liquiditypool.TransactOpts, token, amount)
}

// AddToken is a paid mutator transaction binding the contract method 0xa5929b70.
//
// Solidity: function addToken(address[] tokenAddrs, string[] names) returns()
func (_Liquiditypool *LiquiditypoolTransactor) AddToken(opts *bind.TransactOpts, tokenAddrs []common.Address, names []string) (*types.Transaction, error) {
	return _Liquiditypool.contract.Transact(opts, "addToken", tokenAddrs, names)
}

// AddToken is a paid mutator transaction binding the contract method 0xa5929b70.
//
// Solidity: function addToken(address[] tokenAddrs, string[] names) returns()
func (_Liquiditypool *LiquiditypoolSession) AddToken(tokenAddrs []common.Address, names []string) (*types.Transaction, error) {
	return _Liquiditypool.Contract.AddToken(&_Liquiditypool.TransactOpts, tokenAddrs, names)
}

// AddToken is a paid mutator transaction binding the contract method 0xa5929b70.
//
// Solidity: function addToken(address[] tokenAddrs, string[] names) returns()
func (_Liquiditypool *LiquiditypoolTransactorSession) AddToken(tokenAddrs []common.Address, names []string) (*types.Transaction, error) {
	return _Liquiditypool.Contract.AddToken(&_Liquiditypool.TransactOpts, tokenAddrs, names)
}

// EmergencyWithdrawFunds is a paid mutator transaction binding the contract method 0xaea3da6c.
//
// Solidity: function emergencyWithdrawFunds(address[] tokens, address newOwner) returns()
func (_Liquiditypool *LiquiditypoolTransactor) EmergencyWithdrawFunds(opts *bind.TransactOpts, tokens []common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _Liquiditypool.contract.Transact(opts, "emergencyWithdrawFunds", tokens, newOwner)
}

// EmergencyWithdrawFunds is a paid mutator transaction binding the contract method 0xaea3da6c.
//
// Solidity: function emergencyWithdrawFunds(address[] tokens, address newOwner) returns()
func (_Liquiditypool *LiquiditypoolSession) EmergencyWithdrawFunds(tokens []common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _Liquiditypool.Contract.EmergencyWithdrawFunds(&_Liquiditypool.TransactOpts, tokens, newOwner)
}

// EmergencyWithdrawFunds is a paid mutator transaction binding the contract method 0xaea3da6c.
//
// Solidity: function emergencyWithdrawFunds(address[] tokens, address newOwner) returns()
func (_Liquiditypool *LiquiditypoolTransactorSession) EmergencyWithdrawFunds(tokens []common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _Liquiditypool.Contract.EmergencyWithdrawFunds(&_Liquiditypool.TransactOpts, tokens, newOwner)
}

// RemoveLiquidity is a paid mutator transaction binding the contract method 0xa201ccf6.
//
// Solidity: function removeLiquidity(address token, uint256 amount) returns()
func (_Liquiditypool *LiquiditypoolTransactor) RemoveLiquidity(opts *bind.TransactOpts, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Liquiditypool.contract.Transact(opts, "removeLiquidity", token, amount)
}

// RemoveLiquidity is a paid mutator transaction binding the contract method 0xa201ccf6.
//
// Solidity: function removeLiquidity(address token, uint256 amount) returns()
func (_Liquiditypool *LiquiditypoolSession) RemoveLiquidity(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Liquiditypool.Contract.RemoveLiquidity(&_Liquiditypool.TransactOpts, token, amount)
}

// RemoveLiquidity is a paid mutator transaction binding the contract method 0xa201ccf6.
//
// Solidity: function removeLiquidity(address token, uint256 amount) returns()
func (_Liquiditypool *LiquiditypoolTransactorSession) RemoveLiquidity(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Liquiditypool.Contract.RemoveLiquidity(&_Liquiditypool.TransactOpts, token, amount)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Liquiditypool *LiquiditypoolTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Liquiditypool.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Liquiditypool *LiquiditypoolSession) RenounceOwnership() (*types.Transaction, error) {
	return _Liquiditypool.Contract.RenounceOwnership(&_Liquiditypool.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Liquiditypool *LiquiditypoolTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Liquiditypool.Contract.RenounceOwnership(&_Liquiditypool.TransactOpts)
}

// SetGateway is a paid mutator transaction binding the contract method 0x90646b4a.
//
// Solidity: function setGateway(address gateway_) returns()
func (_Liquiditypool *LiquiditypoolTransactor) SetGateway(opts *bind.TransactOpts, gateway_ common.Address) (*types.Transaction, error) {
	return _Liquiditypool.contract.Transact(opts, "setGateway", gateway_)
}

// SetGateway is a paid mutator transaction binding the contract method 0x90646b4a.
//
// Solidity: function setGateway(address gateway_) returns()
func (_Liquiditypool *LiquiditypoolSession) SetGateway(gateway_ common.Address) (*types.Transaction, error) {
	return _Liquiditypool.Contract.SetGateway(&_Liquiditypool.TransactOpts, gateway_)
}

// SetGateway is a paid mutator transaction binding the contract method 0x90646b4a.
//
// Solidity: function setGateway(address gateway_) returns()
func (_Liquiditypool *LiquiditypoolTransactorSession) SetGateway(gateway_ common.Address) (*types.Transaction, error) {
	return _Liquiditypool.Contract.SetGateway(&_Liquiditypool.TransactOpts, gateway_)
}

// Transfer is a paid mutator transaction binding the contract method 0xbeabacc8.
//
// Solidity: function transfer(address token, address recipient, uint256 amount) returns()
func (_Liquiditypool *LiquiditypoolTransactor) Transfer(opts *bind.TransactOpts, token common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Liquiditypool.contract.Transact(opts, "transfer", token, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xbeabacc8.
//
// Solidity: function transfer(address token, address recipient, uint256 amount) returns()
func (_Liquiditypool *LiquiditypoolSession) Transfer(token common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Liquiditypool.Contract.Transfer(&_Liquiditypool.TransactOpts, token, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xbeabacc8.
//
// Solidity: function transfer(address token, address recipient, uint256 amount) returns()
func (_Liquiditypool *LiquiditypoolTransactorSession) Transfer(token common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Liquiditypool.Contract.Transfer(&_Liquiditypool.TransactOpts, token, recipient, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Liquiditypool *LiquiditypoolTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Liquiditypool.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Liquiditypool *LiquiditypoolSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Liquiditypool.Contract.TransferOwnership(&_Liquiditypool.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Liquiditypool *LiquiditypoolTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Liquiditypool.Contract.TransferOwnership(&_Liquiditypool.TransactOpts, newOwner)
}

// LiquiditypoolAddLiquidityIterator is returned from FilterAddLiquidity and is used to iterate over the raw logs and unpacked data for AddLiquidity events raised by the Liquiditypool contract.
type LiquiditypoolAddLiquidityIterator struct {
	Event *LiquiditypoolAddLiquidity // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquiditypoolAddLiquidityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquiditypoolAddLiquidity)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquiditypoolAddLiquidity)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquiditypoolAddLiquidityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquiditypoolAddLiquidityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquiditypoolAddLiquidity represents a AddLiquidity event raised by the Liquiditypool contract.
type LiquiditypoolAddLiquidity struct {
	Token      common.Address
	Amount     *big.Int
	LpTokenAmt *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAddLiquidity is a free log retrieval operation binding the contract event 0x06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca.
//
// Solidity: event AddLiquidity(address indexed token, uint256 indexed amount, uint256 indexed lpTokenAmt)
func (_Liquiditypool *LiquiditypoolFilterer) FilterAddLiquidity(opts *bind.FilterOpts, token []common.Address, amount []*big.Int, lpTokenAmt []*big.Int) (*LiquiditypoolAddLiquidityIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var lpTokenAmtRule []interface{}
	for _, lpTokenAmtItem := range lpTokenAmt {
		lpTokenAmtRule = append(lpTokenAmtRule, lpTokenAmtItem)
	}

	logs, sub, err := _Liquiditypool.contract.FilterLogs(opts, "AddLiquidity", tokenRule, amountRule, lpTokenAmtRule)
	if err != nil {
		return nil, err
	}
	return &LiquiditypoolAddLiquidityIterator{contract: _Liquiditypool.contract, event: "AddLiquidity", logs: logs, sub: sub}, nil
}

// WatchAddLiquidity is a free log subscription operation binding the contract event 0x06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca.
//
// Solidity: event AddLiquidity(address indexed token, uint256 indexed amount, uint256 indexed lpTokenAmt)
func (_Liquiditypool *LiquiditypoolFilterer) WatchAddLiquidity(opts *bind.WatchOpts, sink chan<- *LiquiditypoolAddLiquidity, token []common.Address, amount []*big.Int, lpTokenAmt []*big.Int) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var lpTokenAmtRule []interface{}
	for _, lpTokenAmtItem := range lpTokenAmt {
		lpTokenAmtRule = append(lpTokenAmtRule, lpTokenAmtItem)
	}

	logs, sub, err := _Liquiditypool.contract.WatchLogs(opts, "AddLiquidity", tokenRule, amountRule, lpTokenAmtRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquiditypoolAddLiquidity)
				if err := _Liquiditypool.contract.UnpackLog(event, "AddLiquidity", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddLiquidity is a log parse operation binding the contract event 0x06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca.
//
// Solidity: event AddLiquidity(address indexed token, uint256 indexed amount, uint256 indexed lpTokenAmt)
func (_Liquiditypool *LiquiditypoolFilterer) ParseAddLiquidity(log types.Log) (*LiquiditypoolAddLiquidity, error) {
	event := new(LiquiditypoolAddLiquidity)
	if err := _Liquiditypool.contract.UnpackLog(event, "AddLiquidity", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquiditypoolAddTokenIterator is returned from FilterAddToken and is used to iterate over the raw logs and unpacked data for AddToken events raised by the Liquiditypool contract.
type LiquiditypoolAddTokenIterator struct {
	Event *LiquiditypoolAddToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquiditypoolAddTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquiditypoolAddToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquiditypoolAddToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquiditypoolAddTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquiditypoolAddTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquiditypoolAddToken represents a AddToken event raised by the Liquiditypool contract.
type LiquiditypoolAddToken struct {
	Token   common.Address
	LpToken common.Address
	Name    string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAddToken is a free log retrieval operation binding the contract event 0x9e2bb9142e52ac7776cbc61285d7e5eb96b10d547b74994dae2ccca46c9a8fc2.
//
// Solidity: event AddToken(address indexed token, address indexed lpToken, string name)
func (_Liquiditypool *LiquiditypoolFilterer) FilterAddToken(opts *bind.FilterOpts, token []common.Address, lpToken []common.Address) (*LiquiditypoolAddTokenIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var lpTokenRule []interface{}
	for _, lpTokenItem := range lpToken {
		lpTokenRule = append(lpTokenRule, lpTokenItem)
	}

	logs, sub, err := _Liquiditypool.contract.FilterLogs(opts, "AddToken", tokenRule, lpTokenRule)
	if err != nil {
		return nil, err
	}
	return &LiquiditypoolAddTokenIterator{contract: _Liquiditypool.contract, event: "AddToken", logs: logs, sub: sub}, nil
}

// WatchAddToken is a free log subscription operation binding the contract event 0x9e2bb9142e52ac7776cbc61285d7e5eb96b10d547b74994dae2ccca46c9a8fc2.
//
// Solidity: event AddToken(address indexed token, address indexed lpToken, string name)
func (_Liquiditypool *LiquiditypoolFilterer) WatchAddToken(opts *bind.WatchOpts, sink chan<- *LiquiditypoolAddToken, token []common.Address, lpToken []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var lpTokenRule []interface{}
	for _, lpTokenItem := range lpToken {
		lpTokenRule = append(lpTokenRule, lpTokenItem)
	}

	logs, sub, err := _Liquiditypool.contract.WatchLogs(opts, "AddToken", tokenRule, lpTokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquiditypoolAddToken)
				if err := _Liquiditypool.contract.UnpackLog(event, "AddToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddToken is a log parse operation binding the contract event 0x9e2bb9142e52ac7776cbc61285d7e5eb96b10d547b74994dae2ccca46c9a8fc2.
//
// Solidity: event AddToken(address indexed token, address indexed lpToken, string name)
func (_Liquiditypool *LiquiditypoolFilterer) ParseAddToken(log types.Log) (*LiquiditypoolAddToken, error) {
	event := new(LiquiditypoolAddToken)
	if err := _Liquiditypool.contract.UnpackLog(event, "AddToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquiditypoolOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Liquiditypool contract.
type LiquiditypoolOwnershipTransferredIterator struct {
	Event *LiquiditypoolOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquiditypoolOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquiditypoolOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquiditypoolOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquiditypoolOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquiditypoolOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquiditypoolOwnershipTransferred represents a OwnershipTransferred event raised by the Liquiditypool contract.
type LiquiditypoolOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Liquiditypool *LiquiditypoolFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LiquiditypoolOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Liquiditypool.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LiquiditypoolOwnershipTransferredIterator{contract: _Liquiditypool.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Liquiditypool *LiquiditypoolFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LiquiditypoolOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Liquiditypool.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquiditypoolOwnershipTransferred)
				if err := _Liquiditypool.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Liquiditypool *LiquiditypoolFilterer) ParseOwnershipTransferred(log types.Log) (*LiquiditypoolOwnershipTransferred, error) {
	event := new(LiquiditypoolOwnershipTransferred)
	if err := _Liquiditypool.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LiquiditypoolRemoveLiquidityIterator is returned from FilterRemoveLiquidity and is used to iterate over the raw logs and unpacked data for RemoveLiquidity events raised by the Liquiditypool contract.
type LiquiditypoolRemoveLiquidityIterator struct {
	Event *LiquiditypoolRemoveLiquidity // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LiquiditypoolRemoveLiquidityIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LiquiditypoolRemoveLiquidity)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LiquiditypoolRemoveLiquidity)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LiquiditypoolRemoveLiquidityIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LiquiditypoolRemoveLiquidityIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LiquiditypoolRemoveLiquidity represents a RemoveLiquidity event raised by the Liquiditypool contract.
type LiquiditypoolRemoveLiquidity struct {
	Token          common.Address
	Amount         *big.Int
	BurnLPTokenAmt *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterRemoveLiquidity is a free log retrieval operation binding the contract event 0x0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e8.
//
// Solidity: event RemoveLiquidity(address indexed token, uint256 indexed amount, uint256 indexed burnLPTokenAmt)
func (_Liquiditypool *LiquiditypoolFilterer) FilterRemoveLiquidity(opts *bind.FilterOpts, token []common.Address, amount []*big.Int, burnLPTokenAmt []*big.Int) (*LiquiditypoolRemoveLiquidityIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var burnLPTokenAmtRule []interface{}
	for _, burnLPTokenAmtItem := range burnLPTokenAmt {
		burnLPTokenAmtRule = append(burnLPTokenAmtRule, burnLPTokenAmtItem)
	}

	logs, sub, err := _Liquiditypool.contract.FilterLogs(opts, "RemoveLiquidity", tokenRule, amountRule, burnLPTokenAmtRule)
	if err != nil {
		return nil, err
	}
	return &LiquiditypoolRemoveLiquidityIterator{contract: _Liquiditypool.contract, event: "RemoveLiquidity", logs: logs, sub: sub}, nil
}

// WatchRemoveLiquidity is a free log subscription operation binding the contract event 0x0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e8.
//
// Solidity: event RemoveLiquidity(address indexed token, uint256 indexed amount, uint256 indexed burnLPTokenAmt)
func (_Liquiditypool *LiquiditypoolFilterer) WatchRemoveLiquidity(opts *bind.WatchOpts, sink chan<- *LiquiditypoolRemoveLiquidity, token []common.Address, amount []*big.Int, burnLPTokenAmt []*big.Int) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}
	var burnLPTokenAmtRule []interface{}
	for _, burnLPTokenAmtItem := range burnLPTokenAmt {
		burnLPTokenAmtRule = append(burnLPTokenAmtRule, burnLPTokenAmtItem)
	}

	logs, sub, err := _Liquiditypool.contract.WatchLogs(opts, "RemoveLiquidity", tokenRule, amountRule, burnLPTokenAmtRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LiquiditypoolRemoveLiquidity)
				if err := _Liquiditypool.contract.UnpackLog(event, "RemoveLiquidity", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveLiquidity is a log parse operation binding the contract event 0x0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e8.
//
// Solidity: event RemoveLiquidity(address indexed token, uint256 indexed amount, uint256 indexed burnLPTokenAmt)
func (_Liquiditypool *LiquiditypoolFilterer) ParseRemoveLiquidity(log types.Log) (*LiquiditypoolRemoveLiquidity, error) {
	event := new(LiquiditypoolRemoveLiquidity)
	if err := _Liquiditypool.contract.UnpackLog(event, "RemoveLiquidity", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
