// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package vault

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// VaultABI is the input ABI used to generate the binding from.
const VaultABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Code501\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Code502\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"addSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"depositNativeFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newAdminTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"removeSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retryTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retryTransferNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setNotPausedChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferInMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferInNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dstChains\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferOutMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dstChain\",\"type\":\"uint256\"}],\"name\":\"transferOutNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstChain\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOutNonEvm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"dstChains\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"tos\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferOutNonEvmMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// VaultBin is the compiled bytecode used for deploying new contracts.
var VaultBin = "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061321c806100616000396000f3fe60806040526004361061014b5760003560e01c80638ce5877c116100b6578063d9caed121161006f578063d9caed1214610417578063db6b524614610440578063e4652f491461044a578063e7e31e7a14610473578063f7888aec1461049c578063fea9abc8146104d95761014b565b80638ce5877c1461032c5780638f2839701461035557806391a775b71461037e578063a0452a541461039a578063a9b61bcd146103c5578063b3db428b146103ee5761014b565b806347e7ef241161010857806347e7ef24146102465780634807e47c1461026f5780634e67428d1461029857806369b41170146102af578063754ff725146102da5780637eab231a146103035761014b565b806307b18bde146101505780630bae283d146101795780630c846136146101a25780633683f9ab146101cb5780633a82f395146101f4578063468efee81461021d575b600080fd5b34801561015c57600080fd5b5061017760048036038101906101729190612035565b6104f5565b005b34801561018557600080fd5b506101a0600480360381019061019b9190612035565b610522565b005b3480156101ae57600080fd5b506101c960048036038101906101c491906121bb565b610726565b005b3480156101d757600080fd5b506101f260048036038101906101ed9190612035565b61084e565b005b34801561020057600080fd5b5061021b60048036038101906102169190612276565b61093f565b005b34801561022957600080fd5b50610244600480360381019061023f9190612522565b6109fe565b005b34801561025257600080fd5b5061026d60048036038101906102689190612035565b610ab6565b005b34801561027b57600080fd5b50610296600480360381019061029191906125f9565b610ac5565b005b3480156102a457600080fd5b506102ad610b7d565b005b3480156102bb57600080fd5b506102c4610d8b565b6040516102d191906126df565b60405180910390f35b3480156102e657600080fd5b5061030160048036038101906102fc91906126fa565b610d92565b005b34801561030f57600080fd5b5061032a600480360381019061032591906127a1565b610eb3565b005b34801561033857600080fd5b50610353600480360381019061034e91906127f4565b61110b565b005b34801561036157600080fd5b5061037c600480360381019061037791906127f4565b6111f5565b005b610398600480360381019061039391906127f4565b61134e565b005b3480156103a657600080fd5b506103af611370565b6040516103bc91906126df565b60405180910390f35b3480156103d157600080fd5b506103ec60048036038101906103e79190612821565b611376565b005b3480156103fa57600080fd5b50610415600480360381019061041091906127a1565b61149e565b005b34801561042357600080fd5b5061043e600480360381019061043991906127a1565b6114db565b005b6104486114ec565b005b34801561045657600080fd5b50610471600480360381019061046c91906127a1565b61150d565b005b34801561047f57600080fd5b5061049a600480360381019061049591906127f4565b611685565b005b3480156104a857600080fd5b506104c360048036038101906104be9190612888565b61176f565b6040516104d091906126df565b60405180910390f35b6104f360048036038101906104ee91906128c8565b6117f6565b005b610514734000000000000000000000000000000000000000338361187a565b61051e8282611a41565b5050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a490612981565b60405180910390fd5b60008190506005600073400000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156106de576005600073400000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b8047106106f4576106ef8382611a41565b610721565b7fe1ef72f1796988294cc9a59a2e3073a1079dc556e353a1ebf43b456b191161a960405160405180910390a15b505050565b6001600084815260200190815260200160002060009054906101000a900460ff1615610787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077e906129ed565b60405180910390fd5b80600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061081a5761081584338361187a565b610848565b6108473330838773ffffffffffffffffffffffffffffffffffffffff16611b41909392919063ffffffff16565b5b50505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d090612981565b60405180910390fd5b8047106108ef576108ea8282611a41565b61093b565b61090e7340000000000000000000000000000000000000008383611bca565b7f6a036bee1b01306b61370b348f57c9a7038a7bf8cb5d8a4cfbfb197b3f329e8360405160405180910390a15b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c690612a59565b60405180910390fd5b806001600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60005b84518163ffffffff161015610aaf57610a9c858263ffffffff1681518110610a2c57610a2b612a79565b5b6020026020010151858363ffffffff1681518110610a4d57610a4c612a79565b5b6020026020010151858463ffffffff1681518110610a6e57610a6d612a79565b5b6020026020010151858563ffffffff1681518110610a8f57610a8e612a79565b5b6020026020010151610726565b8080610aa790612ae7565b915050610a01565b5050505050565b610ac1823383611cd2565b5050565b60005b84518163ffffffff161015610b7657610b63858263ffffffff1681518110610af357610af2612a79565b5b6020026020010151858363ffffffff1681518110610b1457610b13612a79565b5b6020026020010151858463ffffffff1681518110610b3557610b34612a79565b5b6020026020010151858563ffffffff1681518110610b5657610b55612a79565b5b6020026020010151611376565b8080610b6e90612ae7565b915050610ac8565b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0490612a59565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610c9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9690612b60565b60405180910390fd5b600454421015610ce4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdb90612bcc565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6201518081565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1490612981565b60405180910390fd5b60005b83518163ffffffff161015610ead57610e9a848263ffffffff1681518110610e4b57610e4a612a79565b5b6020026020010151848363ffffffff1681518110610e6c57610e6b612a79565b5b6020026020010151848463ffffffff1681518110610e8d57610e8c612a79565b5b602002602001015161150d565b8080610ea590612ae7565b915050610e20565b50505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610f3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3590612981565b60405180910390fd5b6000819050600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561104757600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b808473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110819190612bfb565b602060405180830381865afa15801561109e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c29190612c2b565b106110d8576110d384848584611d0f565b611105565b7fe1ef72f1796988294cc9a59a2e3073a1079dc556e353a1ebf43b456b191161a960405160405180910390a15b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461119b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119290612a59565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611285576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127c90612a59565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ec90612ca4565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062015180426113459190612cc4565b60048190555050565b61136d7340000000000000000000000000000000000000008234611bca565b50565b60045481565b6001600084815260200190815260200160002060009054906101000a900460ff16156113d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ce906129ed565b60405180910390fd5b80600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061146a5761146584338361187a565b611498565b6114973330838773ffffffffffffffffffffffffffffffffffffffff16611b41909392919063ffffffff16565b5b50505050565b6114cb3330838673ffffffffffffffffffffffffffffffffffffffff16611b41909392919063ffffffff16565b6114d6838383611bca565b505050565b6114e783338484611d0f565b505050565b61150b7340000000000000000000000000000000000000003334611bca565b565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158f90612981565b60405180910390fd5b808373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115d29190612bfb565b602060405180830381865afa1580156115ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116139190612c2b565b106116485761164382828573ffffffffffffffffffffffffffffffffffffffff16611d4b9092919063ffffffff16565b611680565b611653838383611bca565b7f6a036bee1b01306b61370b348f57c9a7038a7bf8cb5d8a4cfbfb197b3f329e8360405160405180910390a15b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611715576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170c90612a59565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6001600082815260200190815260200160002060009054906101000a900460ff1615611857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184e906129ed565b60405180910390fd5b6118767340000000000000000000000000000000000000003334611bca565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156118ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e190612d66565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156119a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a090612dd2565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a359190612df2565b92505081905550505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115611a7657611a75612090565b5b6040519080825280601f01601f191660200182016040528015611aa85781602001600182028036833780820191505090505b50604051611ab69190612ea0565b60006040518083038185875af1925050503d8060008114611af3576040519150601f19603f3d011682016040523d82523d6000602084013e611af8565b606091505b5050905080611b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3390612f29565b60405180910390fd5b505050565b611bc4846323b872dd60e01b858585604051602401611b6293929190612f49565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611dd1565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3190612fcc565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611cc69190612cc4565b92505081905550505050565b611cff8230838673ffffffffffffffffffffffffffffffffffffffff16611b41909392919063ffffffff16565b611d0a838383611bca565b505050565b611d1a84848361187a565b611d4582828673ffffffffffffffffffffffffffffffffffffffff16611d4b9092919063ffffffff16565b50505050565b611dcc8363a9059cbb60e01b8484604051602401611d6a929190612fec565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611dd1565b505050565b611df08273ffffffffffffffffffffffffffffffffffffffff16611f42565b611e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2690613061565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051611e579190612ea0565b6000604051808303816000865af19150503d8060008114611e94576040519150601f19603f3d011682016040523d82523d6000602084013e611e99565b606091505b509150915081611ede576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed5906130cd565b60405180910390fd5b600081511115611f3c5780806020019051810190611efc9190613102565b611f3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f32906131a1565b60405180910390fd5b5b50505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91506000801b8214158015611f845750808214155b92505050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611fcc82611fa1565b9050919050565b611fdc81611fc1565b8114611fe757600080fd5b50565b600081359050611ff981611fd3565b92915050565b6000819050919050565b61201281611fff565b811461201d57600080fd5b50565b60008135905061202f81612009565b92915050565b6000806040838503121561204c5761204b611f97565b5b600061205a85828601611fea565b925050602061206b85828601612020565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6120c88261207f565b810181811067ffffffffffffffff821117156120e7576120e6612090565b5b80604052505050565b60006120fa611f8d565b905061210682826120bf565b919050565b600067ffffffffffffffff82111561212657612125612090565b5b61212f8261207f565b9050602081019050919050565b82818337600083830152505050565b600061215e6121598461210b565b6120f0565b90508281526020810184848401111561217a5761217961207a565b5b61218584828561213c565b509392505050565b600082601f8301126121a2576121a1612075565b5b81356121b284826020860161214b565b91505092915050565b600080600080608085870312156121d5576121d4611f97565b5b60006121e387828801611fea565b94505060206121f487828801612020565b935050604085013567ffffffffffffffff81111561221557612214611f9c565b5b6122218782880161218d565b925050606061223287828801612020565b91505092959194509250565b60008115159050919050565b6122538161223e565b811461225e57600080fd5b50565b6000813590506122708161224a565b92915050565b6000806040838503121561228d5761228c611f97565b5b600061229b85828601612020565b92505060206122ac85828601612261565b9150509250929050565b600067ffffffffffffffff8211156122d1576122d0612090565b5b602082029050602081019050919050565b600080fd5b60006122fa6122f5846122b6565b6120f0565b9050808382526020820190506020840283018581111561231d5761231c6122e2565b5b835b8181101561234657806123328882611fea565b84526020840193505060208101905061231f565b5050509392505050565b600082601f83011261236557612364612075565b5b81356123758482602086016122e7565b91505092915050565b600067ffffffffffffffff82111561239957612398612090565b5b602082029050602081019050919050565b60006123bd6123b88461237e565b6120f0565b905080838252602082019050602084028301858111156123e0576123df6122e2565b5b835b8181101561240957806123f58882612020565b8452602084019350506020810190506123e2565b5050509392505050565b600082601f83011261242857612427612075565b5b81356124388482602086016123aa565b91505092915050565b600067ffffffffffffffff82111561245c5761245b612090565b5b602082029050602081019050919050565b600061248061247b84612441565b6120f0565b905080838252602082019050602084028301858111156124a3576124a26122e2565b5b835b818110156124ea57803567ffffffffffffffff8111156124c8576124c7612075565b5b8086016124d5898261218d565b855260208501945050506020810190506124a5565b5050509392505050565b600082601f83011261250957612508612075565b5b813561251984826020860161246d565b91505092915050565b6000806000806080858703121561253c5761253b611f97565b5b600085013567ffffffffffffffff81111561255a57612559611f9c565b5b61256687828801612350565b945050602085013567ffffffffffffffff81111561258757612586611f9c565b5b61259387828801612413565b935050604085013567ffffffffffffffff8111156125b4576125b3611f9c565b5b6125c0878288016124f4565b925050606085013567ffffffffffffffff8111156125e1576125e0611f9c565b5b6125ed87828801612413565b91505092959194509250565b6000806000806080858703121561261357612612611f97565b5b600085013567ffffffffffffffff81111561263157612630611f9c565b5b61263d87828801612350565b945050602085013567ffffffffffffffff81111561265e5761265d611f9c565b5b61266a87828801612413565b935050604085013567ffffffffffffffff81111561268b5761268a611f9c565b5b61269787828801612350565b925050606085013567ffffffffffffffff8111156126b8576126b7611f9c565b5b6126c487828801612413565b91505092959194509250565b6126d981611fff565b82525050565b60006020820190506126f460008301846126d0565b92915050565b60008060006060848603121561271357612712611f97565b5b600084013567ffffffffffffffff81111561273157612730611f9c565b5b61273d86828701612350565b935050602084013567ffffffffffffffff81111561275e5761275d611f9c565b5b61276a86828701612350565b925050604084013567ffffffffffffffff81111561278b5761278a611f9c565b5b61279786828701612413565b9150509250925092565b6000806000606084860312156127ba576127b9611f97565b5b60006127c886828701611fea565b93505060206127d986828701611fea565b92505060406127ea86828701612020565b9150509250925092565b60006020828403121561280a57612809611f97565b5b600061281884828501611fea565b91505092915050565b6000806000806080858703121561283b5761283a611f97565b5b600061284987828801611fea565b945050602061285a87828801612020565b935050604061286b87828801611fea565b925050606061287c87828801612020565b91505092959194509250565b6000806040838503121561289f5761289e611f97565b5b60006128ad85828601611fea565b92505060206128be85828601611fea565b9150509250929050565b600080604083850312156128df576128de611f97565b5b600083013567ffffffffffffffff8111156128fd576128fc611f9c565b5b6129098582860161218d565b925050602061291a85828601612020565b9150509250929050565b600082825260208201905092915050565b7f4e6f74207370656e6465723a20464f5242494444454e00000000000000000000600082015250565b600061296b601683612924565b915061297682612935565b602082019050919050565b6000602082019050818103600083015261299a8161295e565b9050919050565b7f434841494e5f49535f5041555345440000000000000000000000000000000000600082015250565b60006129d7600f83612924565b91506129e2826129a1565b602082019050919050565b60006020820190508181036000830152612a06816129ca565b9050919050565b7f4e6f742061646d696e3a20464f5242494444454e000000000000000000000000600082015250565b6000612a43601483612924565b9150612a4e82612a0d565b602082019050919050565b60006020820190508181036000830152612a7281612a36565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600063ffffffff82169050919050565b6000612af282612ad7565b915063ffffffff821415612b0957612b08612aa8565b5b600182019050919050565b7f6170706c7941646d696e3a206164647265737328302900000000000000000000600082015250565b6000612b4a601683612924565b9150612b5582612b14565b602082019050919050565b60006020820190508181036000830152612b7981612b3d565b9050919050565b7f6170706c7941646d696e3a2041444d494e5f4e4f545f52454144592000000000600082015250565b6000612bb6601c83612924565b9150612bc182612b80565b602082019050919050565b60006020820190508181036000830152612be581612ba9565b9050919050565b612bf581611fc1565b82525050565b6000602082019050612c106000830184612bec565b92915050565b600081519050612c2581612009565b92915050565b600060208284031215612c4157612c40611f97565b5b6000612c4f84828501612c16565b91505092915050565b7f6368616e676541646d696e3a2061646472657373283029000000000000000000600082015250565b6000612c8e601783612924565b9150612c9982612c58565b602082019050919050565b60006020820190508181036000830152612cbd81612c81565b9050919050565b6000612ccf82611fff565b9150612cda83611fff565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612d0f57612d0e612aa8565b5b828201905092915050565b7f6465633a20616464726573732069732030000000000000000000000000000000600082015250565b6000612d50601183612924565b9150612d5b82612d1a565b602082019050919050565b60006020820190508181036000830152612d7f81612d43565b9050919050565b7f6465633a20616d6f756e7420657863656564732062616c616e63650000000000600082015250565b6000612dbc601b83612924565b9150612dc782612d86565b602082019050919050565b60006020820190508181036000830152612deb81612daf565b9050919050565b6000612dfd82611fff565b9150612e0883611fff565b925082821015612e1b57612e1a612aa8565b5b828203905092915050565b600081519050919050565b600081905092915050565b60005b83811015612e5a578082015181840152602081019050612e3f565b83811115612e69576000848401525b50505050565b6000612e7a82612e26565b612e848185612e31565b9350612e94818560208601612e3c565b80840191505092915050565b6000612eac8284612e6f565b915081905092915050565b7f5472616e7366657248656c7065723a204e41544956455f5452414e534645525f60008201527f4641494c45440000000000000000000000000000000000000000000000000000602082015250565b6000612f13602683612924565b9150612f1e82612eb7565b604082019050919050565b60006020820190508181036000830152612f4281612f06565b9050919050565b6000606082019050612f5e6000830186612bec565b612f6b6020830185612bec565b612f7860408301846126d0565b949350505050565b7f696e633a20616464726573732069732030000000000000000000000000000000600082015250565b6000612fb6601183612924565b9150612fc182612f80565b602082019050919050565b60006020820190508181036000830152612fe581612fa9565b9050919050565b60006040820190506130016000830185612bec565b61300e60208301846126d0565b9392505050565b7f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400600082015250565b600061304b601f83612924565b915061305682613015565b602082019050919050565b6000602082019050818103600083015261307a8161303e565b9050919050565b7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564600082015250565b60006130b7602083612924565b91506130c282613081565b602082019050919050565b600060208201905081810360008301526130e6816130aa565b9050919050565b6000815190506130fc8161224a565b92915050565b60006020828403121561311857613117611f97565b5b6000613126848285016130ed565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061318b602a83612924565b91506131968261312f565b604082019050919050565b600060208201905081810360008301526131ba8161317e565b905091905056fea26469706673582212204d8f80ae1941f74feeeb6162937c12e74a9e58d7c1329813001bee713f26819f64736f6c637827302e382e31322d646576656c6f702e323032322e322e382b636f6d6d69742e35633362636236630058"

// DeployVault deploys a new Ethereum contract, binding an instance of Vault to it.
func DeployVault(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Vault, error) {
	parsed, err := abi.JSON(strings.NewReader(VaultABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(VaultBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Vault{VaultCaller: VaultCaller{contract: contract}, VaultTransactor: VaultTransactor{contract: contract}, VaultFilterer: VaultFilterer{contract: contract}}, nil
}

// Vault is an auto generated Go binding around an Ethereum contract.
type Vault struct {
	VaultCaller     // Read-only binding to the contract
	VaultTransactor // Write-only binding to the contract
	VaultFilterer   // Log filterer for contract events
}

// VaultCaller is an auto generated read-only Go binding around an Ethereum contract.
type VaultCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VaultTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VaultFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VaultSession struct {
	Contract     *Vault            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VaultCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VaultCallerSession struct {
	Contract *VaultCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// VaultTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VaultTransactorSession struct {
	Contract     *VaultTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VaultRaw is an auto generated low-level Go binding around an Ethereum contract.
type VaultRaw struct {
	Contract *Vault // Generic contract binding to access the raw methods on
}

// VaultCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VaultCallerRaw struct {
	Contract *VaultCaller // Generic read-only contract binding to access the raw methods on
}

// VaultTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VaultTransactorRaw struct {
	Contract *VaultTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVault creates a new instance of Vault, bound to a specific deployed contract.
func NewVault(address common.Address, backend bind.ContractBackend) (*Vault, error) {
	contract, err := bindVault(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Vault{VaultCaller: VaultCaller{contract: contract}, VaultTransactor: VaultTransactor{contract: contract}, VaultFilterer: VaultFilterer{contract: contract}}, nil
}

// NewVaultCaller creates a new read-only instance of Vault, bound to a specific deployed contract.
func NewVaultCaller(address common.Address, caller bind.ContractCaller) (*VaultCaller, error) {
	contract, err := bindVault(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VaultCaller{contract: contract}, nil
}

// NewVaultTransactor creates a new write-only instance of Vault, bound to a specific deployed contract.
func NewVaultTransactor(address common.Address, transactor bind.ContractTransactor) (*VaultTransactor, error) {
	contract, err := bindVault(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VaultTransactor{contract: contract}, nil
}

// NewVaultFilterer creates a new log filterer instance of Vault, bound to a specific deployed contract.
func NewVaultFilterer(address common.Address, filterer bind.ContractFilterer) (*VaultFilterer, error) {
	contract, err := bindVault(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VaultFilterer{contract: contract}, nil
}

// bindVault binds a generic wrapper to an already deployed contract.
func bindVault(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VaultABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vault *VaultRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Vault.Contract.VaultCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vault *VaultRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.Contract.VaultTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vault *VaultRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vault.Contract.VaultTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vault *VaultCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Vault.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vault *VaultTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vault *VaultTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vault.Contract.contract.Transact(opts, method, params...)
}

// DELAY is a free data retrieval call binding the contract method 0x69b41170.
//
// Solidity: function DELAY() view returns(uint256)
func (_Vault *VaultCaller) DELAY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "DELAY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DELAY is a free data retrieval call binding the contract method 0x69b41170.
//
// Solidity: function DELAY() view returns(uint256)
func (_Vault *VaultSession) DELAY() (*big.Int, error) {
	return _Vault.Contract.DELAY(&_Vault.CallOpts)
}

// DELAY is a free data retrieval call binding the contract method 0x69b41170.
//
// Solidity: function DELAY() view returns(uint256)
func (_Vault *VaultCallerSession) DELAY() (*big.Int, error) {
	return _Vault.Contract.DELAY(&_Vault.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0xf7888aec.
//
// Solidity: function balanceOf(address token, address account) view returns(uint256)
func (_Vault *VaultCaller) BalanceOf(opts *bind.CallOpts, token common.Address, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "balanceOf", token, account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0xf7888aec.
//
// Solidity: function balanceOf(address token, address account) view returns(uint256)
func (_Vault *VaultSession) BalanceOf(token common.Address, account common.Address) (*big.Int, error) {
	return _Vault.Contract.BalanceOf(&_Vault.CallOpts, token, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0xf7888aec.
//
// Solidity: function balanceOf(address token, address account) view returns(uint256)
func (_Vault *VaultCallerSession) BalanceOf(token common.Address, account common.Address) (*big.Int, error) {
	return _Vault.Contract.BalanceOf(&_Vault.CallOpts, token, account)
}

// NewAdminTime is a free data retrieval call binding the contract method 0xa0452a54.
//
// Solidity: function newAdminTime() view returns(uint256)
func (_Vault *VaultCaller) NewAdminTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "newAdminTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NewAdminTime is a free data retrieval call binding the contract method 0xa0452a54.
//
// Solidity: function newAdminTime() view returns(uint256)
func (_Vault *VaultSession) NewAdminTime() (*big.Int, error) {
	return _Vault.Contract.NewAdminTime(&_Vault.CallOpts)
}

// NewAdminTime is a free data retrieval call binding the contract method 0xa0452a54.
//
// Solidity: function newAdminTime() view returns(uint256)
func (_Vault *VaultCallerSession) NewAdminTime() (*big.Int, error) {
	return _Vault.Contract.NewAdminTime(&_Vault.CallOpts)
}

// AddSpender is a paid mutator transaction binding the contract method 0xe7e31e7a.
//
// Solidity: function addSpender(address spender) returns()
func (_Vault *VaultTransactor) AddSpender(opts *bind.TransactOpts, spender common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "addSpender", spender)
}

// AddSpender is a paid mutator transaction binding the contract method 0xe7e31e7a.
//
// Solidity: function addSpender(address spender) returns()
func (_Vault *VaultSession) AddSpender(spender common.Address) (*types.Transaction, error) {
	return _Vault.Contract.AddSpender(&_Vault.TransactOpts, spender)
}

// AddSpender is a paid mutator transaction binding the contract method 0xe7e31e7a.
//
// Solidity: function addSpender(address spender) returns()
func (_Vault *VaultTransactorSession) AddSpender(spender common.Address) (*types.Transaction, error) {
	return _Vault.Contract.AddSpender(&_Vault.TransactOpts, spender)
}

// ApplyAdmin is a paid mutator transaction binding the contract method 0x4e67428d.
//
// Solidity: function applyAdmin() returns()
func (_Vault *VaultTransactor) ApplyAdmin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "applyAdmin")
}

// ApplyAdmin is a paid mutator transaction binding the contract method 0x4e67428d.
//
// Solidity: function applyAdmin() returns()
func (_Vault *VaultSession) ApplyAdmin() (*types.Transaction, error) {
	return _Vault.Contract.ApplyAdmin(&_Vault.TransactOpts)
}

// ApplyAdmin is a paid mutator transaction binding the contract method 0x4e67428d.
//
// Solidity: function applyAdmin() returns()
func (_Vault *VaultTransactorSession) ApplyAdmin() (*types.Transaction, error) {
	return _Vault.Contract.ApplyAdmin(&_Vault.TransactOpts)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_Vault *VaultTransactor) ChangeAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "changeAdmin", newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_Vault *VaultSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.Contract.ChangeAdmin(&_Vault.TransactOpts, newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_Vault *VaultTransactorSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.Contract.ChangeAdmin(&_Vault.TransactOpts, newAdmin)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address token, uint256 amount) returns()
func (_Vault *VaultTransactor) Deposit(opts *bind.TransactOpts, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "deposit", token, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address token, uint256 amount) returns()
func (_Vault *VaultSession) Deposit(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.Deposit(&_Vault.TransactOpts, token, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address token, uint256 amount) returns()
func (_Vault *VaultTransactorSession) Deposit(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.Deposit(&_Vault.TransactOpts, token, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0xb3db428b.
//
// Solidity: function depositFor(address token, address receiver, uint256 amount) returns()
func (_Vault *VaultTransactor) DepositFor(opts *bind.TransactOpts, token common.Address, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "depositFor", token, receiver, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0xb3db428b.
//
// Solidity: function depositFor(address token, address receiver, uint256 amount) returns()
func (_Vault *VaultSession) DepositFor(token common.Address, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.DepositFor(&_Vault.TransactOpts, token, receiver, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0xb3db428b.
//
// Solidity: function depositFor(address token, address receiver, uint256 amount) returns()
func (_Vault *VaultTransactorSession) DepositFor(token common.Address, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.DepositFor(&_Vault.TransactOpts, token, receiver, amount)
}

// DepositNative is a paid mutator transaction binding the contract method 0xdb6b5246.
//
// Solidity: function depositNative() payable returns()
func (_Vault *VaultTransactor) DepositNative(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "depositNative")
}

// DepositNative is a paid mutator transaction binding the contract method 0xdb6b5246.
//
// Solidity: function depositNative() payable returns()
func (_Vault *VaultSession) DepositNative() (*types.Transaction, error) {
	return _Vault.Contract.DepositNative(&_Vault.TransactOpts)
}

// DepositNative is a paid mutator transaction binding the contract method 0xdb6b5246.
//
// Solidity: function depositNative() payable returns()
func (_Vault *VaultTransactorSession) DepositNative() (*types.Transaction, error) {
	return _Vault.Contract.DepositNative(&_Vault.TransactOpts)
}

// DepositNativeFor is a paid mutator transaction binding the contract method 0x91a775b7.
//
// Solidity: function depositNativeFor(address receiver) payable returns()
func (_Vault *VaultTransactor) DepositNativeFor(opts *bind.TransactOpts, receiver common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "depositNativeFor", receiver)
}

// DepositNativeFor is a paid mutator transaction binding the contract method 0x91a775b7.
//
// Solidity: function depositNativeFor(address receiver) payable returns()
func (_Vault *VaultSession) DepositNativeFor(receiver common.Address) (*types.Transaction, error) {
	return _Vault.Contract.DepositNativeFor(&_Vault.TransactOpts, receiver)
}

// DepositNativeFor is a paid mutator transaction binding the contract method 0x91a775b7.
//
// Solidity: function depositNativeFor(address receiver) payable returns()
func (_Vault *VaultTransactorSession) DepositNativeFor(receiver common.Address) (*types.Transaction, error) {
	return _Vault.Contract.DepositNativeFor(&_Vault.TransactOpts, receiver)
}

// RemoveSpender is a paid mutator transaction binding the contract method 0x8ce5877c.
//
// Solidity: function removeSpender(address spender) returns()
func (_Vault *VaultTransactor) RemoveSpender(opts *bind.TransactOpts, spender common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "removeSpender", spender)
}

// RemoveSpender is a paid mutator transaction binding the contract method 0x8ce5877c.
//
// Solidity: function removeSpender(address spender) returns()
func (_Vault *VaultSession) RemoveSpender(spender common.Address) (*types.Transaction, error) {
	return _Vault.Contract.RemoveSpender(&_Vault.TransactOpts, spender)
}

// RemoveSpender is a paid mutator transaction binding the contract method 0x8ce5877c.
//
// Solidity: function removeSpender(address spender) returns()
func (_Vault *VaultTransactorSession) RemoveSpender(spender common.Address) (*types.Transaction, error) {
	return _Vault.Contract.RemoveSpender(&_Vault.TransactOpts, spender)
}

// RetryTransfer is a paid mutator transaction binding the contract method 0x7eab231a.
//
// Solidity: function retryTransfer(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactor) RetryTransfer(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "retryTransfer", token, to, amount)
}

// RetryTransfer is a paid mutator transaction binding the contract method 0x7eab231a.
//
// Solidity: function retryTransfer(address token, address to, uint256 amount) returns()
func (_Vault *VaultSession) RetryTransfer(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RetryTransfer(&_Vault.TransactOpts, token, to, amount)
}

// RetryTransfer is a paid mutator transaction binding the contract method 0x7eab231a.
//
// Solidity: function retryTransfer(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) RetryTransfer(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RetryTransfer(&_Vault.TransactOpts, token, to, amount)
}

// RetryTransferNative is a paid mutator transaction binding the contract method 0x0bae283d.
//
// Solidity: function retryTransferNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactor) RetryTransferNative(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "retryTransferNative", to, amount)
}

// RetryTransferNative is a paid mutator transaction binding the contract method 0x0bae283d.
//
// Solidity: function retryTransferNative(address to, uint256 amount) returns()
func (_Vault *VaultSession) RetryTransferNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RetryTransferNative(&_Vault.TransactOpts, to, amount)
}

// RetryTransferNative is a paid mutator transaction binding the contract method 0x0bae283d.
//
// Solidity: function retryTransferNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) RetryTransferNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RetryTransferNative(&_Vault.TransactOpts, to, amount)
}

// SetNotPausedChain is a paid mutator transaction binding the contract method 0x3a82f395.
//
// Solidity: function setNotPausedChain(uint256 chain, bool state) returns()
func (_Vault *VaultTransactor) SetNotPausedChain(opts *bind.TransactOpts, chain *big.Int, state bool) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "setNotPausedChain", chain, state)
}

// SetNotPausedChain is a paid mutator transaction binding the contract method 0x3a82f395.
//
// Solidity: function setNotPausedChain(uint256 chain, bool state) returns()
func (_Vault *VaultSession) SetNotPausedChain(chain *big.Int, state bool) (*types.Transaction, error) {
	return _Vault.Contract.SetNotPausedChain(&_Vault.TransactOpts, chain, state)
}

// SetNotPausedChain is a paid mutator transaction binding the contract method 0x3a82f395.
//
// Solidity: function setNotPausedChain(uint256 chain, bool state) returns()
func (_Vault *VaultTransactorSession) SetNotPausedChain(chain *big.Int, state bool) (*types.Transaction, error) {
	return _Vault.Contract.SetNotPausedChain(&_Vault.TransactOpts, chain, state)
}

// TransferIn is a paid mutator transaction binding the contract method 0xe4652f49.
//
// Solidity: function transferIn(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactor) TransferIn(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferIn", token, to, amount)
}

// TransferIn is a paid mutator transaction binding the contract method 0xe4652f49.
//
// Solidity: function transferIn(address token, address to, uint256 amount) returns()
func (_Vault *VaultSession) TransferIn(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferIn(&_Vault.TransactOpts, token, to, amount)
}

// TransferIn is a paid mutator transaction binding the contract method 0xe4652f49.
//
// Solidity: function transferIn(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) TransferIn(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferIn(&_Vault.TransactOpts, token, to, amount)
}

// TransferInMultiple is a paid mutator transaction binding the contract method 0x754ff725.
//
// Solidity: function transferInMultiple(address[] tokens, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultTransactor) TransferInMultiple(opts *bind.TransactOpts, tokens []common.Address, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferInMultiple", tokens, tos, amounts)
}

// TransferInMultiple is a paid mutator transaction binding the contract method 0x754ff725.
//
// Solidity: function transferInMultiple(address[] tokens, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultSession) TransferInMultiple(tokens []common.Address, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferInMultiple(&_Vault.TransactOpts, tokens, tos, amounts)
}

// TransferInMultiple is a paid mutator transaction binding the contract method 0x754ff725.
//
// Solidity: function transferInMultiple(address[] tokens, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultTransactorSession) TransferInMultiple(tokens []common.Address, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferInMultiple(&_Vault.TransactOpts, tokens, tos, amounts)
}

// TransferInNative is a paid mutator transaction binding the contract method 0x3683f9ab.
//
// Solidity: function transferInNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactor) TransferInNative(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferInNative", to, amount)
}

// TransferInNative is a paid mutator transaction binding the contract method 0x3683f9ab.
//
// Solidity: function transferInNative(address to, uint256 amount) returns()
func (_Vault *VaultSession) TransferInNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferInNative(&_Vault.TransactOpts, to, amount)
}

// TransferInNative is a paid mutator transaction binding the contract method 0x3683f9ab.
//
// Solidity: function transferInNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) TransferInNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferInNative(&_Vault.TransactOpts, to, amount)
}

// TransferOut is a paid mutator transaction binding the contract method 0xa9b61bcd.
//
// Solidity: function transferOut(address token, uint256 dstChain, address to, uint256 amount) returns()
func (_Vault *VaultTransactor) TransferOut(opts *bind.TransactOpts, token common.Address, dstChain *big.Int, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferOut", token, dstChain, to, amount)
}

// TransferOut is a paid mutator transaction binding the contract method 0xa9b61bcd.
//
// Solidity: function transferOut(address token, uint256 dstChain, address to, uint256 amount) returns()
func (_Vault *VaultSession) TransferOut(token common.Address, dstChain *big.Int, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOut(&_Vault.TransactOpts, token, dstChain, to, amount)
}

// TransferOut is a paid mutator transaction binding the contract method 0xa9b61bcd.
//
// Solidity: function transferOut(address token, uint256 dstChain, address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) TransferOut(token common.Address, dstChain *big.Int, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOut(&_Vault.TransactOpts, token, dstChain, to, amount)
}

// TransferOutMultiple is a paid mutator transaction binding the contract method 0x4807e47c.
//
// Solidity: function transferOutMultiple(address[] tokens, uint256[] dstChains, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultTransactor) TransferOutMultiple(opts *bind.TransactOpts, tokens []common.Address, dstChains []*big.Int, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferOutMultiple", tokens, dstChains, tos, amounts)
}

// TransferOutMultiple is a paid mutator transaction binding the contract method 0x4807e47c.
//
// Solidity: function transferOutMultiple(address[] tokens, uint256[] dstChains, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultSession) TransferOutMultiple(tokens []common.Address, dstChains []*big.Int, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutMultiple(&_Vault.TransactOpts, tokens, dstChains, tos, amounts)
}

// TransferOutMultiple is a paid mutator transaction binding the contract method 0x4807e47c.
//
// Solidity: function transferOutMultiple(address[] tokens, uint256[] dstChains, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultTransactorSession) TransferOutMultiple(tokens []common.Address, dstChains []*big.Int, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutMultiple(&_Vault.TransactOpts, tokens, dstChains, tos, amounts)
}

// TransferOutNative is a paid mutator transaction binding the contract method 0xfea9abc8.
//
// Solidity: function transferOutNative(string to, uint256 dstChain) payable returns()
func (_Vault *VaultTransactor) TransferOutNative(opts *bind.TransactOpts, to string, dstChain *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferOutNative", to, dstChain)
}

// TransferOutNative is a paid mutator transaction binding the contract method 0xfea9abc8.
//
// Solidity: function transferOutNative(string to, uint256 dstChain) payable returns()
func (_Vault *VaultSession) TransferOutNative(to string, dstChain *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNative(&_Vault.TransactOpts, to, dstChain)
}

// TransferOutNative is a paid mutator transaction binding the contract method 0xfea9abc8.
//
// Solidity: function transferOutNative(string to, uint256 dstChain) payable returns()
func (_Vault *VaultTransactorSession) TransferOutNative(to string, dstChain *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNative(&_Vault.TransactOpts, to, dstChain)
}

// TransferOutNonEvm is a paid mutator transaction binding the contract method 0x0c846136.
//
// Solidity: function transferOutNonEvm(address token, uint256 dstChain, string to, uint256 amount) returns()
func (_Vault *VaultTransactor) TransferOutNonEvm(opts *bind.TransactOpts, token common.Address, dstChain *big.Int, to string, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferOutNonEvm", token, dstChain, to, amount)
}

// TransferOutNonEvm is a paid mutator transaction binding the contract method 0x0c846136.
//
// Solidity: function transferOutNonEvm(address token, uint256 dstChain, string to, uint256 amount) returns()
func (_Vault *VaultSession) TransferOutNonEvm(token common.Address, dstChain *big.Int, to string, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNonEvm(&_Vault.TransactOpts, token, dstChain, to, amount)
}

// TransferOutNonEvm is a paid mutator transaction binding the contract method 0x0c846136.
//
// Solidity: function transferOutNonEvm(address token, uint256 dstChain, string to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) TransferOutNonEvm(token common.Address, dstChain *big.Int, to string, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNonEvm(&_Vault.TransactOpts, token, dstChain, to, amount)
}

// TransferOutNonEvmMultiple is a paid mutator transaction binding the contract method 0x468efee8.
//
// Solidity: function transferOutNonEvmMultiple(address[] tokens, uint256[] dstChains, string[] tos, uint256[] amounts) returns()
func (_Vault *VaultTransactor) TransferOutNonEvmMultiple(opts *bind.TransactOpts, tokens []common.Address, dstChains []*big.Int, tos []string, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferOutNonEvmMultiple", tokens, dstChains, tos, amounts)
}

// TransferOutNonEvmMultiple is a paid mutator transaction binding the contract method 0x468efee8.
//
// Solidity: function transferOutNonEvmMultiple(address[] tokens, uint256[] dstChains, string[] tos, uint256[] amounts) returns()
func (_Vault *VaultSession) TransferOutNonEvmMultiple(tokens []common.Address, dstChains []*big.Int, tos []string, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNonEvmMultiple(&_Vault.TransactOpts, tokens, dstChains, tos, amounts)
}

// TransferOutNonEvmMultiple is a paid mutator transaction binding the contract method 0x468efee8.
//
// Solidity: function transferOutNonEvmMultiple(address[] tokens, uint256[] dstChains, string[] tos, uint256[] amounts) returns()
func (_Vault *VaultTransactorSession) TransferOutNonEvmMultiple(tokens []common.Address, dstChains []*big.Int, tos []string, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNonEvmMultiple(&_Vault.TransactOpts, tokens, dstChains, tos, amounts)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactor) Withdraw(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "withdraw", token, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address token, address to, uint256 amount) returns()
func (_Vault *VaultSession) Withdraw(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.Withdraw(&_Vault.TransactOpts, token, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) Withdraw(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.Withdraw(&_Vault.TransactOpts, token, to, amount)
}

// WithdrawNative is a paid mutator transaction binding the contract method 0x07b18bde.
//
// Solidity: function withdrawNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactor) WithdrawNative(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "withdrawNative", to, amount)
}

// WithdrawNative is a paid mutator transaction binding the contract method 0x07b18bde.
//
// Solidity: function withdrawNative(address to, uint256 amount) returns()
func (_Vault *VaultSession) WithdrawNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.WithdrawNative(&_Vault.TransactOpts, to, amount)
}

// WithdrawNative is a paid mutator transaction binding the contract method 0x07b18bde.
//
// Solidity: function withdrawNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) WithdrawNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.WithdrawNative(&_Vault.TransactOpts, to, amount)
}

// VaultCode501Iterator is returned from FilterCode501 and is used to iterate over the raw logs and unpacked data for Code501 events raised by the Vault contract.
type VaultCode501Iterator struct {
	Event *VaultCode501 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultCode501Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultCode501)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultCode501)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultCode501Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultCode501Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultCode501 represents a Code501 event raised by the Vault contract.
type VaultCode501 struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCode501 is a free log retrieval operation binding the contract event 0x6a036bee1b01306b61370b348f57c9a7038a7bf8cb5d8a4cfbfb197b3f329e83.
//
// Solidity: event Code501()
func (_Vault *VaultFilterer) FilterCode501(opts *bind.FilterOpts) (*VaultCode501Iterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "Code501")
	if err != nil {
		return nil, err
	}
	return &VaultCode501Iterator{contract: _Vault.contract, event: "Code501", logs: logs, sub: sub}, nil
}

// WatchCode501 is a free log subscription operation binding the contract event 0x6a036bee1b01306b61370b348f57c9a7038a7bf8cb5d8a4cfbfb197b3f329e83.
//
// Solidity: event Code501()
func (_Vault *VaultFilterer) WatchCode501(opts *bind.WatchOpts, sink chan<- *VaultCode501) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "Code501")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultCode501)
				if err := _Vault.contract.UnpackLog(event, "Code501", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCode501 is a log parse operation binding the contract event 0x6a036bee1b01306b61370b348f57c9a7038a7bf8cb5d8a4cfbfb197b3f329e83.
//
// Solidity: event Code501()
func (_Vault *VaultFilterer) ParseCode501(log types.Log) (*VaultCode501, error) {
	event := new(VaultCode501)
	if err := _Vault.contract.UnpackLog(event, "Code501", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultCode502Iterator is returned from FilterCode502 and is used to iterate over the raw logs and unpacked data for Code502 events raised by the Vault contract.
type VaultCode502Iterator struct {
	Event *VaultCode502 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultCode502Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultCode502)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultCode502)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultCode502Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultCode502Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultCode502 represents a Code502 event raised by the Vault contract.
type VaultCode502 struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCode502 is a free log retrieval operation binding the contract event 0xe1ef72f1796988294cc9a59a2e3073a1079dc556e353a1ebf43b456b191161a9.
//
// Solidity: event Code502()
func (_Vault *VaultFilterer) FilterCode502(opts *bind.FilterOpts) (*VaultCode502Iterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "Code502")
	if err != nil {
		return nil, err
	}
	return &VaultCode502Iterator{contract: _Vault.contract, event: "Code502", logs: logs, sub: sub}, nil
}

// WatchCode502 is a free log subscription operation binding the contract event 0xe1ef72f1796988294cc9a59a2e3073a1079dc556e353a1ebf43b456b191161a9.
//
// Solidity: event Code502()
func (_Vault *VaultFilterer) WatchCode502(opts *bind.WatchOpts, sink chan<- *VaultCode502) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "Code502")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultCode502)
				if err := _Vault.contract.UnpackLog(event, "Code502", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCode502 is a log parse operation binding the contract event 0xe1ef72f1796988294cc9a59a2e3073a1079dc556e353a1ebf43b456b191161a9.
//
// Solidity: event Code502()
func (_Vault *VaultFilterer) ParseCode502(log types.Log) (*VaultCode502, error) {
	event := new(VaultCode502)
	if err := _Vault.contract.UnpackLog(event, "Code502", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
