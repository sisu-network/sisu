// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package vault

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// VaultMetaData contains all meta data concerning the Vault contract.
var VaultMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Code501\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Code502\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"exception\",\"type\":\"bytes\"}],\"name\":\"remoteExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"addSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"}],\"name\":\"blockApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"}],\"name\":\"createApp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"depositNativeFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newAdminTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"appChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"callGasLimit\",\"type\":\"uint64\"}],\"name\":\"remoteCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callerChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"remoteExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"callerChains\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"callers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"apps\",\"type\":\"address[]\"},{\"internalType\":\"uint64[]\",\"name\":\"gasLimits\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"remoteExecuteMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"removeSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retryTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retryTransferNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAppAnyCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"whitelist\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAppWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setNotPausedChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferInMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferInNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstChain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dstChain\",\"type\":\"uint256\"}],\"name\":\"transferOutNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstChain\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOutNonEvm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"app\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateAppAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614d70806100616000396000f3fe6080604052600436106101cd5760003560e01c80638f283970116100f7578063c23f001f11610095578063e7e31e7a11610064578063e7e31e7a146105d6578063f408a7cd146105ff578063f4d17e4714610628578063fea9abc814610651576101cd565b8063c23f001f1461053d578063d9caed121461057a578063db6b5246146105a3578063e4652f49146105ad576101cd565b80639cd35f49116100d15780639cd35f4914610497578063a0452a54146104c0578063a9b61bcd146104eb578063b3db428b14610514576101cd565b80638f2839701461042957806391a775b7146104525780639bf507231461046e576101cd565b806347e7ef241161016f57806369b411701161013e57806369b4117014610383578063754ff725146103ae5780637eab231a146103d75780638ce5877c14610400576101cd565b806347e7ef24146102f15780634e67428d1461031a5780635044a27c14610331578063679f8e871461035a576101cd565b8063125dabb0116101ab578063125dabb01461024d5780632fd78f3c146102765780633683f9ab1461029f5780633a82f395146102c8576101cd565b806307b18bde146101d25780630bae283d146101fb5780630c84613614610224575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f491906131af565b61066d565b005b34801561020757600080fd5b50610222600480360381019061021d91906131af565b61069a565b005b34801561023057600080fd5b5061024b60048036038101906102469190613335565b61089e565b005b34801561025957600080fd5b50610274600480360381019061026f91906133b8565b6109c6565b005b34801561028257600080fd5b5061029d6004803603810190610298919061355a565b610ba3565b005b3480156102ab57600080fd5b506102c660048036038101906102c191906131af565b610d1d565b005b3480156102d457600080fd5b506102ef60048036038101906102ea91906136c3565b610e0e565b005b3480156102fd57600080fd5b50610318600480360381019061031391906131af565b610ecd565b005b34801561032657600080fd5b5061032f610edc565b005b34801561033d57600080fd5b5061035860048036038101906103539190613703565b6110e9565b005b34801561036657600080fd5b50610381600480360381019061037c9190613730565b6112c1565b005b34801561038f57600080fd5b50610398611408565b6040516103a5919061377f565b60405180910390f35b3480156103ba57600080fd5b506103d560048036038101906103d09190613920565b61140f565b005b3480156103e357600080fd5b506103fe60048036038101906103f991906139c7565b611530565b005b34801561040c57600080fd5b5061042760048036038101906104229190613703565b611788565b005b34801561043557600080fd5b50610450600480360381019061044b9190613703565b611872565b005b61046c60048036038101906104679190613703565b6119ca565b005b34801561047a57600080fd5b5061049560048036038101906104909190613ab0565b6119ec565b005b3480156104a357600080fd5b506104be60048036038101906104b99190613b38565b611c23565b005b3480156104cc57600080fd5b506104d5611df8565b6040516104e2919061377f565b60405180910390f35b3480156104f757600080fd5b50610512600480360381019061050d9190613bac565b611dfe565b005b34801561052057600080fd5b5061053b600480360381019061053691906139c7565b611f26565b005b34801561054957600080fd5b50610564600480360381019061055f91906133b8565b611f63565b604051610571919061377f565b60405180910390f35b34801561058657600080fd5b506105a1600480360381019061059c91906139c7565b611f88565b005b6105ab611f99565b005b3480156105b957600080fd5b506105d460048036038101906105cf91906139c7565b611fba565b005b3480156105e257600080fd5b506105fd60048036038101906105f89190613703565b612132565b005b34801561060b57600080fd5b5061062660048036038101906106219190613c13565b61221c565b005b34801561063457600080fd5b5061064f600480360381019061064a9190613c87565b6125bb565b005b61066b60048036038101906106669190613d36565b612951565b005b61068c73400000000000000000000000000000000000000033836129d5565b6106968282612b9b565b5050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071c90613def565b60405180910390fd5b60008190506005600073400000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610856576005600073400000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b80471061086c576108678382612b9b565b610899565b7fe1ef72f1796988294cc9a59a2e3073a1079dc556e353a1ebf43b456b191161a960405160405180910390a15b505050565b6001600084815260200190815260200160002060009054906101000a900460ff16156108ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f690613e5b565b60405180910390fd5b80600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106109925761098d8433836129d5565b6109c0565b6109bf3330838773ffffffffffffffffffffffffffffffffffffffff16612c9b909392919063ffffffff16565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2c90613ec7565b60405180910390fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0190613f33565b60405180910390fd5b8060000160009054906101000a900460ff16610b5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5290613f9f565b60405180910390fd5b818160000160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2590613def565b60405180910390fd5b60005b83839050811015610d0f57610cfc8c8c83818110610c5257610c51613fbf565b5b905060200201358b8b84818110610c6c57610c6b613fbf565b5b9050602002016020810190610c819190613703565b8a8a85818110610c9457610c93613fbf565b5b9050602002016020810190610ca99190613703565b898986818110610cbc57610cbb613fbf565b5b9050602002016020810190610cd19190613fee565b888887818110610ce457610ce3613fbf565b5b9050602002810190610cf6919061402a565b886125bb565b8080610d07906140bc565b915050610c31565b505050505050505050505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610da8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9f90613def565b60405180910390fd5b804710610dbe57610db98282612b9b565b610e0a565b610ddd7340000000000000000000000000000000000000008383612d24565b7f6a036bee1b01306b61370b348f57c9a7038a7bf8cb5d8a4cfbfb197b3f329e8360405160405180910390a15b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9590614150565b60405180910390fd5b806001600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b610ed8823383612e2b565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6390614150565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff4906141bc565b60405180910390fd5b600454421015611042576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103990614228565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611179576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117090614150565b60405180910390fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361124f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124690614294565b60405180910390fd5b8060000160009054906101000a900460ff166112a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129790613f9f565b60405180910390fd5b60008160000160006101000a81548160ff0219169083151502179055505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138d90613f33565b60405180910390fd5b8060000160009054906101000a900460ff166113e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113de90613f9f565b60405180910390fd5b818160000160016101000a81548160ff021916908315150217905550505050565b6201518081565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661149a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149190613def565b60405180910390fd5b60005b83518163ffffffff16101561152a57611517848263ffffffff16815181106114c8576114c7613fbf565b5b6020026020010151848363ffffffff16815181106114e9576114e8613fbf565b5b6020026020010151848463ffffffff168151811061150a57611509613fbf565b5b6020026020010151611fba565b8080611522906142c4565b91505061149d565b50505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166115bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b290613def565b60405180910390fd5b6000819050600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156116c457600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b808473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116fe91906142ff565b602060405180830381865afa15801561171b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173f919061432f565b106117555761175084848584612e68565b611782565b7fe1ef72f1796988294cc9a59a2e3073a1079dc556e353a1ebf43b456b191161a960405160405180910390a15b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180f90614150565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f990614150565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611971576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611968906143a8565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062015180426119c191906143c8565b60048190555050565b6119e97340000000000000000000000000000000000000008234612d24565b50565b6001600086815260200190815260200160002060009054906101000a900460ff1615611a4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4490613e5b565b60405180910390fd5b6000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1a90614294565b60405180910390fd5b8060000160009054906101000a900460ff16611b74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6b90613f9f565b60405180910390fd5b8060000160019054906101000a900460ff1680611bdc57508060010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c129061446e565b60405180910390fd5b505050505050565b6000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611cf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cef90613f33565b60405180910390fd5b8060000160009054906101000a900460ff16611d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4090613f9f565b60405180910390fd5b600081600101905060005b85859050811015611def5783826000888885818110611d7657611d75613fbf565b5b9050602002016020810190611d8b9190613703565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611de7906140bc565b915050611d54565b50505050505050565b60045481565b6001600084815260200190815260200160002060009054906101000a900460ff1615611e5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5690613e5b565b60405180910390fd5b80600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410611ef257611eed8433836129d5565b611f20565b611f1f3330838773ffffffffffffffffffffffffffffffffffffffff16612c9b909392919063ffffffff16565b5b50505050565b611f533330838673ffffffffffffffffffffffffffffffffffffffff16612c9b909392919063ffffffff16565b611f5e838383612d24565b505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b611f9483338484612e68565b505050565b611fb87340000000000000000000000000000000000000003334612d24565b565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612045576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203c90613def565b60405180910390fd5b808373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161207f91906142ff565b602060405180830381865afa15801561209c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c0919061432f565b106120f5576120f082828573ffffffffffffffffffffffffffffffffffffffff16612ea49092919063ffffffff16565b61212d565b612100838383612d24565b7f6a036bee1b01306b61370b348f57c9a7038a7bf8cb5d8a4cfbfb197b3f329e8360405160405180910390a15b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146121c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b990614150565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146122ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a390614150565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361231b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612312906144da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361238a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238190613ec7565b60405180910390fd5b6000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612460576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245790614546565b60405180910390fd5b60018160000160006101000a81548160ff021916908315150217905550838160000160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600083839050036124ed5760018160000160016101000a81548160ff0219169083151502179055506125b4565b60008160000160016101000a81548160ff021916908315150217905550600081600101905060005b848490508110156125b157600182600087878581811061253857612537613fbf565b5b905060200201602081019061254d9190613703565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806125a9906140bc565b915050612515565b50505b5050505050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612646576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263d90613def565b60405180910390fd5b60005a90506126558183612f2a565b6005600073400000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271e906145b2565b60405180910390fd5b600060608773ffffffffffffffffffffffffffffffffffffffff16630d97510c8867ffffffffffffffff1660405180606001604052808e81526020018d73ffffffffffffffffffffffffffffffffffffffff1681526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152506040518363ffffffff1660e01b81526004016127e391906146bf565b60206040518083038160008887f19350505050801561282057506040513d601f19601f8201168201806040525081019061281d919061471a565b60015b6128d45761282c614754565b806308c379a0036128545750612840614776565b8061284b5750612856565b809150506128cf565b505b3d8060008114612882576040519150601f19603f3d011682016040523d82523d6000602084013e612887565b606091505b5060008151036128ca576040518060400160405280600a81526020017f6f7574206f66206761730000000000000000000000000000000000000000000081525090505b809150505b6128d9565b809250505b7f784fc316e5b708d9d87522371568d63c072c60efc538e8998bf4c87a78e3f53c828260405161290a92919061485f565b60405180910390a16129457340000000000000000000000000000000000000008a6129405a8761293a919061488f565b88612f2a565b6129d5565b50505050505050505050565b6001600082815260200190815260200160002060009054906101000a900460ff16156129b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a990613e5b565b60405180910390fd5b6129d17340000000000000000000000000000000000000003334612d24565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612a44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3b9061490f565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612b03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612afa9061497b565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b8f919061488f565b92505081905550505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115612bd057612bcf61320a565b5b6040519080825280601f01601f191660200182016040528015612c025781602001600182028036833780820191505090505b50604051612c1091906149d7565b60006040518083038185875af1925050503d8060008114612c4d576040519150601f19603f3d011682016040523d82523d6000602084013e612c52565b606091505b5050905080612c96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c8d90614a60565b60405180910390fd5b505050565b612d1e846323b872dd60e01b858585604051602401612cbc93929190614a80565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612f4b565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612d93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d8a90614b03565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612e1f91906143c8565b92505081905550505050565b612e588230838673ffffffffffffffffffffffffffffffffffffffff16612c9b909392919063ffffffff16565b612e63838383612d24565b505050565b612e738484836129d5565b612e9e82828673ffffffffffffffffffffffffffffffffffffffff16612ea49092919063ffffffff16565b50505050565b612f258363a9059cbb60e01b8484604051602401612ec3929190614b23565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612f4b565b505050565b600081833a612f399190614b4c565b612f4391906143c8565b905092915050565b612f6a8273ffffffffffffffffffffffffffffffffffffffff166130bc565b612fa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa090614bda565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051612fd191906149d7565b6000604051808303816000865af19150503d806000811461300e576040519150601f19603f3d011682016040523d82523d6000602084013e613013565b606091505b509150915081613058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304f90614c46565b60405180910390fd5b6000815111156130b657808060200190518101906130769190614c7b565b6130b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130ac90614d1a565b60405180910390fd5b5b50505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91506000801b82141580156130fe5750808214155b92505050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131468261311b565b9050919050565b6131568161313b565b811461316157600080fd5b50565b6000813590506131738161314d565b92915050565b6000819050919050565b61318c81613179565b811461319757600080fd5b50565b6000813590506131a981613183565b92915050565b600080604083850312156131c6576131c5613111565b5b60006131d485828601613164565b92505060206131e58582860161319a565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613242826131f9565b810181811067ffffffffffffffff821117156132615761326061320a565b5b80604052505050565b6000613274613107565b90506132808282613239565b919050565b600067ffffffffffffffff8211156132a05761329f61320a565b5b6132a9826131f9565b9050602081019050919050565b82818337600083830152505050565b60006132d86132d384613285565b61326a565b9050828152602081018484840111156132f4576132f36131f4565b5b6132ff8482856132b6565b509392505050565b600082601f83011261331c5761331b6131ef565b5b813561332c8482602086016132c5565b91505092915050565b6000806000806080858703121561334f5761334e613111565b5b600061335d87828801613164565b945050602061336e8782880161319a565b935050604085013567ffffffffffffffff81111561338f5761338e613116565b5b61339b87828801613307565b92505060606133ac8782880161319a565b91505092959194509250565b600080604083850312156133cf576133ce613111565b5b60006133dd85828601613164565b92505060206133ee85828601613164565b9150509250929050565b600080fd5b600080fd5b60008083601f840112613418576134176131ef565b5b8235905067ffffffffffffffff811115613435576134346133f8565b5b602083019150836020820283011115613451576134506133fd565b5b9250929050565b60008083601f84011261346e5761346d6131ef565b5b8235905067ffffffffffffffff81111561348b5761348a6133f8565b5b6020830191508360208202830111156134a7576134a66133fd565b5b9250929050565b60008083601f8401126134c4576134c36131ef565b5b8235905067ffffffffffffffff8111156134e1576134e06133f8565b5b6020830191508360208202830111156134fd576134fc6133fd565b5b9250929050565b60008083601f84011261351a576135196131ef565b5b8235905067ffffffffffffffff811115613537576135366133f8565b5b602083019150836020820283011115613553576135526133fd565b5b9250929050565b600080600080600080600080600080600060c08c8e03121561357f5761357e613111565b5b60008c013567ffffffffffffffff81111561359d5761359c613116565b5b6135a98e828f01613402565b9b509b505060208c013567ffffffffffffffff8111156135cc576135cb613116565b5b6135d88e828f01613458565b995099505060408c013567ffffffffffffffff8111156135fb576135fa613116565b5b6136078e828f01613458565b975097505060608c013567ffffffffffffffff81111561362a57613629613116565b5b6136368e828f016134ae565b955095505060808c013567ffffffffffffffff81111561365957613658613116565b5b6136658e828f01613504565b935093505060a06136788e828f0161319a565b9150509295989b509295989b9093969950565b60008115159050919050565b6136a08161368b565b81146136ab57600080fd5b50565b6000813590506136bd81613697565b92915050565b600080604083850312156136da576136d9613111565b5b60006136e88582860161319a565b92505060206136f9858286016136ae565b9150509250929050565b60006020828403121561371957613718613111565b5b600061372784828501613164565b91505092915050565b6000806040838503121561374757613746613111565b5b600061375585828601613164565b9250506020613766858286016136ae565b9150509250929050565b61377981613179565b82525050565b60006020820190506137946000830184613770565b92915050565b600067ffffffffffffffff8211156137b5576137b461320a565b5b602082029050602081019050919050565b60006137d96137d48461379a565b61326a565b905080838252602082019050602084028301858111156137fc576137fb6133fd565b5b835b8181101561382557806138118882613164565b8452602084019350506020810190506137fe565b5050509392505050565b600082601f830112613844576138436131ef565b5b81356138548482602086016137c6565b91505092915050565b600067ffffffffffffffff8211156138785761387761320a565b5b602082029050602081019050919050565b600061389c6138978461385d565b61326a565b905080838252602082019050602084028301858111156138bf576138be6133fd565b5b835b818110156138e857806138d4888261319a565b8452602084019350506020810190506138c1565b5050509392505050565b600082601f830112613907576139066131ef565b5b8135613917848260208601613889565b91505092915050565b60008060006060848603121561393957613938613111565b5b600084013567ffffffffffffffff81111561395757613956613116565b5b6139638682870161382f565b935050602084013567ffffffffffffffff81111561398457613983613116565b5b6139908682870161382f565b925050604084013567ffffffffffffffff8111156139b1576139b0613116565b5b6139bd868287016138f2565b9150509250925092565b6000806000606084860312156139e0576139df613111565b5b60006139ee86828701613164565b93505060206139ff86828701613164565b9250506040613a108682870161319a565b9150509250925092565b60008083601f840112613a3057613a2f6131ef565b5b8235905067ffffffffffffffff811115613a4d57613a4c6133f8565b5b602083019150836001820283011115613a6957613a686133fd565b5b9250929050565b600067ffffffffffffffff82169050919050565b613a8d81613a70565b8114613a9857600080fd5b50565b600081359050613aaa81613a84565b92915050565b600080600080600060808688031215613acc57613acb613111565b5b6000613ada8882890161319a565b9550506020613aeb88828901613164565b945050604086013567ffffffffffffffff811115613b0c57613b0b613116565b5b613b1888828901613a1a565b93509350506060613b2b88828901613a9b565b9150509295509295909350565b60008060008060608587031215613b5257613b51613111565b5b6000613b6087828801613164565b945050602085013567ffffffffffffffff811115613b8157613b80613116565b5b613b8d87828801613458565b93509350506040613ba0878288016136ae565b91505092959194509250565b60008060008060808587031215613bc657613bc5613111565b5b6000613bd487828801613164565b9450506020613be58782880161319a565b9350506040613bf687828801613164565b9250506060613c078782880161319a565b91505092959194509250565b60008060008060608587031215613c2d57613c2c613111565b5b6000613c3b87828801613164565b9450506020613c4c87828801613164565b935050604085013567ffffffffffffffff811115613c6d57613c6c613116565b5b613c7987828801613458565b925092505092959194509250565b600080600080600080600060c0888a031215613ca657613ca5613111565b5b6000613cb48a828b0161319a565b9750506020613cc58a828b01613164565b9650506040613cd68a828b01613164565b9550506060613ce78a828b01613a9b565b945050608088013567ffffffffffffffff811115613d0857613d07613116565b5b613d148a828b01613a1a565b935093505060a0613d278a828b0161319a565b91505092959891949750929550565b60008060408385031215613d4d57613d4c613111565b5b600083013567ffffffffffffffff811115613d6b57613d6a613116565b5b613d7785828601613307565b9250506020613d888582860161319a565b9150509250929050565b600082825260208201905092915050565b7f4e6f74207370656e6465723a20464f5242494444454e00000000000000000000600082015250565b6000613dd9601683613d92565b9150613de482613da3565b602082019050919050565b60006020820190508181036000830152613e0881613dcc565b9050919050565b7f434841494e5f49535f5041555345440000000000000000000000000000000000600082015250565b6000613e45600f83613d92565b9150613e5082613e0f565b602082019050919050565b60006020820190508181036000830152613e7481613e38565b9050919050565b7f61646d696e206164647265737320697320300000000000000000000000000000600082015250565b6000613eb1601283613d92565b9150613ebc82613e7b565b602082019050919050565b60006020820190508181036000830152613ee081613ea4565b9050919050565b7f4e6f74206170702061646d696e3a20464f5242494444454e0000000000000000600082015250565b6000613f1d601883613d92565b9150613f2882613ee7565b602082019050919050565b60006020820190508181036000830152613f4c81613f10565b9050919050565b7f4e6f7420616c6c6f776564206170703a20464f5242494444454e000000000000600082015250565b6000613f89601a83613d92565b9150613f9482613f53565b602082019050919050565b60006020820190508181036000830152613fb881613f7c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561400457614003613111565b5b600061401284828501613a9b565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126140475761404661401b565b5b80840192508235915067ffffffffffffffff82111561406957614068614020565b5b60208301925060018202360383131561408557614084614025565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006140c782613179565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036140f9576140f861408d565b5b600182019050919050565b7f4e6f742061646d696e3a20464f5242494444454e000000000000000000000000600082015250565b600061413a601483613d92565b915061414582614104565b602082019050919050565b600060208201905081810360008301526141698161412d565b9050919050565b7f6170706c7941646d696e3a206164647265737328302900000000000000000000600082015250565b60006141a6601683613d92565b91506141b182614170565b602082019050919050565b600060208201905081810360008301526141d581614199565b9050919050565b7f6170706c7941646d696e3a2041444d494e5f4e4f545f52454144592000000000600082015250565b6000614212601c83613d92565b915061421d826141dc565b602082019050919050565b6000602082019050818103600083015261424181614205565b9050919050565b7f4e6f742065786973746564206170703a20464f5242494444454e000000000000600082015250565b600061427e601a83613d92565b915061428982614248565b602082019050919050565b600060208201905081810360008301526142ad81614271565b9050919050565b600063ffffffff82169050919050565b60006142cf826142b4565b915063ffffffff82036142e5576142e461408d565b5b600182019050919050565b6142f98161313b565b82525050565b600060208201905061431460008301846142f0565b92915050565b60008151905061432981613183565b92915050565b60006020828403121561434557614344613111565b5b60006143538482850161431a565b91505092915050565b7f6368616e676541646d696e3a2061646472657373283029000000000000000000600082015250565b6000614392601783613d92565b915061439d8261435c565b602082019050919050565b600060208201905081810360008301526143c181614385565b9050919050565b60006143d382613179565b91506143de83613179565b92508282019050808211156143f6576143f561408d565b5b92915050565b7f4e6f742077686974656c69737465642063616c6c65723a20464f52424944444560008201527f4e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000614458602183613d92565b9150614463826143fc565b604082019050919050565b600060208201905081810360008301526144878161444b565b9050919050565b7f6170702061646472657373206973203000000000000000000000000000000000600082015250565b60006144c4601083613d92565b91506144cf8261448e565b602082019050919050565b600060208201905081810360008301526144f3816144b7565b9050919050565b7f6578697374656420617070000000000000000000000000000000000000000000600082015250565b6000614530600b83613d92565b915061453b826144fa565b602082019050919050565b6000602082019050818103600083015261455f81614523565b9050919050565b7f63616c6c6572206973206e6f7420656e6f7567682062616c616e636500000000600082015250565b600061459c601c83613d92565b91506145a782614566565b602082019050919050565b600060208201905081810360008301526145cb8161458f565b9050919050565b6145db81613179565b82525050565b6145ea8161313b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561462a57808201518184015260208101905061460f565b60008484015250505050565b6000614641826145f0565b61464b81856145fb565b935061465b81856020860161460c565b614664816131f9565b840191505092915050565b600060608301600083015161468760008601826145d2565b50602083015161469a60208601826145e1565b50604083015184820360408601526146b28282614636565b9150508091505092915050565b600060208201905081810360008301526146d9818461466f565b905092915050565b600060ff82169050919050565b6146f7816146e1565b811461470257600080fd5b50565b600081519050614714816146ee565b92915050565b6000602082840312156147305761472f613111565b5b600061473e84828501614705565b91505092915050565b60008160e01c9050919050565b600060033d11156147735760046000803e614770600051614747565b90505b90565b600060443d1061480357614788613107565b60043d036004823e80513d602482011167ffffffffffffffff821117156147b0575050614803565b808201805167ffffffffffffffff8111156147ce5750505050614803565b80602083010160043d0385018111156147eb575050505050614803565b6147fa82602001850186613239565b82955050505050505b90565b61480f816146e1565b82525050565b600082825260208201905092915050565b6000614831826145f0565b61483b8185614815565b935061484b81856020860161460c565b614854816131f9565b840191505092915050565b60006040820190506148746000830185614806565b81810360208301526148868184614826565b90509392505050565b600061489a82613179565b91506148a583613179565b92508282039050818111156148bd576148bc61408d565b5b92915050565b7f6465633a20616464726573732069732030000000000000000000000000000000600082015250565b60006148f9601183613d92565b9150614904826148c3565b602082019050919050565b60006020820190508181036000830152614928816148ec565b9050919050565b7f6465633a20616d6f756e7420657863656564732062616c616e63650000000000600082015250565b6000614965601b83613d92565b91506149708261492f565b602082019050919050565b6000602082019050818103600083015261499481614958565b9050919050565b600081905092915050565b60006149b1826145f0565b6149bb818561499b565b93506149cb81856020860161460c565b80840191505092915050565b60006149e382846149a6565b915081905092915050565b7f5472616e7366657248656c7065723a204e41544956455f5452414e534645525f60008201527f4641494c45440000000000000000000000000000000000000000000000000000602082015250565b6000614a4a602683613d92565b9150614a55826149ee565b604082019050919050565b60006020820190508181036000830152614a7981614a3d565b9050919050565b6000606082019050614a9560008301866142f0565b614aa260208301856142f0565b614aaf6040830184613770565b949350505050565b7f696e633a20616464726573732069732030000000000000000000000000000000600082015250565b6000614aed601183613d92565b9150614af882614ab7565b602082019050919050565b60006020820190508181036000830152614b1c81614ae0565b9050919050565b6000604082019050614b3860008301856142f0565b614b456020830184613770565b9392505050565b6000614b5782613179565b9150614b6283613179565b9250828202614b7081613179565b91508282048414831517614b8757614b8661408d565b5b5092915050565b7f5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400600082015250565b6000614bc4601f83613d92565b9150614bcf82614b8e565b602082019050919050565b60006020820190508181036000830152614bf381614bb7565b9050919050565b7f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564600082015250565b6000614c30602083613d92565b9150614c3b82614bfa565b602082019050919050565b60006020820190508181036000830152614c5f81614c23565b9050919050565b600081519050614c7581613697565b92915050565b600060208284031215614c9157614c90613111565b5b6000614c9f84828501614c66565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000614d04602a83613d92565b9150614d0f82614ca8565b604082019050919050565b60006020820190508181036000830152614d3381614cf7565b905091905056fea26469706673582212208fc58dad5e16afc721d90820efa7b5259aa06e1fd06bfc9e1ce442b08ff5882d64736f6c63430008130033",
}

// VaultABI is the input ABI used to generate the binding from.
// Deprecated: Use VaultMetaData.ABI instead.
var VaultABI = VaultMetaData.ABI

// VaultBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VaultMetaData.Bin instead.
var VaultBin = VaultMetaData.Bin

// DeployVault deploys a new Ethereum contract, binding an instance of Vault to it.
func DeployVault(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Vault, error) {
	parsed, err := VaultMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VaultBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Vault{VaultCaller: VaultCaller{contract: contract}, VaultTransactor: VaultTransactor{contract: contract}, VaultFilterer: VaultFilterer{contract: contract}}, nil
}

// Vault is an auto generated Go binding around an Ethereum contract.
type Vault struct {
	VaultCaller     // Read-only binding to the contract
	VaultTransactor // Write-only binding to the contract
	VaultFilterer   // Log filterer for contract events
}

// VaultCaller is an auto generated read-only Go binding around an Ethereum contract.
type VaultCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VaultTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VaultFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VaultSession struct {
	Contract     *Vault            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VaultCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VaultCallerSession struct {
	Contract *VaultCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// VaultTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VaultTransactorSession struct {
	Contract     *VaultTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VaultRaw is an auto generated low-level Go binding around an Ethereum contract.
type VaultRaw struct {
	Contract *Vault // Generic contract binding to access the raw methods on
}

// VaultCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VaultCallerRaw struct {
	Contract *VaultCaller // Generic read-only contract binding to access the raw methods on
}

// VaultTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VaultTransactorRaw struct {
	Contract *VaultTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVault creates a new instance of Vault, bound to a specific deployed contract.
func NewVault(address common.Address, backend bind.ContractBackend) (*Vault, error) {
	contract, err := bindVault(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Vault{VaultCaller: VaultCaller{contract: contract}, VaultTransactor: VaultTransactor{contract: contract}, VaultFilterer: VaultFilterer{contract: contract}}, nil
}

// NewVaultCaller creates a new read-only instance of Vault, bound to a specific deployed contract.
func NewVaultCaller(address common.Address, caller bind.ContractCaller) (*VaultCaller, error) {
	contract, err := bindVault(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VaultCaller{contract: contract}, nil
}

// NewVaultTransactor creates a new write-only instance of Vault, bound to a specific deployed contract.
func NewVaultTransactor(address common.Address, transactor bind.ContractTransactor) (*VaultTransactor, error) {
	contract, err := bindVault(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VaultTransactor{contract: contract}, nil
}

// NewVaultFilterer creates a new log filterer instance of Vault, bound to a specific deployed contract.
func NewVaultFilterer(address common.Address, filterer bind.ContractFilterer) (*VaultFilterer, error) {
	contract, err := bindVault(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VaultFilterer{contract: contract}, nil
}

// bindVault binds a generic wrapper to an already deployed contract.
func bindVault(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VaultMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vault *VaultRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Vault.Contract.VaultCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vault *VaultRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.Contract.VaultTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vault *VaultRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vault.Contract.VaultTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Vault *VaultCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Vault.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Vault *VaultTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Vault *VaultTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Vault.Contract.contract.Transact(opts, method, params...)
}

// DELAY is a free data retrieval call binding the contract method 0x69b41170.
//
// Solidity: function DELAY() view returns(uint256)
func (_Vault *VaultCaller) DELAY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "DELAY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DELAY is a free data retrieval call binding the contract method 0x69b41170.
//
// Solidity: function DELAY() view returns(uint256)
func (_Vault *VaultSession) DELAY() (*big.Int, error) {
	return _Vault.Contract.DELAY(&_Vault.CallOpts)
}

// DELAY is a free data retrieval call binding the contract method 0x69b41170.
//
// Solidity: function DELAY() view returns(uint256)
func (_Vault *VaultCallerSession) DELAY() (*big.Int, error) {
	return _Vault.Contract.DELAY(&_Vault.CallOpts)
}

// Balances is a free data retrieval call binding the contract method 0xc23f001f.
//
// Solidity: function balances(address , address ) view returns(uint256)
func (_Vault *VaultCaller) Balances(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "balances", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Balances is a free data retrieval call binding the contract method 0xc23f001f.
//
// Solidity: function balances(address , address ) view returns(uint256)
func (_Vault *VaultSession) Balances(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Vault.Contract.Balances(&_Vault.CallOpts, arg0, arg1)
}

// Balances is a free data retrieval call binding the contract method 0xc23f001f.
//
// Solidity: function balances(address , address ) view returns(uint256)
func (_Vault *VaultCallerSession) Balances(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Vault.Contract.Balances(&_Vault.CallOpts, arg0, arg1)
}

// NewAdminTime is a free data retrieval call binding the contract method 0xa0452a54.
//
// Solidity: function newAdminTime() view returns(uint256)
func (_Vault *VaultCaller) NewAdminTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Vault.contract.Call(opts, &out, "newAdminTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NewAdminTime is a free data retrieval call binding the contract method 0xa0452a54.
//
// Solidity: function newAdminTime() view returns(uint256)
func (_Vault *VaultSession) NewAdminTime() (*big.Int, error) {
	return _Vault.Contract.NewAdminTime(&_Vault.CallOpts)
}

// NewAdminTime is a free data retrieval call binding the contract method 0xa0452a54.
//
// Solidity: function newAdminTime() view returns(uint256)
func (_Vault *VaultCallerSession) NewAdminTime() (*big.Int, error) {
	return _Vault.Contract.NewAdminTime(&_Vault.CallOpts)
}

// AddSpender is a paid mutator transaction binding the contract method 0xe7e31e7a.
//
// Solidity: function addSpender(address spender) returns()
func (_Vault *VaultTransactor) AddSpender(opts *bind.TransactOpts, spender common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "addSpender", spender)
}

// AddSpender is a paid mutator transaction binding the contract method 0xe7e31e7a.
//
// Solidity: function addSpender(address spender) returns()
func (_Vault *VaultSession) AddSpender(spender common.Address) (*types.Transaction, error) {
	return _Vault.Contract.AddSpender(&_Vault.TransactOpts, spender)
}

// AddSpender is a paid mutator transaction binding the contract method 0xe7e31e7a.
//
// Solidity: function addSpender(address spender) returns()
func (_Vault *VaultTransactorSession) AddSpender(spender common.Address) (*types.Transaction, error) {
	return _Vault.Contract.AddSpender(&_Vault.TransactOpts, spender)
}

// ApplyAdmin is a paid mutator transaction binding the contract method 0x4e67428d.
//
// Solidity: function applyAdmin() returns()
func (_Vault *VaultTransactor) ApplyAdmin(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "applyAdmin")
}

// ApplyAdmin is a paid mutator transaction binding the contract method 0x4e67428d.
//
// Solidity: function applyAdmin() returns()
func (_Vault *VaultSession) ApplyAdmin() (*types.Transaction, error) {
	return _Vault.Contract.ApplyAdmin(&_Vault.TransactOpts)
}

// ApplyAdmin is a paid mutator transaction binding the contract method 0x4e67428d.
//
// Solidity: function applyAdmin() returns()
func (_Vault *VaultTransactorSession) ApplyAdmin() (*types.Transaction, error) {
	return _Vault.Contract.ApplyAdmin(&_Vault.TransactOpts)
}

// BlockApp is a paid mutator transaction binding the contract method 0x5044a27c.
//
// Solidity: function blockApp(address app) returns()
func (_Vault *VaultTransactor) BlockApp(opts *bind.TransactOpts, app common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "blockApp", app)
}

// BlockApp is a paid mutator transaction binding the contract method 0x5044a27c.
//
// Solidity: function blockApp(address app) returns()
func (_Vault *VaultSession) BlockApp(app common.Address) (*types.Transaction, error) {
	return _Vault.Contract.BlockApp(&_Vault.TransactOpts, app)
}

// BlockApp is a paid mutator transaction binding the contract method 0x5044a27c.
//
// Solidity: function blockApp(address app) returns()
func (_Vault *VaultTransactorSession) BlockApp(app common.Address) (*types.Transaction, error) {
	return _Vault.Contract.BlockApp(&_Vault.TransactOpts, app)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_Vault *VaultTransactor) ChangeAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "changeAdmin", newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_Vault *VaultSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.Contract.ChangeAdmin(&_Vault.TransactOpts, newAdmin)
}

// ChangeAdmin is a paid mutator transaction binding the contract method 0x8f283970.
//
// Solidity: function changeAdmin(address newAdmin) returns()
func (_Vault *VaultTransactorSession) ChangeAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.Contract.ChangeAdmin(&_Vault.TransactOpts, newAdmin)
}

// CreateApp is a paid mutator transaction binding the contract method 0xf408a7cd.
//
// Solidity: function createApp(address app, address _admin, address[] whitelist) returns()
func (_Vault *VaultTransactor) CreateApp(opts *bind.TransactOpts, app common.Address, _admin common.Address, whitelist []common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "createApp", app, _admin, whitelist)
}

// CreateApp is a paid mutator transaction binding the contract method 0xf408a7cd.
//
// Solidity: function createApp(address app, address _admin, address[] whitelist) returns()
func (_Vault *VaultSession) CreateApp(app common.Address, _admin common.Address, whitelist []common.Address) (*types.Transaction, error) {
	return _Vault.Contract.CreateApp(&_Vault.TransactOpts, app, _admin, whitelist)
}

// CreateApp is a paid mutator transaction binding the contract method 0xf408a7cd.
//
// Solidity: function createApp(address app, address _admin, address[] whitelist) returns()
func (_Vault *VaultTransactorSession) CreateApp(app common.Address, _admin common.Address, whitelist []common.Address) (*types.Transaction, error) {
	return _Vault.Contract.CreateApp(&_Vault.TransactOpts, app, _admin, whitelist)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address token, uint256 amount) returns()
func (_Vault *VaultTransactor) Deposit(opts *bind.TransactOpts, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "deposit", token, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address token, uint256 amount) returns()
func (_Vault *VaultSession) Deposit(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.Deposit(&_Vault.TransactOpts, token, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address token, uint256 amount) returns()
func (_Vault *VaultTransactorSession) Deposit(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.Deposit(&_Vault.TransactOpts, token, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0xb3db428b.
//
// Solidity: function depositFor(address token, address receiver, uint256 amount) returns()
func (_Vault *VaultTransactor) DepositFor(opts *bind.TransactOpts, token common.Address, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "depositFor", token, receiver, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0xb3db428b.
//
// Solidity: function depositFor(address token, address receiver, uint256 amount) returns()
func (_Vault *VaultSession) DepositFor(token common.Address, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.DepositFor(&_Vault.TransactOpts, token, receiver, amount)
}

// DepositFor is a paid mutator transaction binding the contract method 0xb3db428b.
//
// Solidity: function depositFor(address token, address receiver, uint256 amount) returns()
func (_Vault *VaultTransactorSession) DepositFor(token common.Address, receiver common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.DepositFor(&_Vault.TransactOpts, token, receiver, amount)
}

// DepositNative is a paid mutator transaction binding the contract method 0xdb6b5246.
//
// Solidity: function depositNative() payable returns()
func (_Vault *VaultTransactor) DepositNative(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "depositNative")
}

// DepositNative is a paid mutator transaction binding the contract method 0xdb6b5246.
//
// Solidity: function depositNative() payable returns()
func (_Vault *VaultSession) DepositNative() (*types.Transaction, error) {
	return _Vault.Contract.DepositNative(&_Vault.TransactOpts)
}

// DepositNative is a paid mutator transaction binding the contract method 0xdb6b5246.
//
// Solidity: function depositNative() payable returns()
func (_Vault *VaultTransactorSession) DepositNative() (*types.Transaction, error) {
	return _Vault.Contract.DepositNative(&_Vault.TransactOpts)
}

// DepositNativeFor is a paid mutator transaction binding the contract method 0x91a775b7.
//
// Solidity: function depositNativeFor(address receiver) payable returns()
func (_Vault *VaultTransactor) DepositNativeFor(opts *bind.TransactOpts, receiver common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "depositNativeFor", receiver)
}

// DepositNativeFor is a paid mutator transaction binding the contract method 0x91a775b7.
//
// Solidity: function depositNativeFor(address receiver) payable returns()
func (_Vault *VaultSession) DepositNativeFor(receiver common.Address) (*types.Transaction, error) {
	return _Vault.Contract.DepositNativeFor(&_Vault.TransactOpts, receiver)
}

// DepositNativeFor is a paid mutator transaction binding the contract method 0x91a775b7.
//
// Solidity: function depositNativeFor(address receiver) payable returns()
func (_Vault *VaultTransactorSession) DepositNativeFor(receiver common.Address) (*types.Transaction, error) {
	return _Vault.Contract.DepositNativeFor(&_Vault.TransactOpts, receiver)
}

// RemoteCall is a paid mutator transaction binding the contract method 0x9bf50723.
//
// Solidity: function remoteCall(uint256 appChain, address app, bytes message, uint64 callGasLimit) returns()
func (_Vault *VaultTransactor) RemoteCall(opts *bind.TransactOpts, appChain *big.Int, app common.Address, message []byte, callGasLimit uint64) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "remoteCall", appChain, app, message, callGasLimit)
}

// RemoteCall is a paid mutator transaction binding the contract method 0x9bf50723.
//
// Solidity: function remoteCall(uint256 appChain, address app, bytes message, uint64 callGasLimit) returns()
func (_Vault *VaultSession) RemoteCall(appChain *big.Int, app common.Address, message []byte, callGasLimit uint64) (*types.Transaction, error) {
	return _Vault.Contract.RemoteCall(&_Vault.TransactOpts, appChain, app, message, callGasLimit)
}

// RemoteCall is a paid mutator transaction binding the contract method 0x9bf50723.
//
// Solidity: function remoteCall(uint256 appChain, address app, bytes message, uint64 callGasLimit) returns()
func (_Vault *VaultTransactorSession) RemoteCall(appChain *big.Int, app common.Address, message []byte, callGasLimit uint64) (*types.Transaction, error) {
	return _Vault.Contract.RemoteCall(&_Vault.TransactOpts, appChain, app, message, callGasLimit)
}

// RemoteExecute is a paid mutator transaction binding the contract method 0xf4d17e47.
//
// Solidity: function remoteExecute(uint256 callerChain, address caller, address app, uint64 gasLimit, bytes message, uint256 commission) returns()
func (_Vault *VaultTransactor) RemoteExecute(opts *bind.TransactOpts, callerChain *big.Int, caller common.Address, app common.Address, gasLimit uint64, message []byte, commission *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "remoteExecute", callerChain, caller, app, gasLimit, message, commission)
}

// RemoteExecute is a paid mutator transaction binding the contract method 0xf4d17e47.
//
// Solidity: function remoteExecute(uint256 callerChain, address caller, address app, uint64 gasLimit, bytes message, uint256 commission) returns()
func (_Vault *VaultSession) RemoteExecute(callerChain *big.Int, caller common.Address, app common.Address, gasLimit uint64, message []byte, commission *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RemoteExecute(&_Vault.TransactOpts, callerChain, caller, app, gasLimit, message, commission)
}

// RemoteExecute is a paid mutator transaction binding the contract method 0xf4d17e47.
//
// Solidity: function remoteExecute(uint256 callerChain, address caller, address app, uint64 gasLimit, bytes message, uint256 commission) returns()
func (_Vault *VaultTransactorSession) RemoteExecute(callerChain *big.Int, caller common.Address, app common.Address, gasLimit uint64, message []byte, commission *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RemoteExecute(&_Vault.TransactOpts, callerChain, caller, app, gasLimit, message, commission)
}

// RemoteExecuteMultiple is a paid mutator transaction binding the contract method 0x2fd78f3c.
//
// Solidity: function remoteExecuteMultiple(uint256[] callerChains, address[] callers, address[] apps, uint64[] gasLimits, bytes[] messages, uint256 commission) returns()
func (_Vault *VaultTransactor) RemoteExecuteMultiple(opts *bind.TransactOpts, callerChains []*big.Int, callers []common.Address, apps []common.Address, gasLimits []uint64, messages [][]byte, commission *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "remoteExecuteMultiple", callerChains, callers, apps, gasLimits, messages, commission)
}

// RemoteExecuteMultiple is a paid mutator transaction binding the contract method 0x2fd78f3c.
//
// Solidity: function remoteExecuteMultiple(uint256[] callerChains, address[] callers, address[] apps, uint64[] gasLimits, bytes[] messages, uint256 commission) returns()
func (_Vault *VaultSession) RemoteExecuteMultiple(callerChains []*big.Int, callers []common.Address, apps []common.Address, gasLimits []uint64, messages [][]byte, commission *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RemoteExecuteMultiple(&_Vault.TransactOpts, callerChains, callers, apps, gasLimits, messages, commission)
}

// RemoteExecuteMultiple is a paid mutator transaction binding the contract method 0x2fd78f3c.
//
// Solidity: function remoteExecuteMultiple(uint256[] callerChains, address[] callers, address[] apps, uint64[] gasLimits, bytes[] messages, uint256 commission) returns()
func (_Vault *VaultTransactorSession) RemoteExecuteMultiple(callerChains []*big.Int, callers []common.Address, apps []common.Address, gasLimits []uint64, messages [][]byte, commission *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RemoteExecuteMultiple(&_Vault.TransactOpts, callerChains, callers, apps, gasLimits, messages, commission)
}

// RemoveSpender is a paid mutator transaction binding the contract method 0x8ce5877c.
//
// Solidity: function removeSpender(address spender) returns()
func (_Vault *VaultTransactor) RemoveSpender(opts *bind.TransactOpts, spender common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "removeSpender", spender)
}

// RemoveSpender is a paid mutator transaction binding the contract method 0x8ce5877c.
//
// Solidity: function removeSpender(address spender) returns()
func (_Vault *VaultSession) RemoveSpender(spender common.Address) (*types.Transaction, error) {
	return _Vault.Contract.RemoveSpender(&_Vault.TransactOpts, spender)
}

// RemoveSpender is a paid mutator transaction binding the contract method 0x8ce5877c.
//
// Solidity: function removeSpender(address spender) returns()
func (_Vault *VaultTransactorSession) RemoveSpender(spender common.Address) (*types.Transaction, error) {
	return _Vault.Contract.RemoveSpender(&_Vault.TransactOpts, spender)
}

// RetryTransfer is a paid mutator transaction binding the contract method 0x7eab231a.
//
// Solidity: function retryTransfer(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactor) RetryTransfer(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "retryTransfer", token, to, amount)
}

// RetryTransfer is a paid mutator transaction binding the contract method 0x7eab231a.
//
// Solidity: function retryTransfer(address token, address to, uint256 amount) returns()
func (_Vault *VaultSession) RetryTransfer(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RetryTransfer(&_Vault.TransactOpts, token, to, amount)
}

// RetryTransfer is a paid mutator transaction binding the contract method 0x7eab231a.
//
// Solidity: function retryTransfer(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) RetryTransfer(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RetryTransfer(&_Vault.TransactOpts, token, to, amount)
}

// RetryTransferNative is a paid mutator transaction binding the contract method 0x0bae283d.
//
// Solidity: function retryTransferNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactor) RetryTransferNative(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "retryTransferNative", to, amount)
}

// RetryTransferNative is a paid mutator transaction binding the contract method 0x0bae283d.
//
// Solidity: function retryTransferNative(address to, uint256 amount) returns()
func (_Vault *VaultSession) RetryTransferNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RetryTransferNative(&_Vault.TransactOpts, to, amount)
}

// RetryTransferNative is a paid mutator transaction binding the contract method 0x0bae283d.
//
// Solidity: function retryTransferNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) RetryTransferNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.RetryTransferNative(&_Vault.TransactOpts, to, amount)
}

// SetAppAnyCaller is a paid mutator transaction binding the contract method 0x679f8e87.
//
// Solidity: function setAppAnyCaller(address app, bool value) returns()
func (_Vault *VaultTransactor) SetAppAnyCaller(opts *bind.TransactOpts, app common.Address, value bool) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "setAppAnyCaller", app, value)
}

// SetAppAnyCaller is a paid mutator transaction binding the contract method 0x679f8e87.
//
// Solidity: function setAppAnyCaller(address app, bool value) returns()
func (_Vault *VaultSession) SetAppAnyCaller(app common.Address, value bool) (*types.Transaction, error) {
	return _Vault.Contract.SetAppAnyCaller(&_Vault.TransactOpts, app, value)
}

// SetAppAnyCaller is a paid mutator transaction binding the contract method 0x679f8e87.
//
// Solidity: function setAppAnyCaller(address app, bool value) returns()
func (_Vault *VaultTransactorSession) SetAppAnyCaller(app common.Address, value bool) (*types.Transaction, error) {
	return _Vault.Contract.SetAppAnyCaller(&_Vault.TransactOpts, app, value)
}

// SetAppWhitelist is a paid mutator transaction binding the contract method 0x9cd35f49.
//
// Solidity: function setAppWhitelist(address app, address[] whitelist, bool value) returns()
func (_Vault *VaultTransactor) SetAppWhitelist(opts *bind.TransactOpts, app common.Address, whitelist []common.Address, value bool) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "setAppWhitelist", app, whitelist, value)
}

// SetAppWhitelist is a paid mutator transaction binding the contract method 0x9cd35f49.
//
// Solidity: function setAppWhitelist(address app, address[] whitelist, bool value) returns()
func (_Vault *VaultSession) SetAppWhitelist(app common.Address, whitelist []common.Address, value bool) (*types.Transaction, error) {
	return _Vault.Contract.SetAppWhitelist(&_Vault.TransactOpts, app, whitelist, value)
}

// SetAppWhitelist is a paid mutator transaction binding the contract method 0x9cd35f49.
//
// Solidity: function setAppWhitelist(address app, address[] whitelist, bool value) returns()
func (_Vault *VaultTransactorSession) SetAppWhitelist(app common.Address, whitelist []common.Address, value bool) (*types.Transaction, error) {
	return _Vault.Contract.SetAppWhitelist(&_Vault.TransactOpts, app, whitelist, value)
}

// SetNotPausedChain is a paid mutator transaction binding the contract method 0x3a82f395.
//
// Solidity: function setNotPausedChain(uint256 chain, bool state) returns()
func (_Vault *VaultTransactor) SetNotPausedChain(opts *bind.TransactOpts, chain *big.Int, state bool) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "setNotPausedChain", chain, state)
}

// SetNotPausedChain is a paid mutator transaction binding the contract method 0x3a82f395.
//
// Solidity: function setNotPausedChain(uint256 chain, bool state) returns()
func (_Vault *VaultSession) SetNotPausedChain(chain *big.Int, state bool) (*types.Transaction, error) {
	return _Vault.Contract.SetNotPausedChain(&_Vault.TransactOpts, chain, state)
}

// SetNotPausedChain is a paid mutator transaction binding the contract method 0x3a82f395.
//
// Solidity: function setNotPausedChain(uint256 chain, bool state) returns()
func (_Vault *VaultTransactorSession) SetNotPausedChain(chain *big.Int, state bool) (*types.Transaction, error) {
	return _Vault.Contract.SetNotPausedChain(&_Vault.TransactOpts, chain, state)
}

// TransferIn is a paid mutator transaction binding the contract method 0xe4652f49.
//
// Solidity: function transferIn(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactor) TransferIn(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferIn", token, to, amount)
}

// TransferIn is a paid mutator transaction binding the contract method 0xe4652f49.
//
// Solidity: function transferIn(address token, address to, uint256 amount) returns()
func (_Vault *VaultSession) TransferIn(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferIn(&_Vault.TransactOpts, token, to, amount)
}

// TransferIn is a paid mutator transaction binding the contract method 0xe4652f49.
//
// Solidity: function transferIn(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) TransferIn(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferIn(&_Vault.TransactOpts, token, to, amount)
}

// TransferInMultiple is a paid mutator transaction binding the contract method 0x754ff725.
//
// Solidity: function transferInMultiple(address[] tokens, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultTransactor) TransferInMultiple(opts *bind.TransactOpts, tokens []common.Address, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferInMultiple", tokens, tos, amounts)
}

// TransferInMultiple is a paid mutator transaction binding the contract method 0x754ff725.
//
// Solidity: function transferInMultiple(address[] tokens, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultSession) TransferInMultiple(tokens []common.Address, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferInMultiple(&_Vault.TransactOpts, tokens, tos, amounts)
}

// TransferInMultiple is a paid mutator transaction binding the contract method 0x754ff725.
//
// Solidity: function transferInMultiple(address[] tokens, address[] tos, uint256[] amounts) returns()
func (_Vault *VaultTransactorSession) TransferInMultiple(tokens []common.Address, tos []common.Address, amounts []*big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferInMultiple(&_Vault.TransactOpts, tokens, tos, amounts)
}

// TransferInNative is a paid mutator transaction binding the contract method 0x3683f9ab.
//
// Solidity: function transferInNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactor) TransferInNative(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferInNative", to, amount)
}

// TransferInNative is a paid mutator transaction binding the contract method 0x3683f9ab.
//
// Solidity: function transferInNative(address to, uint256 amount) returns()
func (_Vault *VaultSession) TransferInNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferInNative(&_Vault.TransactOpts, to, amount)
}

// TransferInNative is a paid mutator transaction binding the contract method 0x3683f9ab.
//
// Solidity: function transferInNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) TransferInNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferInNative(&_Vault.TransactOpts, to, amount)
}

// TransferOut is a paid mutator transaction binding the contract method 0xa9b61bcd.
//
// Solidity: function transferOut(address token, uint256 dstChain, address to, uint256 amount) returns()
func (_Vault *VaultTransactor) TransferOut(opts *bind.TransactOpts, token common.Address, dstChain *big.Int, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferOut", token, dstChain, to, amount)
}

// TransferOut is a paid mutator transaction binding the contract method 0xa9b61bcd.
//
// Solidity: function transferOut(address token, uint256 dstChain, address to, uint256 amount) returns()
func (_Vault *VaultSession) TransferOut(token common.Address, dstChain *big.Int, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOut(&_Vault.TransactOpts, token, dstChain, to, amount)
}

// TransferOut is a paid mutator transaction binding the contract method 0xa9b61bcd.
//
// Solidity: function transferOut(address token, uint256 dstChain, address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) TransferOut(token common.Address, dstChain *big.Int, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOut(&_Vault.TransactOpts, token, dstChain, to, amount)
}

// TransferOutNative is a paid mutator transaction binding the contract method 0xfea9abc8.
//
// Solidity: function transferOutNative(string to, uint256 dstChain) payable returns()
func (_Vault *VaultTransactor) TransferOutNative(opts *bind.TransactOpts, to string, dstChain *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferOutNative", to, dstChain)
}

// TransferOutNative is a paid mutator transaction binding the contract method 0xfea9abc8.
//
// Solidity: function transferOutNative(string to, uint256 dstChain) payable returns()
func (_Vault *VaultSession) TransferOutNative(to string, dstChain *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNative(&_Vault.TransactOpts, to, dstChain)
}

// TransferOutNative is a paid mutator transaction binding the contract method 0xfea9abc8.
//
// Solidity: function transferOutNative(string to, uint256 dstChain) payable returns()
func (_Vault *VaultTransactorSession) TransferOutNative(to string, dstChain *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNative(&_Vault.TransactOpts, to, dstChain)
}

// TransferOutNonEvm is a paid mutator transaction binding the contract method 0x0c846136.
//
// Solidity: function transferOutNonEvm(address token, uint256 dstChain, string to, uint256 amount) returns()
func (_Vault *VaultTransactor) TransferOutNonEvm(opts *bind.TransactOpts, token common.Address, dstChain *big.Int, to string, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "transferOutNonEvm", token, dstChain, to, amount)
}

// TransferOutNonEvm is a paid mutator transaction binding the contract method 0x0c846136.
//
// Solidity: function transferOutNonEvm(address token, uint256 dstChain, string to, uint256 amount) returns()
func (_Vault *VaultSession) TransferOutNonEvm(token common.Address, dstChain *big.Int, to string, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNonEvm(&_Vault.TransactOpts, token, dstChain, to, amount)
}

// TransferOutNonEvm is a paid mutator transaction binding the contract method 0x0c846136.
//
// Solidity: function transferOutNonEvm(address token, uint256 dstChain, string to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) TransferOutNonEvm(token common.Address, dstChain *big.Int, to string, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.TransferOutNonEvm(&_Vault.TransactOpts, token, dstChain, to, amount)
}

// UpdateAppAdmin is a paid mutator transaction binding the contract method 0x125dabb0.
//
// Solidity: function updateAppAdmin(address app, address newAdmin) returns()
func (_Vault *VaultTransactor) UpdateAppAdmin(opts *bind.TransactOpts, app common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "updateAppAdmin", app, newAdmin)
}

// UpdateAppAdmin is a paid mutator transaction binding the contract method 0x125dabb0.
//
// Solidity: function updateAppAdmin(address app, address newAdmin) returns()
func (_Vault *VaultSession) UpdateAppAdmin(app common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.Contract.UpdateAppAdmin(&_Vault.TransactOpts, app, newAdmin)
}

// UpdateAppAdmin is a paid mutator transaction binding the contract method 0x125dabb0.
//
// Solidity: function updateAppAdmin(address app, address newAdmin) returns()
func (_Vault *VaultTransactorSession) UpdateAppAdmin(app common.Address, newAdmin common.Address) (*types.Transaction, error) {
	return _Vault.Contract.UpdateAppAdmin(&_Vault.TransactOpts, app, newAdmin)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactor) Withdraw(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "withdraw", token, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address token, address to, uint256 amount) returns()
func (_Vault *VaultSession) Withdraw(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.Withdraw(&_Vault.TransactOpts, token, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xd9caed12.
//
// Solidity: function withdraw(address token, address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) Withdraw(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.Withdraw(&_Vault.TransactOpts, token, to, amount)
}

// WithdrawNative is a paid mutator transaction binding the contract method 0x07b18bde.
//
// Solidity: function withdrawNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactor) WithdrawNative(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.contract.Transact(opts, "withdrawNative", to, amount)
}

// WithdrawNative is a paid mutator transaction binding the contract method 0x07b18bde.
//
// Solidity: function withdrawNative(address to, uint256 amount) returns()
func (_Vault *VaultSession) WithdrawNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.WithdrawNative(&_Vault.TransactOpts, to, amount)
}

// WithdrawNative is a paid mutator transaction binding the contract method 0x07b18bde.
//
// Solidity: function withdrawNative(address to, uint256 amount) returns()
func (_Vault *VaultTransactorSession) WithdrawNative(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Vault.Contract.WithdrawNative(&_Vault.TransactOpts, to, amount)
}

// VaultCode501Iterator is returned from FilterCode501 and is used to iterate over the raw logs and unpacked data for Code501 events raised by the Vault contract.
type VaultCode501Iterator struct {
	Event *VaultCode501 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultCode501Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultCode501)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultCode501)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultCode501Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultCode501Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultCode501 represents a Code501 event raised by the Vault contract.
type VaultCode501 struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCode501 is a free log retrieval operation binding the contract event 0x6a036bee1b01306b61370b348f57c9a7038a7bf8cb5d8a4cfbfb197b3f329e83.
//
// Solidity: event Code501()
func (_Vault *VaultFilterer) FilterCode501(opts *bind.FilterOpts) (*VaultCode501Iterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "Code501")
	if err != nil {
		return nil, err
	}
	return &VaultCode501Iterator{contract: _Vault.contract, event: "Code501", logs: logs, sub: sub}, nil
}

// WatchCode501 is a free log subscription operation binding the contract event 0x6a036bee1b01306b61370b348f57c9a7038a7bf8cb5d8a4cfbfb197b3f329e83.
//
// Solidity: event Code501()
func (_Vault *VaultFilterer) WatchCode501(opts *bind.WatchOpts, sink chan<- *VaultCode501) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "Code501")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultCode501)
				if err := _Vault.contract.UnpackLog(event, "Code501", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCode501 is a log parse operation binding the contract event 0x6a036bee1b01306b61370b348f57c9a7038a7bf8cb5d8a4cfbfb197b3f329e83.
//
// Solidity: event Code501()
func (_Vault *VaultFilterer) ParseCode501(log types.Log) (*VaultCode501, error) {
	event := new(VaultCode501)
	if err := _Vault.contract.UnpackLog(event, "Code501", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultCode502Iterator is returned from FilterCode502 and is used to iterate over the raw logs and unpacked data for Code502 events raised by the Vault contract.
type VaultCode502Iterator struct {
	Event *VaultCode502 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultCode502Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultCode502)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultCode502)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultCode502Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultCode502Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultCode502 represents a Code502 event raised by the Vault contract.
type VaultCode502 struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterCode502 is a free log retrieval operation binding the contract event 0xe1ef72f1796988294cc9a59a2e3073a1079dc556e353a1ebf43b456b191161a9.
//
// Solidity: event Code502()
func (_Vault *VaultFilterer) FilterCode502(opts *bind.FilterOpts) (*VaultCode502Iterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "Code502")
	if err != nil {
		return nil, err
	}
	return &VaultCode502Iterator{contract: _Vault.contract, event: "Code502", logs: logs, sub: sub}, nil
}

// WatchCode502 is a free log subscription operation binding the contract event 0xe1ef72f1796988294cc9a59a2e3073a1079dc556e353a1ebf43b456b191161a9.
//
// Solidity: event Code502()
func (_Vault *VaultFilterer) WatchCode502(opts *bind.WatchOpts, sink chan<- *VaultCode502) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "Code502")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultCode502)
				if err := _Vault.contract.UnpackLog(event, "Code502", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCode502 is a log parse operation binding the contract event 0xe1ef72f1796988294cc9a59a2e3073a1079dc556e353a1ebf43b456b191161a9.
//
// Solidity: event Code502()
func (_Vault *VaultFilterer) ParseCode502(log types.Log) (*VaultCode502, error) {
	event := new(VaultCode502)
	if err := _Vault.contract.UnpackLog(event, "Code502", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultRemoteExecutedIterator is returned from FilterRemoteExecuted and is used to iterate over the raw logs and unpacked data for RemoteExecuted events raised by the Vault contract.
type VaultRemoteExecutedIterator struct {
	Event *VaultRemoteExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultRemoteExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultRemoteExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultRemoteExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultRemoteExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultRemoteExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultRemoteExecuted represents a RemoteExecuted event raised by the Vault contract.
type VaultRemoteExecuted struct {
	Code      uint8
	Exception []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRemoteExecuted is a free log retrieval operation binding the contract event 0x784fc316e5b708d9d87522371568d63c072c60efc538e8998bf4c87a78e3f53c.
//
// Solidity: event remoteExecuted(uint8 code, bytes exception)
func (_Vault *VaultFilterer) FilterRemoteExecuted(opts *bind.FilterOpts) (*VaultRemoteExecutedIterator, error) {

	logs, sub, err := _Vault.contract.FilterLogs(opts, "remoteExecuted")
	if err != nil {
		return nil, err
	}
	return &VaultRemoteExecutedIterator{contract: _Vault.contract, event: "remoteExecuted", logs: logs, sub: sub}, nil
}

// WatchRemoteExecuted is a free log subscription operation binding the contract event 0x784fc316e5b708d9d87522371568d63c072c60efc538e8998bf4c87a78e3f53c.
//
// Solidity: event remoteExecuted(uint8 code, bytes exception)
func (_Vault *VaultFilterer) WatchRemoteExecuted(opts *bind.WatchOpts, sink chan<- *VaultRemoteExecuted) (event.Subscription, error) {

	logs, sub, err := _Vault.contract.WatchLogs(opts, "remoteExecuted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultRemoteExecuted)
				if err := _Vault.contract.UnpackLog(event, "remoteExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoteExecuted is a log parse operation binding the contract event 0x784fc316e5b708d9d87522371568d63c072c60efc538e8998bf4c87a78e3f53c.
//
// Solidity: event remoteExecuted(uint8 code, bytes exception)
func (_Vault *VaultFilterer) ParseRemoteExecuted(log types.Log) (*VaultRemoteExecuted, error) {
	event := new(VaultRemoteExecuted)
	if err := _Vault.contract.UnpackLog(event, "remoteExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
