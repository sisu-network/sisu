// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: keygen.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeygenProposalVote_Vote int32

const (
	KeygenProposalVote_APPROVE KeygenProposalVote_Vote = 0
	KeygenProposalVote_REJECT  KeygenProposalVote_Vote = 1
)

var KeygenProposalVote_Vote_name = map[int32]string{
	0: "APPROVE",
	1: "REJECT",
}

var KeygenProposalVote_Vote_value = map[string]int32{
	"APPROVE": 0,
	"REJECT":  1,
}

func (x KeygenProposalVote_Vote) String() string {
	return proto.EnumName(KeygenProposalVote_Vote_name, int32(x))
}

func (KeygenProposalVote_Vote) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dbc836e6b96b1a93, []int{1, 0}
}

type KeygenProposal struct {
	Signer      string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ChainSymbol string `protobuf:"bytes,2,opt,name=chainSymbol,proto3" json:"chainSymbol,omitempty"`
	// Random id for this proposal.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Block number that this proposal expires. All votes should be casted and saved by this time.
	ExpirationBlock int64 `protobuf:"varint,4,opt,name=expirationBlock,proto3" json:"expirationBlock,omitempty"`
}

func (m *KeygenProposal) Reset()         { *m = KeygenProposal{} }
func (m *KeygenProposal) String() string { return proto.CompactTextString(m) }
func (*KeygenProposal) ProtoMessage()    {}
func (*KeygenProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbc836e6b96b1a93, []int{0}
}
func (m *KeygenProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeygenProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeygenProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenProposal.Merge(m, src)
}
func (m *KeygenProposal) XXX_Size() int {
	return m.Size()
}
func (m *KeygenProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenProposal.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenProposal proto.InternalMessageInfo

func (m *KeygenProposal) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *KeygenProposal) GetChainSymbol() string {
	if m != nil {
		return m.ChainSymbol
	}
	return ""
}

func (m *KeygenProposal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *KeygenProposal) GetExpirationBlock() int64 {
	if m != nil {
		return m.ExpirationBlock
	}
	return 0
}

type KeygenProposalVote struct {
	Signer     string                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	ProposalId string                  `protobuf:"bytes,2,opt,name=proposalId,proto3" json:"proposalId,omitempty"`
	Vote       KeygenProposalVote_Vote `protobuf:"varint,3,opt,name=vote,proto3,enum=types.KeygenProposalVote_Vote" json:"vote,omitempty"`
}

func (m *KeygenProposalVote) Reset()         { *m = KeygenProposalVote{} }
func (m *KeygenProposalVote) String() string { return proto.CompactTextString(m) }
func (*KeygenProposalVote) ProtoMessage()    {}
func (*KeygenProposalVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbc836e6b96b1a93, []int{1}
}
func (m *KeygenProposalVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenProposalVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeygenProposalVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeygenProposalVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenProposalVote.Merge(m, src)
}
func (m *KeygenProposalVote) XXX_Size() int {
	return m.Size()
}
func (m *KeygenProposalVote) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenProposalVote.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenProposalVote proto.InternalMessageInfo

func (m *KeygenProposalVote) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *KeygenProposalVote) GetProposalId() string {
	if m != nil {
		return m.ProposalId
	}
	return ""
}

func (m *KeygenProposalVote) GetVote() KeygenProposalVote_Vote {
	if m != nil {
		return m.Vote
	}
	return KeygenProposalVote_APPROVE
}

func init() {
	proto.RegisterEnum("types.KeygenProposalVote_Vote", KeygenProposalVote_Vote_name, KeygenProposalVote_Vote_value)
	proto.RegisterType((*KeygenProposal)(nil), "types.KeygenProposal")
	proto.RegisterType((*KeygenProposalVote)(nil), "types.KeygenProposalVote")
}

func init() { proto.RegisterFile("keygen.proto", fileDescriptor_dbc836e6b96b1a93) }

var fileDescriptor_dbc836e6b96b1a93 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x4e, 0xad, 0x4c,
	0x4f, 0xcd, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x56,
	0x6a, 0x61, 0xe4, 0xe2, 0xf3, 0x06, 0x8b, 0x07, 0x14, 0xe5, 0x17, 0xe4, 0x17, 0x27, 0xe6, 0x08,
	0x89, 0x71, 0xb1, 0x15, 0x67, 0xa6, 0xe7, 0xa5, 0x16, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06,
	0x41, 0x79, 0x42, 0x0a, 0x5c, 0xdc, 0xc9, 0x19, 0x89, 0x99, 0x79, 0xc1, 0x95, 0xb9, 0x49, 0xf9,
	0x39, 0x12, 0x4c, 0x60, 0x49, 0x64, 0x21, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x66, 0xb0,
	0x04, 0x53, 0x66, 0x8a, 0x90, 0x06, 0x17, 0x7f, 0x6a, 0x45, 0x41, 0x66, 0x51, 0x62, 0x49, 0x66,
	0x7e, 0x9e, 0x53, 0x4e, 0x7e, 0x72, 0xb6, 0x04, 0x8b, 0x02, 0xa3, 0x06, 0x73, 0x10, 0xba, 0xb0,
	0xd2, 0x42, 0x46, 0x2e, 0x21, 0x54, 0x67, 0x84, 0xe5, 0x97, 0xa4, 0xe2, 0x74, 0x8a, 0x1c, 0x17,
	0x57, 0x01, 0x54, 0x9d, 0x67, 0x0a, 0xd4, 0x25, 0x48, 0x22, 0x42, 0x46, 0x5c, 0x2c, 0x65, 0xf9,
	0x25, 0xa9, 0x60, 0xa7, 0xf0, 0x19, 0xc9, 0xe9, 0x81, 0xfd, 0xaa, 0x87, 0x69, 0x81, 0x1e, 0x88,
	0x08, 0x02, 0xab, 0x55, 0x92, 0xe7, 0x62, 0x01, 0xdb, 0xc9, 0xcd, 0xc5, 0xee, 0x18, 0x10, 0x10,
	0xe4, 0x1f, 0xe6, 0x2a, 0xc0, 0x20, 0xc4, 0xc5, 0xc5, 0x16, 0xe4, 0xea, 0xe5, 0xea, 0x1c, 0x22,
	0xc0, 0xe8, 0x24, 0x71, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31,
	0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x49, 0x6c, 0xe0,
	0x20, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x26, 0x8f, 0x05, 0x97, 0x62, 0x01, 0x00, 0x00,
}

func (m *KeygenProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationBlock != 0 {
		i = encodeVarintKeygen(dAtA, i, uint64(m.ExpirationBlock))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainSymbol) > 0 {
		i -= len(m.ChainSymbol)
		copy(dAtA[i:], m.ChainSymbol)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.ChainSymbol)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeygenProposalVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenProposalVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenProposalVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != 0 {
		i = encodeVarintKeygen(dAtA, i, uint64(m.Vote))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProposalId) > 0 {
		i -= len(m.ProposalId)
		copy(dAtA[i:], m.ProposalId)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.ProposalId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeygen(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeygen(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeygenProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.ChainSymbol)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	if m.ExpirationBlock != 0 {
		n += 1 + sovKeygen(uint64(m.ExpirationBlock))
	}
	return n
}

func (m *KeygenProposalVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.ProposalId)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	if m.Vote != 0 {
		n += 1 + sovKeygen(uint64(m.Vote))
	}
	return n
}

func sovKeygen(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeygen(x uint64) (n int) {
	return sovKeygen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeygenProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeygenProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeygenProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationBlock", wireType)
			}
			m.ExpirationBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeygenProposalVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeygenProposalVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeygenProposalVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= KeygenProposalVote_Vote(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeygen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeygen
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeygen
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeygen
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeygen        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeygen          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeygen = fmt.Errorf("proto: unexpected end of group")
)
