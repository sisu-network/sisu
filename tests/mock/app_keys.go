// Code generated by MockGen. DO NOT EDIT.
// Source: app_keys.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	keyring "github.com/cosmos/cosmos-sdk/crypto/keyring"
	types "github.com/cosmos/cosmos-sdk/types"
)

// MockAppKeys is a mock of AppKeys interface.
type MockAppKeys struct {
	ctrl     *gomock.Controller
	recorder *MockAppKeysMockRecorder
}

// MockAppKeysMockRecorder is the mock recorder for MockAppKeys.
type MockAppKeysMockRecorder struct {
	mock *MockAppKeys
}

// NewMockAppKeys creates a new mock instance.
func NewMockAppKeys(ctrl *gomock.Controller) *MockAppKeys {
	mock := &MockAppKeys{ctrl: ctrl}
	mock.recorder = &MockAppKeysMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppKeys) EXPECT() *MockAppKeysMockRecorder {
	return m.recorder
}

// GetAesEncrypted mocks base method.
func (m *MockAppKeys) GetAesEncrypted(msg []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAesEncrypted", msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAesEncrypted indicates an expected call of GetAesEncrypted.
func (mr *MockAppKeysMockRecorder) GetAesEncrypted(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAesEncrypted", reflect.TypeOf((*MockAppKeys)(nil).GetAesEncrypted), msg)
}

// GetEncryptedPrivKey mocks base method.
func (m *MockAppKeys) GetEncryptedPrivKey() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptedPrivKey")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptedPrivKey indicates an expected call of GetEncryptedPrivKey.
func (mr *MockAppKeysMockRecorder) GetEncryptedPrivKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptedPrivKey", reflect.TypeOf((*MockAppKeys)(nil).GetEncryptedPrivKey))
}

// GetKeyring mocks base method.
func (m *MockAppKeys) GetKeyring() keyring.Keyring {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyring")
	ret0, _ := ret[0].(keyring.Keyring)
	return ret0
}

// GetKeyring indicates an expected call of GetKeyring.
func (mr *MockAppKeysMockRecorder) GetKeyring() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyring", reflect.TypeOf((*MockAppKeys)(nil).GetKeyring))
}

// GetSignerAddress mocks base method.
func (m *MockAppKeys) GetSignerAddress() types.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignerAddress")
	ret0, _ := ret[0].(types.AccAddress)
	return ret0
}

// GetSignerAddress indicates an expected call of GetSignerAddress.
func (mr *MockAppKeysMockRecorder) GetSignerAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignerAddress", reflect.TypeOf((*MockAppKeys)(nil).GetSignerAddress))
}

// GetSignerInfo mocks base method.
func (m *MockAppKeys) GetSignerInfo() keyring.Info {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignerInfo")
	ret0, _ := ret[0].(keyring.Info)
	return ret0
}

// GetSignerInfo indicates an expected call of GetSignerInfo.
func (mr *MockAppKeysMockRecorder) GetSignerInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignerInfo", reflect.TypeOf((*MockAppKeys)(nil).GetSignerInfo))
}

// Init mocks base method.
func (m *MockAppKeys) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockAppKeysMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAppKeys)(nil).Init))
}
