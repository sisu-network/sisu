// Code generated by MockGen. DO NOT EDIT.
// Source: common/global_data.go

// Package common is a generated GoMock package.
package common

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rpc "github.com/sisu-network/cosmos-sdk/client/rpc"
)

// MockGlobalData is a mock of GlobalData interface.
type MockGlobalData struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalDataMockRecorder
}

// MockGlobalDataMockRecorder is the mock recorder for MockGlobalData.
type MockGlobalDataMockRecorder struct {
	mock *MockGlobalData
}

// NewMockGlobalData creates a new mock instance.
func NewMockGlobalData(ctrl *gomock.Controller) *MockGlobalData {
	mock := &MockGlobalData{ctrl: ctrl}
	mock.recorder = &MockGlobalDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalData) EXPECT() *MockGlobalDataMockRecorder {
	return m.recorder
}

// GetMyValidatorAddr mocks base method.
func (m *MockGlobalData) GetMyValidatorAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyValidatorAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMyValidatorAddr indicates an expected call of GetMyValidatorAddr.
func (mr *MockGlobalDataMockRecorder) GetMyValidatorAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyValidatorAddr", reflect.TypeOf((*MockGlobalData)(nil).GetMyValidatorAddr))
}

// GetValidatorSet mocks base method.
func (m *MockGlobalData) GetValidatorSet() []rpc.ValidatorOutput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorSet")
	ret0, _ := ret[0].([]rpc.ValidatorOutput)
	return ret0
}

// GetValidatorSet indicates an expected call of GetValidatorSet.
func (mr *MockGlobalDataMockRecorder) GetValidatorSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorSet", reflect.TypeOf((*MockGlobalData)(nil).GetValidatorSet))
}

// Init mocks base method.
func (m *MockGlobalData) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockGlobalDataMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockGlobalData)(nil).Init))
}

// IsCatchingUp mocks base method.
func (m *MockGlobalData) IsCatchingUp() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCatchingUp")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCatchingUp indicates an expected call of IsCatchingUp.
func (mr *MockGlobalDataMockRecorder) IsCatchingUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCatchingUp", reflect.TypeOf((*MockGlobalData)(nil).IsCatchingUp))
}

// UpdateCatchingUp mocks base method.
func (m *MockGlobalData) UpdateCatchingUp() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCatchingUp")
}

// UpdateCatchingUp indicates an expected call of UpdateCatchingUp.
func (mr *MockGlobalDataMockRecorder) UpdateCatchingUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCatchingUp", reflect.TypeOf((*MockGlobalData)(nil).UpdateCatchingUp))
}

// UpdateValidatorSets mocks base method.
func (m *MockGlobalData) UpdateValidatorSets() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateValidatorSets")
}

// UpdateValidatorSets indicates an expected call of UpdateValidatorSets.
func (mr *MockGlobalDataMockRecorder) UpdateValidatorSets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValidatorSets", reflect.TypeOf((*MockGlobalData)(nil).UpdateValidatorSets))
}
