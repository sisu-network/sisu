// Code generated by MockGen. DO NOT EDIT.
// Source: party_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/crypto/types"
	gomock "github.com/golang/mock/gomock"
)

// MockPartyManager is a mock of PartyManager interface.
type MockPartyManager struct {
	ctrl     *gomock.Controller
	recorder *MockPartyManagerMockRecorder
}

// MockPartyManagerMockRecorder is the mock recorder for MockPartyManager.
type MockPartyManagerMockRecorder struct {
	mock *MockPartyManager
}

// NewMockPartyManager creates a new mock instance.
func NewMockPartyManager(ctrl *gomock.Controller) *MockPartyManager {
	mock := &MockPartyManager{ctrl: ctrl}
	mock.recorder = &MockPartyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartyManager) EXPECT() *MockPartyManagerMockRecorder {
	return m.recorder
}

// GetActivePartyPubkeys mocks base method.
func (m *MockPartyManager) GetActivePartyPubkeys() []types.PubKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePartyPubkeys")
	ret0, _ := ret[0].([]types.PubKey)
	return ret0
}

// GetActivePartyPubkeys indicates an expected call of GetActivePartyPubkeys.
func (mr *MockPartyManagerMockRecorder) GetActivePartyPubkeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePartyPubkeys", reflect.TypeOf((*MockPartyManager)(nil).GetActivePartyPubkeys))
}
