// Code generated by MockGen. DO NOT EDIT.
// Source: x/tss/keeper/private_db.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sisu-network/sisu/x/tss/types"
)

// MockPrivateDb is a mock of PrivateDb interface.
type MockPrivateDb struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateDbMockRecorder
}

// MockPrivateDbMockRecorder is the mock recorder for MockPrivateDb.
type MockPrivateDbMockRecorder struct {
	mock *MockPrivateDb
}

// NewMockPrivateDb creates a new mock instance.
func NewMockPrivateDb(ctrl *gomock.Controller) *MockPrivateDb {
	mock := &MockPrivateDb{ctrl: ctrl}
	mock.recorder = &MockPrivateDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateDb) EXPECT() *MockPrivateDbMockRecorder {
	return m.recorder
}

// GetKeygenPubkey mocks base method.
func (m *MockPrivateDb) GetKeygenPubkey(keyType string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeygenPubkey", keyType)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetKeygenPubkey indicates an expected call of GetKeygenPubkey.
func (mr *MockPrivateDbMockRecorder) GetKeygenPubkey(keyType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeygenPubkey", reflect.TypeOf((*MockPrivateDb)(nil).GetKeygenPubkey), keyType)
}

// GetPendingContracts mocks base method.
func (m *MockPrivateDb) GetPendingContracts(chain string) []*types.Contract {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingContracts", chain)
	ret0, _ := ret[0].([]*types.Contract)
	return ret0
}

// GetPendingContracts indicates an expected call of GetPendingContracts.
func (mr *MockPrivateDbMockRecorder) GetPendingContracts(chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingContracts", reflect.TypeOf((*MockPrivateDb)(nil).GetPendingContracts), chain)
}

// GetTxOut mocks base method.
func (m *MockPrivateDb) GetTxOut(outChain, hash string) *types.TxOut {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxOut", outChain, hash)
	ret0, _ := ret[0].(*types.TxOut)
	return ret0
}

// GetTxOut indicates an expected call of GetTxOut.
func (mr *MockPrivateDbMockRecorder) GetTxOut(outChain, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxOut", reflect.TypeOf((*MockPrivateDb)(nil).GetTxOut), outChain, hash)
}

// IsContractExisted mocks base method.
func (m *MockPrivateDb) IsContractExisted(msg *types.Contract) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsContractExisted", msg)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsContractExisted indicates an expected call of IsContractExisted.
func (mr *MockPrivateDbMockRecorder) IsContractExisted(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsContractExisted", reflect.TypeOf((*MockPrivateDb)(nil).IsContractExisted), msg)
}

// IsKeygenAddress mocks base method.
func (m *MockPrivateDb) IsKeygenAddress(keyType, address string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKeygenAddress", keyType, address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKeygenAddress indicates an expected call of IsKeygenAddress.
func (mr *MockPrivateDbMockRecorder) IsKeygenAddress(keyType, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKeygenAddress", reflect.TypeOf((*MockPrivateDb)(nil).IsKeygenAddress), keyType, address)
}

// IsKeygenExisted mocks base method.
func (m *MockPrivateDb) IsKeygenExisted(keyType string, index int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKeygenExisted", keyType, index)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKeygenExisted indicates an expected call of IsKeygenExisted.
func (mr *MockPrivateDbMockRecorder) IsKeygenExisted(keyType, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKeygenExisted", reflect.TypeOf((*MockPrivateDb)(nil).IsKeygenExisted), keyType, index)
}

// IsKeygenResultSuccess mocks base method.
func (m *MockPrivateDb) IsKeygenResultSuccess(signerMsg *types.KeygenResultWithSigner) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKeygenResultSuccess", signerMsg)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKeygenResultSuccess indicates an expected call of IsKeygenResultSuccess.
func (mr *MockPrivateDbMockRecorder) IsKeygenResultSuccess(signerMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKeygenResultSuccess", reflect.TypeOf((*MockPrivateDb)(nil).IsKeygenResultSuccess), signerMsg)
}

// IsTxInExisted mocks base method.
func (m *MockPrivateDb) IsTxInExisted(msg *types.TxIn) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTxInExisted", msg)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTxInExisted indicates an expected call of IsTxInExisted.
func (mr *MockPrivateDbMockRecorder) IsTxInExisted(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTxInExisted", reflect.TypeOf((*MockPrivateDb)(nil).IsTxInExisted), msg)
}

// IsTxOutExisted mocks base method.
func (m *MockPrivateDb) IsTxOutExisted(msg *types.TxOut) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTxOutExisted", msg)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTxOutExisted indicates an expected call of IsTxOutExisted.
func (mr *MockPrivateDbMockRecorder) IsTxOutExisted(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTxOutExisted", reflect.TypeOf((*MockPrivateDb)(nil).IsTxOutExisted), msg)
}

// PrintStore mocks base method.
func (m *MockPrivateDb) PrintStore(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintStore", name)
}

// PrintStore indicates an expected call of PrintStore.
func (mr *MockPrivateDbMockRecorder) PrintStore(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintStore", reflect.TypeOf((*MockPrivateDb)(nil).PrintStore), name)
}

// SaveContracts mocks base method.
func (m *MockPrivateDb) SaveContracts(msgs []*types.Contract, saveByteCode bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveContracts", msgs, saveByteCode)
}

// SaveContracts indicates an expected call of SaveContracts.
func (mr *MockPrivateDbMockRecorder) SaveContracts(msgs, saveByteCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContracts", reflect.TypeOf((*MockPrivateDb)(nil).SaveContracts), msgs, saveByteCode)
}

// SaveKeygen mocks base method.
func (m *MockPrivateDb) SaveKeygen(msg *types.Keygen) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveKeygen", msg)
}

// SaveKeygen indicates an expected call of SaveKeygen.
func (mr *MockPrivateDbMockRecorder) SaveKeygen(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveKeygen", reflect.TypeOf((*MockPrivateDb)(nil).SaveKeygen), msg)
}

// SaveKeygenResult mocks base method.
func (m *MockPrivateDb) SaveKeygenResult(signerMsg *types.KeygenResultWithSigner) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveKeygenResult", signerMsg)
}

// SaveKeygenResult indicates an expected call of SaveKeygenResult.
func (mr *MockPrivateDbMockRecorder) SaveKeygenResult(signerMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveKeygenResult", reflect.TypeOf((*MockPrivateDb)(nil).SaveKeygenResult), signerMsg)
}

// SaveTxIn mocks base method.
func (m *MockPrivateDb) SaveTxIn(msg *types.TxIn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveTxIn", msg)
}

// SaveTxIn indicates an expected call of SaveTxIn.
func (mr *MockPrivateDbMockRecorder) SaveTxIn(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTxIn", reflect.TypeOf((*MockPrivateDb)(nil).SaveTxIn), msg)
}

// SaveTxOut mocks base method.
func (m *MockPrivateDb) SaveTxOut(msg *types.TxOut) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveTxOut", msg)
}

// SaveTxOut indicates an expected call of SaveTxOut.
func (mr *MockPrivateDbMockRecorder) SaveTxOut(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTxOut", reflect.TypeOf((*MockPrivateDb)(nil).SaveTxOut), msg)
}

// UpdateContractsStatus mocks base method.
func (m *MockPrivateDb) UpdateContractsStatus(msgs []*types.Contract, status string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateContractsStatus", msgs, status)
}

// UpdateContractsStatus indicates an expected call of UpdateContractsStatus.
func (mr *MockPrivateDbMockRecorder) UpdateContractsStatus(msgs, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContractsStatus", reflect.TypeOf((*MockPrivateDb)(nil).UpdateContractsStatus), msgs, status)
}
