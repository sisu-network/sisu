// Code generated by MockGen. DO NOT EDIT.
// Source: x/sisu/keeper/storage.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sisu-network/sisu/x/sisu/types"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetTxOutSig mocks base method.
func (m *MockStorage) GetTxOutSig(outChain, hashWithSig string) *types.TxOutSig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxOutSig", outChain, hashWithSig)
	ret0, _ := ret[0].(*types.TxOutSig)
	return ret0
}

// GetTxOutSig indicates an expected call of GetTxOutSig.
func (mr *MockStorageMockRecorder) GetTxOutSig(outChain, hashWithSig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxOutSig", reflect.TypeOf((*MockStorage)(nil).GetTxOutSig), outChain, hashWithSig)
}

// IsTxOutConfirmExisted mocks base method.
func (m *MockStorage) IsTxOutConfirmExisted(outChain, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTxOutConfirmExisted", outChain, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTxOutConfirmExisted indicates an expected call of IsTxOutConfirmExisted.
func (mr *MockStorageMockRecorder) IsTxOutConfirmExisted(outChain, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTxOutConfirmExisted", reflect.TypeOf((*MockStorage)(nil).IsTxOutConfirmExisted), outChain, hash)
}

// SaveTxOutConfirm mocks base method.
func (m *MockStorage) SaveTxOutConfirm(msg *types.TxOutContractConfirm) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveTxOutConfirm", msg)
}

// SaveTxOutConfirm indicates an expected call of SaveTxOutConfirm.
func (mr *MockStorageMockRecorder) SaveTxOutConfirm(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTxOutConfirm", reflect.TypeOf((*MockStorage)(nil).SaveTxOutConfirm), msg)
}

// SaveTxOutSig mocks base method.
func (m *MockStorage) SaveTxOutSig(msg *types.TxOutSig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveTxOutSig", msg)
}

// SaveTxOutSig indicates an expected call of SaveTxOutSig.
func (mr *MockStorageMockRecorder) SaveTxOutSig(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTxOutSig", reflect.TypeOf((*MockStorage)(nil).SaveTxOutSig), msg)
}
