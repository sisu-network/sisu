// Code generated by MockGen. DO NOT EDIT.
// Source: common/tx_submitter.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sisu-network/cosmos-sdk/types"
)

// MockTxSubmit is a mock of TxSubmit interface.
type MockTxSubmit struct {
	ctrl     *gomock.Controller
	recorder *MockTxSubmitMockRecorder
}

// MockTxSubmitMockRecorder is the mock recorder for MockTxSubmit.
type MockTxSubmitMockRecorder struct {
	mock *MockTxSubmit
}

// NewMockTxSubmit creates a new mock instance.
func NewMockTxSubmit(ctrl *gomock.Controller) *MockTxSubmit {
	mock := &MockTxSubmit{ctrl: ctrl}
	mock.recorder = &MockTxSubmitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxSubmit) EXPECT() *MockTxSubmitMockRecorder {
	return m.recorder
}

// SubmitEThTx mocks base method.
func (m *MockTxSubmit) SubmitEThTx(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitEThTx", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitEThTx indicates an expected call of SubmitEThTx.
func (mr *MockTxSubmitMockRecorder) SubmitEThTx(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitEThTx", reflect.TypeOf((*MockTxSubmit)(nil).SubmitEThTx), data)
}

// SubmitMessage mocks base method.
func (m *MockTxSubmit) SubmitMessage(msg types.Msg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitMessage indicates an expected call of SubmitMessage.
func (mr *MockTxSubmitMockRecorder) SubmitMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitMessage", reflect.TypeOf((*MockTxSubmit)(nil).SubmitMessage), msg)
}
