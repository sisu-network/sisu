// Code generated by MockGen. DO NOT EDIT.
// Source: ./x/sisu/transaction_tracker.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/sisu-network/sisu/x/sisu/types"
)

// MockTxTracker is a mock of TxTracker interface.
type MockTxTracker struct {
	ctrl     *gomock.Controller
	recorder *MockTxTrackerMockRecorder
}

// MockTxTrackerMockRecorder is the mock recorder for MockTxTracker.
type MockTxTrackerMockRecorder struct {
	mock *MockTxTracker
}

// NewMockTxTracker creates a new mock instance.
func NewMockTxTracker(ctrl *gomock.Controller) *MockTxTracker {
	mock := &MockTxTracker{ctrl: ctrl}
	mock.recorder = &MockTxTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxTracker) EXPECT() *MockTxTrackerMockRecorder {
	return m.recorder
}

// AddTransaction mocks base method.
func (m *MockTxTracker) AddTransaction(txOut *types.TxOut, txIn *types.TxIn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTransaction", txOut, txIn)
}

// AddTransaction indicates an expected call of AddTransaction.
func (mr *MockTxTrackerMockRecorder) AddTransaction(txOut, txIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockTxTracker)(nil).AddTransaction), txOut, txIn)
}

// CheckExpiredTransaction mocks base method.
func (m *MockTxTracker) CheckExpiredTransaction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckExpiredTransaction")
}

// CheckExpiredTransaction indicates an expected call of CheckExpiredTransaction.
func (mr *MockTxTrackerMockRecorder) CheckExpiredTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExpiredTransaction", reflect.TypeOf((*MockTxTracker)(nil).CheckExpiredTransaction))
}

// OnTxFailed mocks base method.
func (m *MockTxTracker) OnTxFailed(chain, hash string, status types.TxStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnTxFailed", chain, hash, status)
}

// OnTxFailed indicates an expected call of OnTxFailed.
func (mr *MockTxTrackerMockRecorder) OnTxFailed(chain, hash, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnTxFailed", reflect.TypeOf((*MockTxTracker)(nil).OnTxFailed), chain, hash, status)
}

// RemoveTransaction mocks base method.
func (m *MockTxTracker) RemoveTransaction(chain, hash string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveTransaction", chain, hash)
}

// RemoveTransaction indicates an expected call of RemoveTransaction.
func (mr *MockTxTrackerMockRecorder) RemoveTransaction(chain, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTransaction", reflect.TypeOf((*MockTxTracker)(nil).RemoveTransaction), chain, hash)
}

// UpdateStatus mocks base method.
func (m *MockTxTracker) UpdateStatus(chain, hash string, status types.TxStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateStatus", chain, hash, status)
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockTxTrackerMockRecorder) UpdateStatus(chain, hash, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockTxTracker)(nil).UpdateStatus), chain, hash, status)
}
