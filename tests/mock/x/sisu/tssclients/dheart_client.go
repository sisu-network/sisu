// Code generated by MockGen. DO NOT EDIT.
// Source: x/sisu/tssclients/dheart_client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/crypto/types"
	gomock "github.com/golang/mock/gomock"
	types0 "github.com/sisu-network/dheart/types"
)

// MockDheartClient is a mock of DheartClient interface.
type MockDheartClient struct {
	ctrl     *gomock.Controller
	recorder *MockDheartClientMockRecorder
}

// MockDheartClientMockRecorder is the mock recorder for MockDheartClient.
type MockDheartClientMockRecorder struct {
	mock *MockDheartClient
}

// NewMockDheartClient creates a new mock instance.
func NewMockDheartClient(ctrl *gomock.Controller) *MockDheartClient {
	mock := &MockDheartClient{ctrl: ctrl}
	mock.recorder = &MockDheartClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDheartClient) EXPECT() *MockDheartClientMockRecorder {
	return m.recorder
}

// BlockEnd mocks base method.
func (m *MockDheartClient) BlockEnd(blockHeight int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockEnd", blockHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockEnd indicates an expected call of BlockEnd.
func (mr *MockDheartClientMockRecorder) BlockEnd(blockHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockEnd", reflect.TypeOf((*MockDheartClient)(nil).BlockEnd), blockHeight)
}

// KeyGen mocks base method.
func (m *MockDheartClient) KeyGen(keygenId, chain string, pubKeys []types.PubKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyGen", keygenId, chain, pubKeys)
	ret0, _ := ret[0].(error)
	return ret0
}

// KeyGen indicates an expected call of KeyGen.
func (mr *MockDheartClientMockRecorder) KeyGen(keygenId, chain, pubKeys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyGen", reflect.TypeOf((*MockDheartClient)(nil).KeyGen), keygenId, chain, pubKeys)
}

// KeySign mocks base method.
func (m *MockDheartClient) KeySign(req *types0.KeysignRequest, pubKeys []types.PubKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeySign", req, pubKeys)
	ret0, _ := ret[0].(error)
	return ret0
}

// KeySign indicates an expected call of KeySign.
func (mr *MockDheartClientMockRecorder) KeySign(req, pubKeys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeySign", reflect.TypeOf((*MockDheartClient)(nil).KeySign), req, pubKeys)
}

// Ping mocks base method.
func (m *MockDheartClient) Ping(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDheartClientMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDheartClient)(nil).Ping), arg0)
}

// SetPrivKey mocks base method.
func (m *MockDheartClient) SetPrivKey(encodedKey, keyType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPrivKey", encodedKey, keyType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPrivKey indicates an expected call of SetPrivKey.
func (mr *MockDheartClientMockRecorder) SetPrivKey(encodedKey, keyType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrivKey", reflect.TypeOf((*MockDheartClient)(nil).SetPrivKey), encodedKey, keyType)
}

// SetSisuReady mocks base method.
func (m *MockDheartClient) SetSisuReady(isReady bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSisuReady", isReady)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSisuReady indicates an expected call of SetSisuReady.
func (mr *MockDheartClientMockRecorder) SetSisuReady(isReady interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSisuReady", reflect.TypeOf((*MockDheartClient)(nil).SetSisuReady), isReady)
}
