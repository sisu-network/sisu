// Code generated by MockGen. DO NOT EDIT.
// Source: x/sisu/validator_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
	types0 "github.com/sisu-network/sisu/x/sisu/types"
)

// MockValidatorManager is a mock of ValidatorManager interface.
type MockValidatorManager struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorManagerMockRecorder
}

// MockValidatorManagerMockRecorder is the mock recorder for MockValidatorManager.
type MockValidatorManagerMockRecorder struct {
	mock *MockValidatorManager
}

// NewMockValidatorManager creates a new mock instance.
func NewMockValidatorManager(ctrl *gomock.Controller) *MockValidatorManager {
	mock := &MockValidatorManager{ctrl: ctrl}
	mock.recorder = &MockValidatorManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorManager) EXPECT() *MockValidatorManagerMockRecorder {
	return m.recorder
}

// AddNode mocks base method.
func (m *MockValidatorManager) AddNode(ctx types.Context, node *types0.Node) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNode", ctx, node)
}

// AddNode indicates an expected call of AddNode.
func (mr *MockValidatorManagerMockRecorder) AddNode(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNode", reflect.TypeOf((*MockValidatorManager)(nil).AddNode), ctx, node)
}

// CountVote mocks base method.
func (m *MockValidatorManager) CountVote(ctx types.Context, recordHash []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVote", ctx, recordHash)
	ret0, _ := ret[0].(int)
	return ret0
}

// CountVote indicates an expected call of CountVote.
func (mr *MockValidatorManagerMockRecorder) CountVote(ctx, recordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVote", reflect.TypeOf((*MockValidatorManager)(nil).CountVote), ctx, recordHash)
}

// GetExceedSlashThresholdValidators mocks base method.
func (m *MockValidatorManager) GetExceedSlashThresholdValidators(ctx types.Context) ([]*types0.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExceedSlashThresholdValidators", ctx)
	ret0, _ := ret[0].([]*types0.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExceedSlashThresholdValidators indicates an expected call of GetExceedSlashThresholdValidators.
func (mr *MockValidatorManagerMockRecorder) GetExceedSlashThresholdValidators(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExceedSlashThresholdValidators", reflect.TypeOf((*MockValidatorManager)(nil).GetExceedSlashThresholdValidators), ctx)
}

// GetNodesByStatus mocks base method.
func (m *MockValidatorManager) GetNodesByStatus(status types0.NodeStatus) map[string]*types0.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodesByStatus", status)
	ret0, _ := ret[0].(map[string]*types0.Node)
	return ret0
}

// GetNodesByStatus indicates an expected call of GetNodesByStatus.
func (mr *MockValidatorManagerMockRecorder) GetNodesByStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodesByStatus", reflect.TypeOf((*MockValidatorManager)(nil).GetNodesByStatus), status)
}

// GetPotentialCandidates mocks base method.
func (m *MockValidatorManager) GetPotentialCandidates(ctx types.Context, n int) []*types0.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPotentialCandidates", ctx, n)
	ret0, _ := ret[0].([]*types0.Node)
	return ret0
}

// GetPotentialCandidates indicates an expected call of GetPotentialCandidates.
func (mr *MockValidatorManagerMockRecorder) GetPotentialCandidates(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPotentialCandidates", reflect.TypeOf((*MockValidatorManager)(nil).GetPotentialCandidates), ctx, n)
}

// HasConsensus mocks base method.
func (m *MockValidatorManager) HasConsensus(ctx types.Context, recordHash []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasConsensus", ctx, recordHash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasConsensus indicates an expected call of HasConsensus.
func (mr *MockValidatorManagerMockRecorder) HasConsensus(ctx, recordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasConsensus", reflect.TypeOf((*MockValidatorManager)(nil).HasConsensus), ctx, recordHash)
}

// SetValidators mocks base method.
func (m *MockValidatorManager) SetValidators(ctx types.Context, nodes []*types0.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValidators", ctx, nodes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValidators indicates an expected call of SetValidators.
func (mr *MockValidatorManagerMockRecorder) SetValidators(ctx, nodes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValidators", reflect.TypeOf((*MockValidatorManager)(nil).SetValidators), ctx, nodes)
}

// UpdateNodeStatus mocks base method.
func (m *MockValidatorManager) UpdateNodeStatus(ctx types.Context, consensusKey []byte, status types0.NodeStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateNodeStatus", ctx, consensusKey, status)
}

// UpdateNodeStatus indicates an expected call of UpdateNodeStatus.
func (mr *MockValidatorManagerMockRecorder) UpdateNodeStatus(ctx, consensusKey, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeStatus", reflect.TypeOf((*MockValidatorManager)(nil).UpdateNodeStatus), ctx, consensusKey, status)
}
