// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/adjust_eth_nonce.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AdjustEthNonce struct {
	Chain    string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Nonce    int64  `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	MsgIndex uint32 `protobuf:"varint,3,opt,name=msg_index,json=msgIndex,proto3" json:"msg_index,omitempty"`
}

func (m *AdjustEthNonce) Reset()         { *m = AdjustEthNonce{} }
func (m *AdjustEthNonce) String() string { return proto.CompactTextString(m) }
func (*AdjustEthNonce) ProtoMessage()    {}
func (*AdjustEthNonce) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b4638665c3dc3e, []int{0}
}
func (m *AdjustEthNonce) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdjustEthNonce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdjustEthNonce.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdjustEthNonce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdjustEthNonce.Merge(m, src)
}
func (m *AdjustEthNonce) XXX_Size() int {
	return m.Size()
}
func (m *AdjustEthNonce) XXX_DiscardUnknown() {
	xxx_messageInfo_AdjustEthNonce.DiscardUnknown(m)
}

var xxx_messageInfo_AdjustEthNonce proto.InternalMessageInfo

func (m *AdjustEthNonce) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *AdjustEthNonce) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *AdjustEthNonce) GetMsgIndex() uint32 {
	if m != nil {
		return m.MsgIndex
	}
	return 0
}

type AdjustEthNonceMsg struct {
	Signer string          `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Data   *AdjustEthNonce `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AdjustEthNonceMsg) Reset()         { *m = AdjustEthNonceMsg{} }
func (m *AdjustEthNonceMsg) String() string { return proto.CompactTextString(m) }
func (*AdjustEthNonceMsg) ProtoMessage()    {}
func (*AdjustEthNonceMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_09b4638665c3dc3e, []int{1}
}
func (m *AdjustEthNonceMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdjustEthNonceMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdjustEthNonceMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdjustEthNonceMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdjustEthNonceMsg.Merge(m, src)
}
func (m *AdjustEthNonceMsg) XXX_Size() int {
	return m.Size()
}
func (m *AdjustEthNonceMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_AdjustEthNonceMsg.DiscardUnknown(m)
}

var xxx_messageInfo_AdjustEthNonceMsg proto.InternalMessageInfo

func (m *AdjustEthNonceMsg) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *AdjustEthNonceMsg) GetData() *AdjustEthNonce {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*AdjustEthNonce)(nil), "types.AdjustEthNonce")
	proto.RegisterType((*AdjustEthNonceMsg)(nil), "types.AdjustEthNonceMsg")
}

func init() { proto.RegisterFile("sisu/adjust_eth_nonce.proto", fileDescriptor_09b4638665c3dc3e) }

var fileDescriptor_09b4638665c3dc3e = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0xce, 0x2c, 0x2e,
	0xd5, 0x4f, 0x4c, 0xc9, 0x2a, 0x2d, 0x2e, 0x89, 0x4f, 0x2d, 0xc9, 0x88, 0xcf, 0xcb, 0xcf, 0x4b,
	0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x56, 0x8a,
	0xe4, 0xe2, 0x73, 0x04, 0x2b, 0x70, 0x2d, 0xc9, 0xf0, 0x03, 0x49, 0x0b, 0x89, 0x70, 0xb1, 0x26,
	0x67, 0x24, 0x66, 0xe6, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x38, 0x20, 0x51, 0xb0,
	0x6e, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x08, 0x47, 0x48, 0x9a, 0x8b, 0x33, 0xb7, 0x38,
	0x3d, 0x3e, 0x33, 0x2f, 0x25, 0xb5, 0x42, 0x82, 0x59, 0x81, 0x51, 0x83, 0x37, 0x88, 0x23, 0xb7,
	0x38, 0xdd, 0x13, 0xc4, 0x57, 0x0a, 0xe3, 0x12, 0x44, 0x35, 0xda, 0xb7, 0x38, 0x5d, 0x48, 0x8c,
	0x8b, 0xad, 0x38, 0x33, 0x3d, 0x2f, 0xb5, 0x08, 0x6a, 0x3c, 0x94, 0x27, 0xa4, 0xc9, 0xc5, 0x92,
	0x92, 0x58, 0x92, 0x08, 0x36, 0x9e, 0xdb, 0x48, 0x54, 0x0f, 0xec, 0x3a, 0x3d, 0x54, 0xfd, 0x41,
	0x60, 0x25, 0x4e, 0xce, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c,
	0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x99,
	0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0xf2, 0xbb, 0x6e, 0x5e, 0x6a,
	0x49, 0x79, 0x7e, 0x51, 0x36, 0x98, 0xa3, 0x5f, 0x01, 0xa1, 0xc0, 0x26, 0x27, 0xb1, 0x81, 0x43,
	0xc1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x00, 0x6d, 0x58, 0x46, 0x24, 0x01, 0x00, 0x00,
}

func (m *AdjustEthNonce) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdjustEthNonce) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdjustEthNonce) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgIndex != 0 {
		i = encodeVarintAdjustEthNonce(dAtA, i, uint64(m.MsgIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.Nonce != 0 {
		i = encodeVarintAdjustEthNonce(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintAdjustEthNonce(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdjustEthNonceMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdjustEthNonceMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdjustEthNonceMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAdjustEthNonce(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintAdjustEthNonce(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAdjustEthNonce(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdjustEthNonce(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AdjustEthNonce) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovAdjustEthNonce(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovAdjustEthNonce(uint64(m.Nonce))
	}
	if m.MsgIndex != 0 {
		n += 1 + sovAdjustEthNonce(uint64(m.MsgIndex))
	}
	return n
}

func (m *AdjustEthNonceMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovAdjustEthNonce(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAdjustEthNonce(uint64(l))
	}
	return n
}

func sovAdjustEthNonce(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAdjustEthNonce(x uint64) (n int) {
	return sovAdjustEthNonce(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdjustEthNonce) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdjustEthNonce
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdjustEthNonce: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdjustEthNonce: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdjustEthNonce
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdjustEthNonce
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdjustEthNonce
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdjustEthNonce
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIndex", wireType)
			}
			m.MsgIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdjustEthNonce
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdjustEthNonce(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdjustEthNonce
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdjustEthNonceMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdjustEthNonce
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdjustEthNonceMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdjustEthNonceMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdjustEthNonce
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdjustEthNonce
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAdjustEthNonce
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdjustEthNonce
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdjustEthNonce
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAdjustEthNonce
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AdjustEthNonce{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdjustEthNonce(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAdjustEthNonce
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdjustEthNonce(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdjustEthNonce
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdjustEthNonce
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdjustEthNonce
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdjustEthNonce
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAdjustEthNonce
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAdjustEthNonce
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAdjustEthNonce        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdjustEthNonce          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAdjustEthNonce = fmt.Errorf("proto: unexpected end of group")
)
