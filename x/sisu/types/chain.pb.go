// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/chain.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Chain struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NativeToken string `protobuf:"bytes,2,opt,name=native_token,json=nativeToken,proto3" json:"native_token,omitempty"`
	// For ETH
	EthConfig *ChainEthConfig `protobuf:"bytes,3,opt,name=eth_config,json=ethConfig,proto3" json:"eth_config,omitempty"`
}

func (m *Chain) Reset()         { *m = Chain{} }
func (m *Chain) String() string { return proto.CompactTextString(m) }
func (*Chain) ProtoMessage()    {}
func (*Chain) Descriptor() ([]byte, []int) {
	return fileDescriptor_2acb498b6fc611bc, []int{0}
}
func (m *Chain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chain.Merge(m, src)
}
func (m *Chain) XXX_Size() int {
	return m.Size()
}
func (m *Chain) XXX_DiscardUnknown() {
	xxx_messageInfo_Chain.DiscardUnknown(m)
}

var xxx_messageInfo_Chain proto.InternalMessageInfo

func (m *Chain) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Chain) GetNativeToken() string {
	if m != nil {
		return m.NativeToken
	}
	return ""
}

func (m *Chain) GetEthConfig() *ChainEthConfig {
	if m != nil {
		return m.EthConfig
	}
	return nil
}

type ChainEthConfig struct {
	UseEip_1559 bool  `protobuf:"varint,1,opt,name=use_eip_1559,json=useEip1559,proto3" json:"use_eip_1559,omitempty"`
	GasPrice    int64 `protobuf:"varint,2,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	BaseFee     int64 `protobuf:"varint,3,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty"`
	Tip         int64 `protobuf:"varint,4,opt,name=tip,proto3" json:"tip,omitempty"`
}

func (m *ChainEthConfig) Reset()         { *m = ChainEthConfig{} }
func (m *ChainEthConfig) String() string { return proto.CompactTextString(m) }
func (*ChainEthConfig) ProtoMessage()    {}
func (*ChainEthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2acb498b6fc611bc, []int{1}
}
func (m *ChainEthConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainEthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainEthConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainEthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainEthConfig.Merge(m, src)
}
func (m *ChainEthConfig) XXX_Size() int {
	return m.Size()
}
func (m *ChainEthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainEthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ChainEthConfig proto.InternalMessageInfo

func (m *ChainEthConfig) GetUseEip_1559() bool {
	if m != nil {
		return m.UseEip_1559
	}
	return false
}

func (m *ChainEthConfig) GetGasPrice() int64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *ChainEthConfig) GetBaseFee() int64 {
	if m != nil {
		return m.BaseFee
	}
	return 0
}

func (m *ChainEthConfig) GetTip() int64 {
	if m != nil {
		return m.Tip
	}
	return 0
}

func init() {
	proto.RegisterType((*Chain)(nil), "types.Chain")
	proto.RegisterType((*ChainEthConfig)(nil), "types.ChainEthConfig")
}

func init() { proto.RegisterFile("sisu/chain.proto", fileDescriptor_2acb498b6fc611bc) }

var fileDescriptor_2acb498b6fc611bc = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x3b, 0x8d, 0xd5, 0xf6, 0xb6, 0x94, 0x32, 0x20, 0x44, 0x84, 0x21, 0x76, 0x55, 0x17,
	0x26, 0xf8, 0xd3, 0x85, 0x5b, 0x43, 0x5d, 0x4b, 0x70, 0xe5, 0x66, 0x48, 0xd2, 0xdb, 0x64, 0x28,
	0x66, 0x86, 0xcc, 0xc4, 0x1f, 0xf0, 0x21, 0x7c, 0x2c, 0x97, 0x5d, 0xba, 0x94, 0xe4, 0x45, 0x64,
	0xa6, 0xb8, 0x70, 0x35, 0xf7, 0x7c, 0x07, 0x0e, 0x67, 0x0e, 0xcc, 0xb4, 0xd0, 0x4d, 0x94, 0x97,
	0xa9, 0xa8, 0x42, 0x55, 0x4b, 0x23, 0xe9, 0xc0, 0xbc, 0x2b, 0xd4, 0x73, 0x05, 0x83, 0xd8, 0x52,
	0x3a, 0x85, 0xbe, 0x58, 0xfb, 0x24, 0x20, 0x8b, 0x51, 0xd2, 0x17, 0x6b, 0x7a, 0x06, 0x93, 0x2a,
	0x35, 0xe2, 0x05, 0xb9, 0x91, 0x5b, 0xac, 0xfc, 0xbe, 0x73, 0xc6, 0x7b, 0xf6, 0x68, 0x11, 0xbd,
	0x01, 0x40, 0x53, 0xf2, 0x5c, 0x56, 0x1b, 0x51, 0xf8, 0x5e, 0x40, 0x16, 0xe3, 0xab, 0xe3, 0xd0,
	0xe5, 0x86, 0x2e, 0x74, 0x65, 0xca, 0xd8, 0x99, 0xc9, 0x08, 0xff, 0xce, 0xf9, 0x07, 0x4c, 0xff,
	0x9b, 0x34, 0x80, 0x49, 0xa3, 0x91, 0xa3, 0x50, 0xfc, 0x72, 0xb9, 0xbc, 0x75, 0x25, 0x86, 0x09,
	0x34, 0x1a, 0x57, 0x42, 0x59, 0x42, 0x4f, 0x61, 0x54, 0xa4, 0x9a, 0xab, 0x5a, 0xe4, 0xe8, 0x9a,
	0x78, 0xc9, 0xb0, 0x48, 0xf5, 0x83, 0xd5, 0xf4, 0x04, 0x86, 0x59, 0xaa, 0x91, 0x6f, 0x10, 0x5d,
	0x09, 0x2f, 0x39, 0xb2, 0xfa, 0x1e, 0x91, 0xce, 0xc0, 0x33, 0x42, 0xf9, 0x07, 0x8e, 0xda, 0xf3,
	0x2e, 0xfe, 0x6a, 0x19, 0xd9, 0xb5, 0x8c, 0xfc, 0xb4, 0x8c, 0x7c, 0x76, 0xac, 0xb7, 0xeb, 0x58,
	0xef, 0xbb, 0x63, 0xbd, 0xa7, 0xf3, 0x42, 0x98, 0xb2, 0xc9, 0xc2, 0x5c, 0x3e, 0x47, 0x76, 0xad,
	0x8b, 0x0a, 0xcd, 0xab, 0xac, 0xb7, 0x4e, 0x44, 0x6f, 0xfb, 0xc7, 0x7d, 0x2e, 0x3b, 0x74, 0x13,
	0x5e, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x26, 0x3c, 0xd0, 0x56, 0x01, 0x00, 0x00,
}

func (m *Chain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EthConfig != nil {
		{
			size, err := m.EthConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NativeToken) > 0 {
		i -= len(m.NativeToken)
		copy(dAtA[i:], m.NativeToken)
		i = encodeVarintChain(dAtA, i, uint64(len(m.NativeToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintChain(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainEthConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainEthConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainEthConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tip != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.Tip))
		i--
		dAtA[i] = 0x20
	}
	if m.BaseFee != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.BaseFee))
		i--
		dAtA[i] = 0x18
	}
	if m.GasPrice != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.GasPrice))
		i--
		dAtA[i] = 0x10
	}
	if m.UseEip_1559 {
		i--
		if m.UseEip_1559 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintChain(dAtA []byte, offset int, v uint64) int {
	offset -= sovChain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Chain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	l = len(m.NativeToken)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	if m.EthConfig != nil {
		l = m.EthConfig.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	return n
}

func (m *ChainEthConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UseEip_1559 {
		n += 2
	}
	if m.GasPrice != 0 {
		n += 1 + sovChain(uint64(m.GasPrice))
	}
	if m.BaseFee != 0 {
		n += 1 + sovChain(uint64(m.BaseFee))
	}
	if m.Tip != 0 {
		n += 1 + sovChain(uint64(m.Tip))
	}
	return n
}

func sovChain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChain(x uint64) (n int) {
	return sovChain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Chain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EthConfig == nil {
				m.EthConfig = &ChainEthConfig{}
			}
			if err := m.EthConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainEthConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainEthConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainEthConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseEip_1559", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseEip_1559 = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFee", wireType)
			}
			m.BaseFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tip", wireType)
			}
			m.Tip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tip |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChain = fmt.Errorf("proto: unexpected end of group")
)
