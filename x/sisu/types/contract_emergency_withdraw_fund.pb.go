// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/contract_emergency_withdraw_fund.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EmergencyWithdrawFundMsg struct {
	Signer string        `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Data   *WithdrawFund `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *EmergencyWithdrawFundMsg) Reset()         { *m = EmergencyWithdrawFundMsg{} }
func (m *EmergencyWithdrawFundMsg) String() string { return proto.CompactTextString(m) }
func (*EmergencyWithdrawFundMsg) ProtoMessage()    {}
func (*EmergencyWithdrawFundMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e188172930001bc2, []int{0}
}
func (m *EmergencyWithdrawFundMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmergencyWithdrawFundMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmergencyWithdrawFundMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmergencyWithdrawFundMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmergencyWithdrawFundMsg.Merge(m, src)
}
func (m *EmergencyWithdrawFundMsg) XXX_Size() int {
	return m.Size()
}
func (m *EmergencyWithdrawFundMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_EmergencyWithdrawFundMsg.DiscardUnknown(m)
}

var xxx_messageInfo_EmergencyWithdrawFundMsg proto.InternalMessageInfo

func (m *EmergencyWithdrawFundMsg) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *EmergencyWithdrawFundMsg) GetData() *WithdrawFund {
	if m != nil {
		return m.Data
	}
	return nil
}

type WithdrawFund struct {
	Chain          string   `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Hash           string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	TokenAddresses []string `protobuf:"bytes,3,rep,name=tokenAddresses,proto3" json:"tokenAddresses,omitempty"`
	NewOwner       string   `protobuf:"bytes,4,opt,name=newOwner,proto3" json:"newOwner,omitempty"`
	Index          int32    `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *WithdrawFund) Reset()         { *m = WithdrawFund{} }
func (m *WithdrawFund) String() string { return proto.CompactTextString(m) }
func (*WithdrawFund) ProtoMessage()    {}
func (*WithdrawFund) Descriptor() ([]byte, []int) {
	return fileDescriptor_e188172930001bc2, []int{1}
}
func (m *WithdrawFund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawFund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawFund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawFund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawFund.Merge(m, src)
}
func (m *WithdrawFund) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawFund) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawFund.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawFund proto.InternalMessageInfo

func (m *WithdrawFund) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *WithdrawFund) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *WithdrawFund) GetTokenAddresses() []string {
	if m != nil {
		return m.TokenAddresses
	}
	return nil
}

func (m *WithdrawFund) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

func (m *WithdrawFund) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*EmergencyWithdrawFundMsg)(nil), "types.EmergencyWithdrawFundMsg")
	proto.RegisterType((*WithdrawFund)(nil), "types.WithdrawFund")
}

func init() {
	proto.RegisterFile("sisu/contract_emergency_withdraw_fund.proto", fileDescriptor_e188172930001bc2)
}

var fileDescriptor_e188172930001bc2 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x1c, 0xc6, 0x17, 0xb7, 0x0e, 0x17, 0xc5, 0x43, 0x14, 0x29, 0x1e, 0x42, 0xd9, 0x41, 0x2b, 0x62,
	0x0b, 0xfa, 0x04, 0x2a, 0x7a, 0x13, 0xa1, 0x17, 0x41, 0x0f, 0x25, 0x6b, 0xfe, 0xb6, 0x61, 0x2c,
	0x19, 0x49, 0x4a, 0xb7, 0xb7, 0x10, 0x9f, 0xca, 0xe3, 0x8e, 0x1e, 0xa5, 0x7d, 0x11, 0x69, 0x5a,
	0x65, 0x78, 0x4a, 0x7e, 0x7f, 0xbe, 0xef, 0x4b, 0xfe, 0x1f, 0xbe, 0x30, 0xc2, 0x94, 0x71, 0xa6,
	0xa4, 0xd5, 0x2c, 0xb3, 0x29, 0x2c, 0x40, 0xe7, 0x20, 0xb3, 0x75, 0x5a, 0x09, 0x5b, 0x70, 0xcd,
	0xaa, 0xf4, 0xad, 0x94, 0x3c, 0x5a, 0x6a, 0x65, 0x15, 0xf1, 0xec, 0x7a, 0x09, 0x66, 0xfa, 0x8a,
	0xfd, 0xfb, 0x5f, 0xdd, 0x73, 0x2f, 0x7b, 0x28, 0x25, 0x7f, 0x34, 0x39, 0x39, 0xc6, 0x63, 0x23,
	0x72, 0x09, 0xda, 0x47, 0x01, 0x0a, 0x27, 0x49, 0x4f, 0xe4, 0x0c, 0x8f, 0x38, 0xb3, 0xcc, 0xdf,
	0x09, 0x50, 0xb8, 0x77, 0x75, 0x18, 0xb9, 0xa4, 0x68, 0xdb, 0x9d, 0x38, 0xc1, 0xf4, 0x03, 0xe1,
	0xfd, 0xed, 0x31, 0x39, 0xc2, 0x5e, 0x56, 0x30, 0x21, 0xfb, 0xc0, 0x0e, 0x08, 0xc1, 0xa3, 0x82,
	0x99, 0xc2, 0xe5, 0x4d, 0x12, 0x77, 0x27, 0xa7, 0xf8, 0xc0, 0xaa, 0x39, 0xc8, 0x1b, 0xce, 0x35,
	0x18, 0x03, 0xc6, 0x1f, 0x06, 0xc3, 0x70, 0x92, 0xfc, 0x9b, 0x92, 0x13, 0xbc, 0x2b, 0xa1, 0x7a,
	0xaa, 0xda, 0x5f, 0x8e, 0x9c, 0xff, 0x8f, 0xdb, 0xd7, 0x84, 0xe4, 0xb0, 0xf2, 0xbd, 0x00, 0x85,
	0x5e, 0xd2, 0xc1, 0xed, 0xdd, 0x67, 0x4d, 0xd1, 0xa6, 0xa6, 0xe8, 0xbb, 0xa6, 0xe8, 0xbd, 0xa1,
	0x83, 0x4d, 0x43, 0x07, 0x5f, 0x0d, 0x1d, 0xbc, 0x9c, 0xe7, 0xc2, 0x16, 0xe5, 0x2c, 0xca, 0xd4,
	0x22, 0x6e, 0xab, 0xbc, 0x94, 0x60, 0x2b, 0xa5, 0xe7, 0x0e, 0xe2, 0x55, 0x77, 0xb8, 0x65, 0x67,
	0x63, 0x57, 0xe2, 0xf5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x95, 0xdc, 0xb8, 0xf1, 0x73, 0x01,
	0x00, 0x00,
}

func (m *EmergencyWithdrawFundMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmergencyWithdrawFundMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmergencyWithdrawFundMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContractEmergencyWithdrawFund(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintContractEmergencyWithdrawFund(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawFund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawFund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawFund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintContractEmergencyWithdrawFund(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintContractEmergencyWithdrawFund(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenAddresses) > 0 {
		for iNdEx := len(m.TokenAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenAddresses[iNdEx])
			copy(dAtA[i:], m.TokenAddresses[iNdEx])
			i = encodeVarintContractEmergencyWithdrawFund(dAtA, i, uint64(len(m.TokenAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintContractEmergencyWithdrawFund(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintContractEmergencyWithdrawFund(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContractEmergencyWithdrawFund(dAtA []byte, offset int, v uint64) int {
	offset -= sovContractEmergencyWithdrawFund(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EmergencyWithdrawFundMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovContractEmergencyWithdrawFund(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovContractEmergencyWithdrawFund(uint64(l))
	}
	return n
}

func (m *WithdrawFund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovContractEmergencyWithdrawFund(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovContractEmergencyWithdrawFund(uint64(l))
	}
	if len(m.TokenAddresses) > 0 {
		for _, s := range m.TokenAddresses {
			l = len(s)
			n += 1 + l + sovContractEmergencyWithdrawFund(uint64(l))
		}
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovContractEmergencyWithdrawFund(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovContractEmergencyWithdrawFund(uint64(m.Index))
	}
	return n
}

func sovContractEmergencyWithdrawFund(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContractEmergencyWithdrawFund(x uint64) (n int) {
	return sovContractEmergencyWithdrawFund(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmergencyWithdrawFundMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractEmergencyWithdrawFund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmergencyWithdrawFundMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmergencyWithdrawFundMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractEmergencyWithdrawFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractEmergencyWithdrawFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractEmergencyWithdrawFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractEmergencyWithdrawFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContractEmergencyWithdrawFund
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContractEmergencyWithdrawFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &WithdrawFund{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContractEmergencyWithdrawFund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractEmergencyWithdrawFund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawFund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractEmergencyWithdrawFund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawFund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawFund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractEmergencyWithdrawFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractEmergencyWithdrawFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractEmergencyWithdrawFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractEmergencyWithdrawFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractEmergencyWithdrawFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractEmergencyWithdrawFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractEmergencyWithdrawFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractEmergencyWithdrawFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractEmergencyWithdrawFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddresses = append(m.TokenAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractEmergencyWithdrawFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractEmergencyWithdrawFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractEmergencyWithdrawFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractEmergencyWithdrawFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContractEmergencyWithdrawFund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractEmergencyWithdrawFund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContractEmergencyWithdrawFund(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContractEmergencyWithdrawFund
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContractEmergencyWithdrawFund
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContractEmergencyWithdrawFund
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContractEmergencyWithdrawFund
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContractEmergencyWithdrawFund
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContractEmergencyWithdrawFund
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContractEmergencyWithdrawFund        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContractEmergencyWithdrawFund          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContractEmergencyWithdrawFund = fmt.Errorf("proto: unexpected end of group")
)
