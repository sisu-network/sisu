// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/contract_liquidity_withdraw_fund.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LiquidityWithdrawFundMsg struct {
	Signer string                 `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Data   *LiquidityWithdrawFund `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *LiquidityWithdrawFundMsg) Reset()         { *m = LiquidityWithdrawFundMsg{} }
func (m *LiquidityWithdrawFundMsg) String() string { return proto.CompactTextString(m) }
func (*LiquidityWithdrawFundMsg) ProtoMessage()    {}
func (*LiquidityWithdrawFundMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_daabb34264755ca3, []int{0}
}
func (m *LiquidityWithdrawFundMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityWithdrawFundMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityWithdrawFundMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityWithdrawFundMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityWithdrawFundMsg.Merge(m, src)
}
func (m *LiquidityWithdrawFundMsg) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityWithdrawFundMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityWithdrawFundMsg.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityWithdrawFundMsg proto.InternalMessageInfo

func (m *LiquidityWithdrawFundMsg) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *LiquidityWithdrawFundMsg) GetData() *LiquidityWithdrawFund {
	if m != nil {
		return m.Data
	}
	return nil
}

type LiquidityWithdrawFund struct {
	Chain          string   `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Hash           string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	TokenAddresses []string `protobuf:"bytes,3,rep,name=tokenAddresses,proto3" json:"tokenAddresses,omitempty"`
	NewOwner       string   `protobuf:"bytes,4,opt,name=newOwner,proto3" json:"newOwner,omitempty"`
	Index          int32    `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *LiquidityWithdrawFund) Reset()         { *m = LiquidityWithdrawFund{} }
func (m *LiquidityWithdrawFund) String() string { return proto.CompactTextString(m) }
func (*LiquidityWithdrawFund) ProtoMessage()    {}
func (*LiquidityWithdrawFund) Descriptor() ([]byte, []int) {
	return fileDescriptor_daabb34264755ca3, []int{1}
}
func (m *LiquidityWithdrawFund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityWithdrawFund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityWithdrawFund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityWithdrawFund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityWithdrawFund.Merge(m, src)
}
func (m *LiquidityWithdrawFund) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityWithdrawFund) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityWithdrawFund.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityWithdrawFund proto.InternalMessageInfo

func (m *LiquidityWithdrawFund) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *LiquidityWithdrawFund) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *LiquidityWithdrawFund) GetTokenAddresses() []string {
	if m != nil {
		return m.TokenAddresses
	}
	return nil
}

func (m *LiquidityWithdrawFund) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

func (m *LiquidityWithdrawFund) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*LiquidityWithdrawFundMsg)(nil), "types.LiquidityWithdrawFundMsg")
	proto.RegisterType((*LiquidityWithdrawFund)(nil), "types.LiquidityWithdrawFund")
}

func init() {
	proto.RegisterFile("sisu/contract_liquidity_withdraw_fund.proto", fileDescriptor_daabb34264755ca3)
}

var fileDescriptor_daabb34264755ca3 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4a, 0xc4, 0x30,
	0x1c, 0xc6, 0x2f, 0x5e, 0x7b, 0xd8, 0x08, 0x0e, 0x41, 0xa5, 0x88, 0x84, 0x72, 0x83, 0x54, 0xc4,
	0x56, 0xf4, 0x09, 0x54, 0x70, 0x52, 0x84, 0x2e, 0x82, 0x4b, 0xc9, 0x35, 0xb1, 0x0d, 0xa7, 0xc9,
	0x99, 0xa4, 0xe4, 0xee, 0x2d, 0xdc, 0x7d, 0x21, 0xc7, 0x1b, 0x1d, 0xa5, 0x7d, 0x11, 0x69, 0x5a,
	0x1d, 0xe4, 0xa6, 0xe4, 0x97, 0x7c, 0xf9, 0xbe, 0xfc, 0x3f, 0x78, 0xaa, 0xb9, 0xae, 0xd3, 0x42,
	0x0a, 0xa3, 0x48, 0x61, 0xf2, 0x17, 0xfe, 0x56, 0x73, 0xca, 0xcd, 0x2a, 0xb7, 0xdc, 0x54, 0x54,
	0x11, 0x9b, 0x3f, 0xd7, 0x82, 0x26, 0x0b, 0x25, 0x8d, 0x44, 0xbe, 0x59, 0x2d, 0x98, 0x9e, 0x52,
	0x18, 0xde, 0xfd, 0xea, 0x1e, 0x07, 0xd9, 0x6d, 0x2d, 0xe8, 0xbd, 0x2e, 0xd1, 0x01, 0x9c, 0x68,
	0x5e, 0x0a, 0xa6, 0x42, 0x10, 0x81, 0x38, 0xc8, 0x06, 0x42, 0xe7, 0xd0, 0xa3, 0xc4, 0x90, 0x70,
	0x2b, 0x02, 0xf1, 0xce, 0xc5, 0x51, 0xe2, 0x9c, 0x92, 0x8d, 0x36, 0x99, 0x53, 0x4e, 0x3f, 0x00,
	0xdc, 0xdf, 0x78, 0x8f, 0xf6, 0xa0, 0x5f, 0x54, 0x84, 0x8b, 0x21, 0xa2, 0x07, 0x84, 0xa0, 0x57,
	0x11, 0x5d, 0xb9, 0x84, 0x20, 0x73, 0x7b, 0x74, 0x0c, 0x77, 0x8d, 0x9c, 0x33, 0x71, 0x45, 0xa9,
	0x62, 0x5a, 0x33, 0x1d, 0x8e, 0xa3, 0x71, 0x1c, 0x64, 0xff, 0x4e, 0xd1, 0x21, 0xdc, 0x16, 0xcc,
	0x3e, 0xd8, 0xee, 0xdf, 0x9e, 0x7b, 0xff, 0xc7, 0x5d, 0x1a, 0x17, 0x94, 0x2d, 0x43, 0x3f, 0x02,
	0xb1, 0x9f, 0xf5, 0x70, 0x7d, 0xf3, 0xd9, 0x60, 0xb0, 0x6e, 0x30, 0xf8, 0x6e, 0x30, 0x78, 0x6f,
	0xf1, 0x68, 0xdd, 0xe2, 0xd1, 0x57, 0x8b, 0x47, 0x4f, 0x27, 0x25, 0x37, 0x55, 0x3d, 0x4b, 0x0a,
	0xf9, 0x9a, 0x76, 0xe5, 0x9e, 0x09, 0x66, 0xac, 0x54, 0x73, 0x07, 0xe9, 0xb2, 0x5f, 0xdc, 0xf8,
	0xb3, 0x89, 0xab, 0xf5, 0xf2, 0x27, 0x00, 0x00, 0xff, 0xff, 0x04, 0x27, 0xd1, 0xe6, 0x85, 0x01,
	0x00, 0x00,
}

func (m *LiquidityWithdrawFundMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityWithdrawFundMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityWithdrawFundMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContractLiquidityWithdrawFund(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintContractLiquidityWithdrawFund(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityWithdrawFund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityWithdrawFund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityWithdrawFund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintContractLiquidityWithdrawFund(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintContractLiquidityWithdrawFund(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenAddresses) > 0 {
		for iNdEx := len(m.TokenAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenAddresses[iNdEx])
			copy(dAtA[i:], m.TokenAddresses[iNdEx])
			i = encodeVarintContractLiquidityWithdrawFund(dAtA, i, uint64(len(m.TokenAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintContractLiquidityWithdrawFund(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintContractLiquidityWithdrawFund(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContractLiquidityWithdrawFund(dAtA []byte, offset int, v uint64) int {
	offset -= sovContractLiquidityWithdrawFund(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LiquidityWithdrawFundMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovContractLiquidityWithdrawFund(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovContractLiquidityWithdrawFund(uint64(l))
	}
	return n
}

func (m *LiquidityWithdrawFund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovContractLiquidityWithdrawFund(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovContractLiquidityWithdrawFund(uint64(l))
	}
	if len(m.TokenAddresses) > 0 {
		for _, s := range m.TokenAddresses {
			l = len(s)
			n += 1 + l + sovContractLiquidityWithdrawFund(uint64(l))
		}
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovContractLiquidityWithdrawFund(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovContractLiquidityWithdrawFund(uint64(m.Index))
	}
	return n
}

func sovContractLiquidityWithdrawFund(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContractLiquidityWithdrawFund(x uint64) (n int) {
	return sovContractLiquidityWithdrawFund(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiquidityWithdrawFundMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractLiquidityWithdrawFund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityWithdrawFundMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityWithdrawFundMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractLiquidityWithdrawFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractLiquidityWithdrawFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractLiquidityWithdrawFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractLiquidityWithdrawFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContractLiquidityWithdrawFund
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContractLiquidityWithdrawFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &LiquidityWithdrawFund{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContractLiquidityWithdrawFund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractLiquidityWithdrawFund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityWithdrawFund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractLiquidityWithdrawFund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityWithdrawFund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityWithdrawFund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractLiquidityWithdrawFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractLiquidityWithdrawFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractLiquidityWithdrawFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractLiquidityWithdrawFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractLiquidityWithdrawFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractLiquidityWithdrawFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractLiquidityWithdrawFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractLiquidityWithdrawFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractLiquidityWithdrawFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAddresses = append(m.TokenAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractLiquidityWithdrawFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractLiquidityWithdrawFund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractLiquidityWithdrawFund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractLiquidityWithdrawFund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContractLiquidityWithdrawFund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractLiquidityWithdrawFund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContractLiquidityWithdrawFund(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContractLiquidityWithdrawFund
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContractLiquidityWithdrawFund
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContractLiquidityWithdrawFund
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContractLiquidityWithdrawFund
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContractLiquidityWithdrawFund
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContractLiquidityWithdrawFund
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContractLiquidityWithdrawFund        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContractLiquidityWithdrawFund          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContractLiquidityWithdrawFund = fmt.Errorf("proto: unexpected end of group")
)
