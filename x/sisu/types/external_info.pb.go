// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/external_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExternalInfoMsg struct {
	Signer string            `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Data   *ExternalInfoData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ExternalInfoMsg) Reset()         { *m = ExternalInfoMsg{} }
func (m *ExternalInfoMsg) String() string { return proto.CompactTextString(m) }
func (*ExternalInfoMsg) ProtoMessage()    {}
func (*ExternalInfoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_631666387cd0123d, []int{0}
}
func (m *ExternalInfoMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalInfoMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalInfoMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalInfoMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalInfoMsg.Merge(m, src)
}
func (m *ExternalInfoMsg) XXX_Size() int {
	return m.Size()
}
func (m *ExternalInfoMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalInfoMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalInfoMsg proto.InternalMessageInfo

func (m *ExternalInfoMsg) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *ExternalInfoMsg) GetData() *ExternalInfoData {
	if m != nil {
		return m.Data
	}
	return nil
}

type ExternalInfoData struct {
	GasPrice     *GasPrice      `protobuf:"bytes,1,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	BlockHeights []*BlockHeight `protobuf:"bytes,2,rep,name=blockHeights,proto3" json:"blockHeights,omitempty"`
}

func (m *ExternalInfoData) Reset()         { *m = ExternalInfoData{} }
func (m *ExternalInfoData) String() string { return proto.CompactTextString(m) }
func (*ExternalInfoData) ProtoMessage()    {}
func (*ExternalInfoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_631666387cd0123d, []int{1}
}
func (m *ExternalInfoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalInfoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExternalInfoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExternalInfoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalInfoData.Merge(m, src)
}
func (m *ExternalInfoData) XXX_Size() int {
	return m.Size()
}
func (m *ExternalInfoData) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalInfoData.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalInfoData proto.InternalMessageInfo

func (m *ExternalInfoData) GetGasPrice() *GasPrice {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *ExternalInfoData) GetBlockHeights() []*BlockHeight {
	if m != nil {
		return m.BlockHeights
	}
	return nil
}

type GasPrice struct {
	Chains      []string `protobuf:"bytes,2,rep,name=chains,proto3" json:"chains,omitempty"`
	BlockHeight int64    `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Prices      []int64  `protobuf:"varint,4,rep,packed,name=prices,proto3" json:"prices,omitempty"`
}

func (m *GasPrice) Reset()         { *m = GasPrice{} }
func (m *GasPrice) String() string { return proto.CompactTextString(m) }
func (*GasPrice) ProtoMessage()    {}
func (*GasPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_631666387cd0123d, []int{2}
}
func (m *GasPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasPrice.Merge(m, src)
}
func (m *GasPrice) XXX_Size() int {
	return m.Size()
}
func (m *GasPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_GasPrice.DiscardUnknown(m)
}

var xxx_messageInfo_GasPrice proto.InternalMessageInfo

func (m *GasPrice) GetChains() []string {
	if m != nil {
		return m.Chains
	}
	return nil
}

func (m *GasPrice) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *GasPrice) GetPrices() []int64 {
	if m != nil {
		return m.Prices
	}
	return nil
}

type BlockHeight struct {
	Chain  string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Height int64  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Hash   string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *BlockHeight) Reset()         { *m = BlockHeight{} }
func (m *BlockHeight) String() string { return proto.CompactTextString(m) }
func (*BlockHeight) ProtoMessage()    {}
func (*BlockHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_631666387cd0123d, []int{3}
}
func (m *BlockHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeight.Merge(m, src)
}
func (m *BlockHeight) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeight.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeight proto.InternalMessageInfo

func (m *BlockHeight) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *BlockHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeight) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*ExternalInfoMsg)(nil), "types.ExternalInfoMsg")
	proto.RegisterType((*ExternalInfoData)(nil), "types.ExternalInfoData")
	proto.RegisterType((*GasPrice)(nil), "types.GasPrice")
	proto.RegisterType((*BlockHeight)(nil), "types.BlockHeight")
}

func init() { proto.RegisterFile("sisu/external_info.proto", fileDescriptor_631666387cd0123d) }

var fileDescriptor_631666387cd0123d = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0x4a, 0x33, 0x31,
	0x14, 0x85, 0x9b, 0xce, 0xb4, 0xb4, 0x77, 0x7e, 0xe8, 0x4f, 0x10, 0xcd, 0x6a, 0x18, 0x66, 0x35,
	0x52, 0x9c, 0x42, 0x05, 0x1f, 0xa0, 0x2a, 0xea, 0x42, 0x94, 0x2c, 0x5c, 0x88, 0x20, 0xe9, 0x98,
	0xce, 0x84, 0xd6, 0xa4, 0x4c, 0x52, 0x5a, 0xdf, 0xc2, 0xc7, 0x72, 0xd9, 0xa5, 0x4b, 0x69, 0x5f,
	0x44, 0x26, 0x8d, 0x3a, 0xba, 0x4a, 0xce, 0xbd, 0xe7, 0x7c, 0x21, 0xf7, 0x02, 0xd1, 0x42, 0x2f,
	0x06, 0x7c, 0x65, 0x78, 0x29, 0xd9, 0xec, 0x51, 0xc8, 0x89, 0x4a, 0xe7, 0xa5, 0x32, 0x0a, 0xb7,
	0xcc, 0xcb, 0x9c, 0xeb, 0xf8, 0x0e, 0x7a, 0xe7, 0xae, 0x7b, 0x25, 0x27, 0xea, 0x5a, 0xe7, 0x78,
	0x1f, 0xda, 0x5a, 0xe4, 0x92, 0x97, 0x04, 0x45, 0x28, 0xe9, 0x52, 0xa7, 0x70, 0x1f, 0xfc, 0x27,
	0x66, 0x18, 0x69, 0x46, 0x28, 0x09, 0x86, 0x07, 0xa9, 0x05, 0xa4, 0xf5, 0xf4, 0x19, 0x33, 0x8c,
	0x5a, 0x53, 0xbc, 0x84, 0xff, 0x7f, 0x3b, 0xb8, 0x0f, 0x9d, 0x9c, 0xe9, 0xdb, 0x52, 0x64, 0xdc,
	0xa2, 0x83, 0x61, 0xcf, 0x41, 0x2e, 0x5c, 0x99, 0x7e, 0x1b, 0xf0, 0x09, 0xfc, 0x1b, 0xcf, 0x54,
	0x36, 0xbd, 0xe4, 0x22, 0x2f, 0x8c, 0x26, 0xcd, 0xc8, 0x4b, 0x82, 0x21, 0x76, 0x81, 0xd1, 0x4f,
	0x8b, 0xfe, 0xf2, 0xc5, 0x0f, 0xd0, 0xf9, 0xa2, 0x55, 0x3f, 0xc9, 0x0a, 0x26, 0xe4, 0x2e, 0xdd,
	0xa5, 0x4e, 0xe1, 0x08, 0x82, 0x5a, 0x86, 0x78, 0x11, 0x4a, 0x3c, 0x5a, 0x2f, 0x55, 0xc9, 0x79,
	0x85, 0xd0, 0xc4, 0x8f, 0xbc, 0xc4, 0xa3, 0x4e, 0xc5, 0x37, 0x10, 0xd4, 0x9e, 0xc6, 0x7b, 0xd0,
	0xb2, 0x48, 0x3b, 0x93, 0x2e, 0xdd, 0x89, 0x2a, 0x5c, 0xd4, 0xc9, 0x4e, 0x61, 0x0c, 0x7e, 0xc1,
	0x74, 0x41, 0x7c, 0x6b, 0xb6, 0xf7, 0xd1, 0xe9, 0xdb, 0x26, 0x44, 0xeb, 0x4d, 0x88, 0x3e, 0x36,
	0x21, 0x7a, 0xdd, 0x86, 0x8d, 0xf5, 0x36, 0x6c, 0xbc, 0x6f, 0xc3, 0xc6, 0xfd, 0x61, 0x2e, 0x4c,
	0xb1, 0x18, 0xa7, 0x99, 0x7a, 0x1e, 0x54, 0x5b, 0x3c, 0x92, 0xdc, 0x2c, 0x55, 0x39, 0xb5, 0x62,
	0xb0, 0xda, 0x1d, 0x76, 0x1a, 0xe3, 0xb6, 0x5d, 0xe9, 0xf1, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd0, 0xa9, 0x7d, 0xe2, 0xee, 0x01, 0x00, 0x00,
}

func (m *ExternalInfoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalInfoMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalInfoMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExternalInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintExternalInfo(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExternalInfoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalInfoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalInfoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHeights) > 0 {
		for iNdEx := len(m.BlockHeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockHeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExternalInfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.GasPrice != nil {
		{
			size, err := m.GasPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExternalInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GasPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prices) > 0 {
		dAtA4 := make([]byte, len(m.Prices)*10)
		var j3 int
		for _, num1 := range m.Prices {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintExternalInfo(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintExternalInfo(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Chains[iNdEx])
			copy(dAtA[i:], m.Chains[iNdEx])
			i = encodeVarintExternalInfo(dAtA, i, uint64(len(m.Chains[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintExternalInfo(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Height != 0 {
		i = encodeVarintExternalInfo(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintExternalInfo(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintExternalInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovExternalInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExternalInfoMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovExternalInfo(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovExternalInfo(uint64(l))
	}
	return n
}

func (m *ExternalInfoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasPrice != nil {
		l = m.GasPrice.Size()
		n += 1 + l + sovExternalInfo(uint64(l))
	}
	if len(m.BlockHeights) > 0 {
		for _, e := range m.BlockHeights {
			l = e.Size()
			n += 1 + l + sovExternalInfo(uint64(l))
		}
	}
	return n
}

func (m *GasPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for _, s := range m.Chains {
			l = len(s)
			n += 1 + l + sovExternalInfo(uint64(l))
		}
	}
	if m.BlockHeight != 0 {
		n += 1 + sovExternalInfo(uint64(m.BlockHeight))
	}
	if len(m.Prices) > 0 {
		l = 0
		for _, e := range m.Prices {
			l += sovExternalInfo(uint64(e))
		}
		n += 1 + sovExternalInfo(uint64(l)) + l
	}
	return n
}

func (m *BlockHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovExternalInfo(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovExternalInfo(uint64(m.Height))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovExternalInfo(uint64(l))
	}
	return n
}

func sovExternalInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExternalInfo(x uint64) (n int) {
	return sovExternalInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExternalInfoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalInfoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalInfoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ExternalInfoData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExternalInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternalInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalInfoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalInfoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalInfoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasPrice == nil {
				m.GasPrice = &GasPrice{}
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeights = append(m.BlockHeights, &BlockHeight{})
			if err := m.BlockHeights[len(m.BlockHeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExternalInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternalInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExternalInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Prices = append(m.Prices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExternalInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthExternalInfo
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthExternalInfo
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Prices) == 0 {
					m.Prices = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExternalInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Prices = append(m.Prices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExternalInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternalInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExternalInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternalInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExternalInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExternalInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExternalInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExternalInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExternalInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExternalInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExternalInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExternalInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExternalInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExternalInfo = fmt.Errorf("proto: unexpected end of group")
)
