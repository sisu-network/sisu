// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/ip_address.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SetDheartIpAddressMsg struct {
	Signer string                  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Data   *SetDheartIPAddressData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SetDheartIpAddressMsg) Reset()         { *m = SetDheartIpAddressMsg{} }
func (m *SetDheartIpAddressMsg) String() string { return proto.CompactTextString(m) }
func (*SetDheartIpAddressMsg) ProtoMessage()    {}
func (*SetDheartIpAddressMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cee243759d6702a, []int{0}
}
func (m *SetDheartIpAddressMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDheartIpAddressMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDheartIpAddressMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDheartIpAddressMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDheartIpAddressMsg.Merge(m, src)
}
func (m *SetDheartIpAddressMsg) XXX_Size() int {
	return m.Size()
}
func (m *SetDheartIpAddressMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDheartIpAddressMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SetDheartIpAddressMsg proto.InternalMessageInfo

func (m *SetDheartIpAddressMsg) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *SetDheartIpAddressMsg) GetData() *SetDheartIPAddressData {
	if m != nil {
		return m.Data
	}
	return nil
}

type SetDheartIPAddressData struct {
	IPAddress string `protobuf:"bytes,3,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
}

func (m *SetDheartIPAddressData) Reset()         { *m = SetDheartIPAddressData{} }
func (m *SetDheartIPAddressData) String() string { return proto.CompactTextString(m) }
func (*SetDheartIPAddressData) ProtoMessage()    {}
func (*SetDheartIPAddressData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cee243759d6702a, []int{1}
}
func (m *SetDheartIPAddressData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDheartIPAddressData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDheartIPAddressData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDheartIPAddressData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDheartIPAddressData.Merge(m, src)
}
func (m *SetDheartIPAddressData) XXX_Size() int {
	return m.Size()
}
func (m *SetDheartIPAddressData) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDheartIPAddressData.DiscardUnknown(m)
}

var xxx_messageInfo_SetDheartIPAddressData proto.InternalMessageInfo

func (m *SetDheartIPAddressData) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*SetDheartIpAddressMsg)(nil), "types.SetDheartIpAddressMsg")
	proto.RegisterType((*SetDheartIPAddressData)(nil), "types.SetDheartIPAddressData")
}

func init() { proto.RegisterFile("sisu/ip_address.proto", fileDescriptor_3cee243759d6702a) }

var fileDescriptor_3cee243759d6702a = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0xce, 0x2c, 0x2e,
	0xd5, 0xcf, 0x2c, 0x88, 0x4f, 0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x56, 0x4a, 0xe2, 0x12, 0x0d, 0x4e, 0x2d, 0x71,
	0xc9, 0x48, 0x4d, 0x2c, 0x2a, 0xf1, 0x2c, 0x70, 0x84, 0x28, 0xf1, 0x2d, 0x4e, 0x17, 0x12, 0xe3,
	0x62, 0x2b, 0xce, 0x4c, 0xcf, 0x4b, 0x2d, 0x92, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2,
	0x84, 0x0c, 0xb9, 0x58, 0x52, 0x12, 0x4b, 0x12, 0x25, 0x98, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0x64,
	0xf5, 0xc0, 0xc6, 0xe8, 0x21, 0xcc, 0x08, 0x80, 0x9a, 0xe1, 0x92, 0x58, 0x92, 0x18, 0x04, 0x56,
	0xaa, 0x64, 0xc6, 0x25, 0x86, 0x5d, 0x5e, 0x48, 0x86, 0x8b, 0x13, 0x2e, 0x20, 0xc1, 0x0c, 0xb6,
	0x07, 0x21, 0xe0, 0xe4, 0x7c, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9,
	0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x9a,
	0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x20, 0xef, 0xe9, 0xe6, 0xa5,
	0x96, 0x94, 0xe7, 0x17, 0x65, 0x83, 0x39, 0xfa, 0x15, 0x10, 0x0a, 0xec, 0xb2, 0x24, 0x36, 0xb0,
	0x77, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xea, 0xdb, 0x74, 0x07, 0x01, 0x00, 0x00,
}

func (m *SetDheartIpAddressMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDheartIpAddressMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDheartIpAddressMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIpAddress(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintIpAddress(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetDheartIPAddressData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDheartIPAddressData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDheartIPAddressData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IPAddress) > 0 {
		i -= len(m.IPAddress)
		copy(dAtA[i:], m.IPAddress)
		i = encodeVarintIpAddress(dAtA, i, uint64(len(m.IPAddress)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func encodeVarintIpAddress(dAtA []byte, offset int, v uint64) int {
	offset -= sovIpAddress(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetDheartIpAddressMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovIpAddress(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovIpAddress(uint64(l))
	}
	return n
}

func (m *SetDheartIPAddressData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovIpAddress(uint64(l))
	}
	return n
}

func sovIpAddress(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIpAddress(x uint64) (n int) {
	return sovIpAddress(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetDheartIpAddressMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDheartIpAddressMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDheartIpAddressMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIpAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIpAddress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIpAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &SetDheartIPAddressData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIpAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDheartIPAddressData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIpAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDheartIPAddressData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDheartIPAddressData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIpAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIpAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIpAddress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIpAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIpAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIpAddress(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIpAddress
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpAddress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIpAddress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIpAddress
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIpAddress
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIpAddress
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIpAddress        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIpAddress          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIpAddress = fmt.Errorf("proto: unexpected end of group")
)
