// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/node.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NodeStatus int32

const (
	NodeStatus_Unknown   NodeStatus = 0
	NodeStatus_Candidate NodeStatus = 1
	NodeStatus_Validator NodeStatus = 2
	NodeStatus_Disabled  NodeStatus = 3
)

var NodeStatus_name = map[int32]string{
	0: "Unknown",
	1: "Candidate",
	2: "Validator",
	3: "Disabled",
}

var NodeStatus_value = map[string]int32{
	"Unknown":   0,
	"Candidate": 1,
	"Validator": 2,
	"Disabled":  3,
}

func (x NodeStatus) String() string {
	return proto.EnumName(NodeStatus_name, int32(x))
}

func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cb22ef4f851efc1c, []int{0}
}

type Pubkey struct {
	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *Pubkey) Reset()         { *m = Pubkey{} }
func (m *Pubkey) String() string { return proto.CompactTextString(m) }
func (*Pubkey) ProtoMessage()    {}
func (*Pubkey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb22ef4f851efc1c, []int{0}
}
func (m *Pubkey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pubkey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pubkey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pubkey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pubkey.Merge(m, src)
}
func (m *Pubkey) XXX_Size() int {
	return m.Size()
}
func (m *Pubkey) XXX_DiscardUnknown() {
	xxx_messageInfo_Pubkey.DiscardUnknown(m)
}

var xxx_messageInfo_Pubkey proto.InternalMessageInfo

func (m *Pubkey) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Pubkey) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

type Node struct {
	// This id field is not used to identify a node. Use the consensusKey to identify a node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// consensusKey is the public key used by tendermint. This is different from the key in the keyring.
	ConsensusKey *Pubkey    `protobuf:"bytes,2,opt,name=consensusKey,proto3" json:"consensusKey,omitempty"`
	AccAddress   string     `protobuf:"bytes,3,opt,name=accAddress,proto3" json:"accAddress,omitempty"`
	IsValidator  bool       `protobuf:"varint,4,opt,name=isValidator,proto3" json:"isValidator,omitempty"`
	Status       NodeStatus `protobuf:"varint,5,opt,name=status,proto3,enum=types.NodeStatus" json:"status,omitempty"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb22ef4f851efc1c, []int{1}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetConsensusKey() *Pubkey {
	if m != nil {
		return m.ConsensusKey
	}
	return nil
}

func (m *Node) GetAccAddress() string {
	if m != nil {
		return m.AccAddress
	}
	return ""
}

func (m *Node) GetIsValidator() bool {
	if m != nil {
		return m.IsValidator
	}
	return false
}

func (m *Node) GetStatus() NodeStatus {
	if m != nil {
		return m.Status
	}
	return NodeStatus_Unknown
}

func init() {
	proto.RegisterEnum("types.NodeStatus", NodeStatus_name, NodeStatus_value)
	proto.RegisterType((*Pubkey)(nil), "types.Pubkey")
	proto.RegisterType((*Node)(nil), "types.Node")
}

func init() { proto.RegisterFile("sisu/node.proto", fileDescriptor_cb22ef4f851efc1c) }

var fileDescriptor_cb22ef4f851efc1c = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x4d, 0x4e, 0xc3, 0x30,
	0x10, 0x85, 0xe3, 0xf4, 0x87, 0x76, 0xfa, 0x43, 0xb0, 0x58, 0x64, 0x65, 0x45, 0x5d, 0xa5, 0x48,
	0xa4, 0xa2, 0x9c, 0x00, 0x0a, 0x2b, 0x24, 0x84, 0x82, 0x60, 0xc1, 0x2e, 0x89, 0x2d, 0xb0, 0x5a,
	0xec, 0x2a, 0xe3, 0xa8, 0xe4, 0x16, 0x9c, 0x86, 0x33, 0xb0, 0xec, 0x92, 0x25, 0x6a, 0x2f, 0x82,
	0xe2, 0x46, 0x50, 0x56, 0xf6, 0x7b, 0x9e, 0x99, 0xef, 0xc9, 0x03, 0x87, 0x28, 0xb1, 0x98, 0x28,
	0xcd, 0x45, 0xb4, 0xcc, 0xb5, 0xd1, 0xb4, 0x65, 0xca, 0xa5, 0xc0, 0xd1, 0x14, 0xda, 0x77, 0x45,
	0x3a, 0x17, 0x25, 0xa5, 0xd0, 0xac, 0x2c, 0x9f, 0x04, 0x24, 0xec, 0xc6, 0xf6, 0x4e, 0x8f, 0xa1,
	0x95, 0x96, 0x46, 0xa0, 0xef, 0x06, 0x24, 0xec, 0xc7, 0x3b, 0x31, 0xfa, 0x20, 0xd0, 0xbc, 0xd5,
	0x5c, 0xd0, 0x21, 0xb8, 0x92, 0xd7, 0x0d, 0xae, 0xe4, 0xf4, 0x0c, 0xfa, 0x99, 0x56, 0x28, 0x14,
	0x16, 0x78, 0x23, 0x4a, 0xdb, 0xd5, 0x9b, 0x0e, 0x22, 0x8b, 0x8a, 0x76, 0x9c, 0xf8, 0x5f, 0x09,
	0x65, 0x00, 0x49, 0x96, 0x5d, 0x70, 0x9e, 0x0b, 0x44, 0xbf, 0x61, 0x47, 0xed, 0x39, 0x34, 0x80,
	0x9e, 0xc4, 0xc7, 0x64, 0x21, 0x79, 0x62, 0x74, 0xee, 0x37, 0x03, 0x12, 0x76, 0xe2, 0x7d, 0x8b,
	0x8e, 0xa1, 0x8d, 0x26, 0x31, 0x05, 0xfa, 0xad, 0x80, 0x84, 0xc3, 0xe9, 0x51, 0x8d, 0xab, 0x12,
	0xde, 0xdb, 0x87, 0xb8, 0x2e, 0x38, 0xb9, 0x06, 0xf8, 0x73, 0x69, 0x0f, 0x0e, 0x1e, 0xd4, 0x5c,
	0xe9, 0x95, 0xf2, 0x1c, 0x3a, 0x80, 0xee, 0x2c, 0x51, 0xbc, 0x9a, 0x29, 0x3c, 0x52, 0xc9, 0x5f,
	0x82, 0xe7, 0xd2, 0x3e, 0x74, 0xae, 0x24, 0x26, 0xe9, 0x42, 0x70, 0xaf, 0x71, 0x39, 0xfb, 0xdc,
	0x30, 0xb2, 0xde, 0x30, 0xf2, 0xbd, 0x61, 0xe4, 0x7d, 0xcb, 0x9c, 0xf5, 0x96, 0x39, 0x5f, 0x5b,
	0xe6, 0x3c, 0x8d, 0x9f, 0xa5, 0x79, 0x29, 0xd2, 0x28, 0xd3, 0xaf, 0x93, 0xea, 0xc3, 0x4f, 0x95,
	0x30, 0x2b, 0x9d, 0xcf, 0xad, 0x98, 0xbc, 0xed, 0x0e, 0x1b, 0x2f, 0x6d, 0xdb, 0x35, 0x9c, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xf8, 0xbd, 0xca, 0x99, 0x01, 0x00, 0x00,
}

func (m *Pubkey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pubkey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pubkey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintNode(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.IsValidator {
		i--
		if m.IsValidator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.AccAddress) > 0 {
		i -= len(m.AccAddress)
		copy(dAtA[i:], m.AccAddress)
		i = encodeVarintNode(dAtA, i, uint64(len(m.AccAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ConsensusKey != nil {
		{
			size, err := m.ConsensusKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNode(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNode(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNode(dAtA []byte, offset int, v uint64) int {
	offset -= sovNode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pubkey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.ConsensusKey != nil {
		l = m.ConsensusKey.Size()
		n += 1 + l + sovNode(uint64(l))
	}
	l = len(m.AccAddress)
	if l > 0 {
		n += 1 + l + sovNode(uint64(l))
	}
	if m.IsValidator {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovNode(uint64(m.Status))
	}
	return n
}

func sovNode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNode(x uint64) (n int) {
	return sovNode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pubkey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pubkey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pubkey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusKey == nil {
				m.ConsensusKey = &Pubkey{}
			}
			if err := m.ConsensusKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValidator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValidator = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= NodeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNode = fmt.Errorf("proto: unexpected end of group")
)
