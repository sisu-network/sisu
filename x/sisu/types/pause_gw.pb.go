// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/pause_gw.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// pausing gateway message which is posted to cosmos chain by validator
type MsgPauseGw struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Chain  string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (m *MsgPauseGw) Reset()         { *m = MsgPauseGw{} }
func (m *MsgPauseGw) String() string { return proto.CompactTextString(m) }
func (*MsgPauseGw) ProtoMessage()    {}
func (*MsgPauseGw) Descriptor() ([]byte, []int) {
	return fileDescriptor_d630440b4e4ad685, []int{0}
}
func (m *MsgPauseGw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseGw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseGw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseGw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseGw.Merge(m, src)
}
func (m *MsgPauseGw) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseGw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseGw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseGw proto.InternalMessageInfo

func (m *MsgPauseGw) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgPauseGw) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

// list of all pausing gateway messages
type PauseGwRecord struct {
	Messages []*MsgPauseGw `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *PauseGwRecord) Reset()         { *m = PauseGwRecord{} }
func (m *PauseGwRecord) String() string { return proto.CompactTextString(m) }
func (*PauseGwRecord) ProtoMessage()    {}
func (*PauseGwRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d630440b4e4ad685, []int{1}
}
func (m *PauseGwRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PauseGwRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PauseGwRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PauseGwRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PauseGwRecord.Merge(m, src)
}
func (m *PauseGwRecord) XXX_Size() int {
	return m.Size()
}
func (m *PauseGwRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PauseGwRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PauseGwRecord proto.InternalMessageInfo

func (m *PauseGwRecord) GetMessages() []*MsgPauseGw {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgPauseGw)(nil), "types.MsgPauseGw")
	proto.RegisterType((*PauseGwRecord)(nil), "types.PauseGwRecord")
}

func init() { proto.RegisterFile("sisu/pause_gw.proto", fileDescriptor_d630440b4e4ad685) }

var fileDescriptor_d630440b4e4ad685 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0xce, 0x2c, 0x2e,
	0xd5, 0x2f, 0x48, 0x2c, 0x2d, 0x4e, 0x8d, 0x4f, 0x2f, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x56, 0xb2, 0xe2, 0xe2, 0xf2, 0x2d, 0x4e, 0x0f, 0x00, 0xc9,
	0xb9, 0x97, 0x0b, 0x89, 0x71, 0xb1, 0x15, 0x67, 0xa6, 0xe7, 0xa5, 0x16, 0x49, 0x30, 0x2a, 0x30,
	0x6a, 0x70, 0x06, 0x41, 0x79, 0x42, 0x22, 0x5c, 0xac, 0xc9, 0x19, 0x89, 0x99, 0x79, 0x12, 0x4c,
	0x60, 0x61, 0x08, 0x47, 0xc9, 0x8e, 0x8b, 0x17, 0xaa, 0x31, 0x28, 0x35, 0x39, 0xbf, 0x28, 0x45,
	0x48, 0x97, 0x8b, 0x23, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0xb5, 0x58, 0x82, 0x51, 0x81, 0x59,
	0x83, 0xdb, 0x48, 0x50, 0x0f, 0x6c, 0x8d, 0x1e, 0xc2, 0x8e, 0x20, 0xb8, 0x12, 0x27, 0xe7, 0x13,
	0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86,
	0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xd2, 0x4c, 0xcf, 0x2c, 0xc9, 0x28, 0x4d,
	0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x07, 0x39, 0x5e, 0x37, 0x2f, 0xb5, 0xa4, 0x3c, 0xbf, 0x28, 0x1b,
	0xcc, 0xd1, 0xaf, 0x80, 0x50, 0x60, 0x93, 0x93, 0xd8, 0xc0, 0xde, 0x31, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x06, 0xe3, 0xfc, 0x71, 0xe5, 0x00, 0x00, 0x00,
}

func (m *MsgPauseGw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseGw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseGw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintPauseGw(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintPauseGw(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PauseGwRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PauseGwRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PauseGwRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPauseGw(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPauseGw(dAtA []byte, offset int, v uint64) int {
	offset -= sovPauseGw(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgPauseGw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovPauseGw(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovPauseGw(uint64(l))
	}
	return n
}

func (m *PauseGwRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovPauseGw(uint64(l))
		}
	}
	return n
}

func sovPauseGw(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPauseGw(x uint64) (n int) {
	return sovPauseGw(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgPauseGw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPauseGw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseGw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseGw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPauseGw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPauseGw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPauseGw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPauseGw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPauseGw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPauseGw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPauseGw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPauseGw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PauseGwRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPauseGw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PauseGwRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PauseGwRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPauseGw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPauseGw
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPauseGw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &MsgPauseGw{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPauseGw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPauseGw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPauseGw(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPauseGw
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPauseGw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPauseGw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPauseGw
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPauseGw
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPauseGw
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPauseGw        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPauseGw          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPauseGw = fmt.Errorf("proto: unexpected end of group")
)
