// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/pending_tx_out_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PendingTxOutInfo_STATE int32

const (
	PendingTxOutInfo_IN_QUEUE   PendingTxOutInfo_STATE = 0
	PendingTxOutInfo_SIGNING    PendingTxOutInfo_STATE = 10
	PendingTxOutInfo_SIGNED     PendingTxOutInfo_STATE = 20
	PendingTxOutInfo_DISPATCHED PendingTxOutInfo_STATE = 30
)

var PendingTxOutInfo_STATE_name = map[int32]string{
	0:  "IN_QUEUE",
	10: "SIGNING",
	20: "SIGNED",
	30: "DISPATCHED",
}

var PendingTxOutInfo_STATE_value = map[string]int32{
	"IN_QUEUE":   0,
	"SIGNING":    10,
	"SIGNED":     20,
	"DISPATCHED": 30,
}

func (x PendingTxOutInfo_STATE) String() string {
	return proto.EnumName(PendingTxOutInfo_STATE_name, int32(x))
}

func (PendingTxOutInfo_STATE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6803dafe73c07863, []int{0, 0}
}

type PendingTxOutInfo struct {
	TxOut        *TxOut                 `protobuf:"bytes,1,opt,name=tx_out,json=txOut,proto3" json:"tx_out,omitempty"`
	ExpiredBlock int64                  `protobuf:"varint,2,opt,name=expired_block,json=expiredBlock,proto3" json:"expired_block,omitempty"`
	State        PendingTxOutInfo_STATE `protobuf:"varint,3,opt,name=state,proto3,enum=types.PendingTxOutInfo_STATE" json:"state,omitempty"`
}

func (m *PendingTxOutInfo) Reset()         { *m = PendingTxOutInfo{} }
func (m *PendingTxOutInfo) String() string { return proto.CompactTextString(m) }
func (*PendingTxOutInfo) ProtoMessage()    {}
func (*PendingTxOutInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6803dafe73c07863, []int{0}
}
func (m *PendingTxOutInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingTxOutInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingTxOutInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingTxOutInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingTxOutInfo.Merge(m, src)
}
func (m *PendingTxOutInfo) XXX_Size() int {
	return m.Size()
}
func (m *PendingTxOutInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingTxOutInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PendingTxOutInfo proto.InternalMessageInfo

func (m *PendingTxOutInfo) GetTxOut() *TxOut {
	if m != nil {
		return m.TxOut
	}
	return nil
}

func (m *PendingTxOutInfo) GetExpiredBlock() int64 {
	if m != nil {
		return m.ExpiredBlock
	}
	return 0
}

func (m *PendingTxOutInfo) GetState() PendingTxOutInfo_STATE {
	if m != nil {
		return m.State
	}
	return PendingTxOutInfo_IN_QUEUE
}

func init() {
	proto.RegisterEnum("types.PendingTxOutInfo_STATE", PendingTxOutInfo_STATE_name, PendingTxOutInfo_STATE_value)
	proto.RegisterType((*PendingTxOutInfo)(nil), "types.PendingTxOutInfo")
}

func init() { proto.RegisterFile("sisu/pending_tx_out_info.proto", fileDescriptor_6803dafe73c07863) }

var fileDescriptor_6803dafe73c07863 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0xce, 0x2c, 0x2e,
	0xd5, 0x2f, 0x48, 0xcd, 0x4b, 0xc9, 0xcc, 0x4b, 0x8f, 0x2f, 0xa9, 0x88, 0xcf, 0x2f, 0x2d, 0x89,
	0xcf, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48,
	0x2d, 0x96, 0x12, 0x04, 0x2b, 0x83, 0x48, 0x43, 0x64, 0x94, 0x2e, 0x32, 0x72, 0x09, 0x04, 0x40,
	0xf4, 0x85, 0x54, 0xf8, 0x97, 0x96, 0x78, 0xe6, 0xa5, 0xe5, 0x0b, 0x29, 0x73, 0xb1, 0x41, 0x14,
	0x49, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0xf1, 0xe8, 0x81, 0xf5, 0xeb, 0x81, 0x55, 0x04, 0xb1,
	0x96, 0x80, 0x28, 0x21, 0x65, 0x2e, 0xde, 0xd4, 0x8a, 0x82, 0xcc, 0xa2, 0xd4, 0x94, 0xf8, 0xa4,
	0x9c, 0xfc, 0xe4, 0x6c, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x1e, 0xa8, 0xa0, 0x13, 0x48,
	0x4c, 0xc8, 0x98, 0x8b, 0xb5, 0xb8, 0x24, 0xb1, 0x24, 0x55, 0x82, 0x59, 0x81, 0x51, 0x83, 0xcf,
	0x48, 0x16, 0x6a, 0x10, 0xba, 0x8d, 0x7a, 0xc1, 0x21, 0x8e, 0x21, 0xae, 0x41, 0x10, 0xb5, 0x4a,
	0x76, 0x5c, 0xac, 0x60, 0xbe, 0x10, 0x0f, 0x17, 0x87, 0xa7, 0x5f, 0x7c, 0x60, 0xa8, 0x6b, 0xa8,
	0xab, 0x00, 0x83, 0x10, 0x37, 0x17, 0x7b, 0xb0, 0xa7, 0xbb, 0x9f, 0xa7, 0x9f, 0xbb, 0x00, 0x97,
	0x10, 0x17, 0x17, 0x1b, 0x88, 0xe3, 0xea, 0x22, 0x20, 0x22, 0xc4, 0xc7, 0xc5, 0xe5, 0xe2, 0x19,
	0x1c, 0xe0, 0x18, 0xe2, 0xec, 0xe1, 0xea, 0x22, 0x20, 0xe7, 0xe4, 0x7c, 0xe2, 0x91, 0x1c, 0xe3,
	0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c,
	0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x9a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9,
	0xb9, 0xfa, 0xa0, 0xb0, 0xd0, 0xcd, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0x06, 0x73, 0xf4, 0x2b,
	0x20, 0x14, 0xd8, 0x89, 0x49, 0x6c, 0xe0, 0xf0, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x38,
	0x02, 0x1f, 0xc4, 0x5b, 0x01, 0x00, 0x00,
}

func (m *PendingTxOutInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingTxOutInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingTxOutInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintPendingTxOutInfo(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.ExpiredBlock != 0 {
		i = encodeVarintPendingTxOutInfo(dAtA, i, uint64(m.ExpiredBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.TxOut != nil {
		{
			size, err := m.TxOut.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPendingTxOutInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPendingTxOutInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovPendingTxOutInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PendingTxOutInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxOut != nil {
		l = m.TxOut.Size()
		n += 1 + l + sovPendingTxOutInfo(uint64(l))
	}
	if m.ExpiredBlock != 0 {
		n += 1 + sovPendingTxOutInfo(uint64(m.ExpiredBlock))
	}
	if m.State != 0 {
		n += 1 + sovPendingTxOutInfo(uint64(m.State))
	}
	return n
}

func sovPendingTxOutInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPendingTxOutInfo(x uint64) (n int) {
	return sovPendingTxOutInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PendingTxOutInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPendingTxOutInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingTxOutInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingTxOutInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingTxOutInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPendingTxOutInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPendingTxOutInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxOut == nil {
				m.TxOut = &TxOut{}
			}
			if err := m.TxOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredBlock", wireType)
			}
			m.ExpiredBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingTxOutInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingTxOutInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PendingTxOutInfo_STATE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPendingTxOutInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPendingTxOutInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPendingTxOutInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPendingTxOutInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPendingTxOutInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPendingTxOutInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPendingTxOutInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPendingTxOutInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPendingTxOutInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPendingTxOutInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPendingTxOutInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPendingTxOutInfo = fmt.Errorf("proto: unexpected end of group")
)
