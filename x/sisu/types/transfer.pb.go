// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/transfer.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Note: all new fields in this proto MUST be included in SerializeWithoutSigner in the go file.
type TransfersMsg struct {
	Signer string     `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Data   *Transfers `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TransfersMsg) Reset()         { *m = TransfersMsg{} }
func (m *TransfersMsg) String() string { return proto.CompactTextString(m) }
func (*TransfersMsg) ProtoMessage()    {}
func (*TransfersMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed3575fb7a77d65f, []int{0}
}
func (m *TransfersMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransfersMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransfersMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransfersMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransfersMsg.Merge(m, src)
}
func (m *TransfersMsg) XXX_Size() int {
	return m.Size()
}
func (m *TransfersMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TransfersMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TransfersMsg proto.InternalMessageInfo

func (m *TransfersMsg) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *TransfersMsg) GetData() *Transfers {
	if m != nil {
		return m.Data
	}
	return nil
}

type Transfers struct {
	Transfers []*Transfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (m *Transfers) Reset()         { *m = Transfers{} }
func (m *Transfers) String() string { return proto.CompactTextString(m) }
func (*Transfers) ProtoMessage()    {}
func (*Transfers) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed3575fb7a77d65f, []int{1}
}
func (m *Transfers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transfers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transfers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transfers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transfers.Merge(m, src)
}
func (m *Transfers) XXX_Size() int {
	return m.Size()
}
func (m *Transfers) XXX_DiscardUnknown() {
	xxx_messageInfo_Transfers.DiscardUnknown(m)
}

var xxx_messageInfo_Transfers proto.InternalMessageInfo

func (m *Transfers) GetTransfers() []*Transfer {
	if m != nil {
		return m.Transfers
	}
	return nil
}

type Transfer struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Source
	FromChain       string `protobuf:"bytes,2,opt,name=from_chain,json=fromChain,proto3" json:"from_chain,omitempty"`
	FromBlockHeight int64  `protobuf:"varint,3,opt,name=from_block_height,json=fromBlockHeight,proto3" json:"from_block_height,omitempty"`
	FromHash        string `protobuf:"bytes,4,opt,name=from_hash,json=fromHash,proto3" json:"from_hash,omitempty"`
	FromSender      string `protobuf:"bytes,5,opt,name=from_sender,json=fromSender,proto3" json:"from_sender,omitempty"`
	Token           string `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	Amount          string `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	// Destination
	ToChain     string `protobuf:"bytes,8,opt,name=to_chain,json=toChain,proto3" json:"to_chain,omitempty"`
	ToRecipient string `protobuf:"bytes,9,opt,name=to_recipient,json=toRecipient,proto3" json:"to_recipient,omitempty"`
}

func (m *Transfer) Reset()         { *m = Transfer{} }
func (m *Transfer) String() string { return proto.CompactTextString(m) }
func (*Transfer) ProtoMessage()    {}
func (*Transfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed3575fb7a77d65f, []int{2}
}
func (m *Transfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transfer.Merge(m, src)
}
func (m *Transfer) XXX_Size() int {
	return m.Size()
}
func (m *Transfer) XXX_DiscardUnknown() {
	xxx_messageInfo_Transfer.DiscardUnknown(m)
}

var xxx_messageInfo_Transfer proto.InternalMessageInfo

func (m *Transfer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Transfer) GetFromChain() string {
	if m != nil {
		return m.FromChain
	}
	return ""
}

func (m *Transfer) GetFromBlockHeight() int64 {
	if m != nil {
		return m.FromBlockHeight
	}
	return 0
}

func (m *Transfer) GetFromHash() string {
	if m != nil {
		return m.FromHash
	}
	return ""
}

func (m *Transfer) GetFromSender() string {
	if m != nil {
		return m.FromSender
	}
	return ""
}

func (m *Transfer) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Transfer) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Transfer) GetToChain() string {
	if m != nil {
		return m.ToChain
	}
	return ""
}

func (m *Transfer) GetToRecipient() string {
	if m != nil {
		return m.ToRecipient
	}
	return ""
}

func init() {
	proto.RegisterType((*TransfersMsg)(nil), "types.TransfersMsg")
	proto.RegisterType((*Transfers)(nil), "types.Transfers")
	proto.RegisterType((*Transfer)(nil), "types.Transfer")
}

func init() { proto.RegisterFile("sisu/transfer.proto", fileDescriptor_ed3575fb7a77d65f) }

var fileDescriptor_ed3575fb7a77d65f = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x3f, 0x8f, 0xd3, 0x30,
	0x18, 0xc6, 0xeb, 0xf4, 0x5f, 0xf2, 0xa6, 0xa2, 0x60, 0x10, 0x32, 0x42, 0x84, 0x50, 0x31, 0x04,
	0xa4, 0xa6, 0x52, 0xd9, 0x18, 0xdb, 0xa5, 0x03, 0x2c, 0x81, 0x89, 0x25, 0x4a, 0x13, 0x37, 0xb1,
	0x4a, 0xed, 0xca, 0x76, 0x05, 0x7c, 0x0a, 0xee, 0x63, 0xdd, 0xd8, 0xf1, 0xc6, 0x53, 0xfb, 0x45,
	0x4e, 0x79, 0x93, 0xf6, 0xa4, 0x9b, 0xa2, 0xf7, 0xf7, 0xcb, 0x63, 0x3f, 0x7a, 0x0d, 0x2f, 0x8d,
	0x30, 0x87, 0x99, 0xd5, 0x99, 0x34, 0x1b, 0xae, 0xe3, 0xbd, 0x56, 0x56, 0xd1, 0xbe, 0xfd, 0xb7,
	0xe7, 0x66, 0xf2, 0x0d, 0x46, 0x3f, 0x5b, 0x61, 0xbe, 0x9b, 0x92, 0xbe, 0x86, 0x81, 0x11, 0xa5,
	0xe4, 0x9a, 0x91, 0x90, 0x44, 0x5e, 0xd2, 0x4e, 0xf4, 0x23, 0xf4, 0x8a, 0xcc, 0x66, 0xcc, 0x09,
	0x49, 0xe4, 0xcf, 0x9f, 0xc7, 0x98, 0x8e, 0xaf, 0xd1, 0x04, 0xed, 0xe4, 0x2b, 0x78, 0x57, 0x44,
	0xa7, 0xe0, 0x5d, 0xee, 0x34, 0x8c, 0x84, 0xdd, 0xc8, 0x9f, 0x8f, 0x9f, 0xe4, 0x92, 0xc7, 0x3f,
	0x26, 0xff, 0x1d, 0x70, 0x2f, 0x9c, 0x3e, 0x03, 0x47, 0x14, 0x6d, 0x05, 0x47, 0x14, 0xf4, 0x1d,
	0xc0, 0x46, 0xab, 0x5d, 0x9a, 0x57, 0x99, 0x90, 0x58, 0xc2, 0x4b, 0xbc, 0x9a, 0x2c, 0x6b, 0x40,
	0x3f, 0xc3, 0x0b, 0xd4, 0xeb, 0xdf, 0x2a, 0xdf, 0xa6, 0x15, 0x17, 0x65, 0x65, 0x59, 0x37, 0x24,
	0x51, 0x37, 0x19, 0xd7, 0x62, 0x51, 0xf3, 0x15, 0x62, 0xfa, 0x16, 0x30, 0x98, 0x56, 0x99, 0xa9,
	0x58, 0x0f, 0x4f, 0x72, 0x6b, 0xb0, 0xca, 0x4c, 0x45, 0xdf, 0x83, 0x8f, 0xd2, 0x70, 0x59, 0x70,
	0xcd, 0xfa, 0xa8, 0xf1, 0xea, 0x1f, 0x48, 0xe8, 0x2b, 0xe8, 0x5b, 0xb5, 0xe5, 0x92, 0x0d, 0x50,
	0x35, 0x43, 0xbd, 0xb5, 0x6c, 0xa7, 0x0e, 0xd2, 0xb2, 0x61, 0xb3, 0xb5, 0x66, 0xa2, 0x6f, 0xc0,
	0xb5, 0xaa, 0x2d, 0xed, 0xa2, 0x19, 0x5a, 0xd5, 0x54, 0xfe, 0x00, 0x23, 0xab, 0x52, 0xcd, 0x73,
	0xb1, 0x17, 0x5c, 0x5a, 0xe6, 0xa1, 0xf6, 0xad, 0x4a, 0x2e, 0x68, 0xb1, 0xbc, 0x3d, 0x05, 0xe4,
	0x78, 0x0a, 0xc8, 0xfd, 0x29, 0x20, 0x37, 0xe7, 0xa0, 0x73, 0x3c, 0x07, 0x9d, 0xbb, 0x73, 0xd0,
	0xf9, 0xf5, 0xa9, 0x14, 0xb6, 0x3a, 0xac, 0xe3, 0x5c, 0xed, 0x66, 0xf5, 0xe3, 0x4e, 0x25, 0xb7,
	0x7f, 0x94, 0xde, 0xe2, 0x30, 0xfb, 0xdb, 0x7c, 0x70, 0xd5, 0xeb, 0x01, 0x3e, 0xf7, 0x97, 0x87,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x71, 0xf0, 0x28, 0xd5, 0x05, 0x02, 0x00, 0x00,
}

func (m *TransfersMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransfersMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransfersMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransfer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Transfers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transfers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transfers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transfers) > 0 {
		for iNdEx := len(m.Transfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTransfer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Transfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToRecipient) > 0 {
		i -= len(m.ToRecipient)
		copy(dAtA[i:], m.ToRecipient)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.ToRecipient)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ToChain) > 0 {
		i -= len(m.ToChain)
		copy(dAtA[i:], m.ToChain)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.ToChain)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FromSender) > 0 {
		i -= len(m.FromSender)
		copy(dAtA[i:], m.FromSender)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.FromSender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FromHash) > 0 {
		i -= len(m.FromHash)
		copy(dAtA[i:], m.FromHash)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.FromHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.FromBlockHeight != 0 {
		i = encodeVarintTransfer(dAtA, i, uint64(m.FromBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FromChain) > 0 {
		i -= len(m.FromChain)
		copy(dAtA[i:], m.FromChain)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.FromChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTransfer(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransfer(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransfer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransfersMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTransfer(uint64(l))
	}
	return n
}

func (m *Transfers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transfers) > 0 {
		for _, e := range m.Transfers {
			l = e.Size()
			n += 1 + l + sovTransfer(uint64(l))
		}
	}
	return n
}

func (m *Transfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	l = len(m.FromChain)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	if m.FromBlockHeight != 0 {
		n += 1 + sovTransfer(uint64(m.FromBlockHeight))
	}
	l = len(m.FromHash)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	l = len(m.FromSender)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	l = len(m.ToChain)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	l = len(m.ToRecipient)
	if l > 0 {
		n += 1 + l + sovTransfer(uint64(l))
	}
	return n
}

func sovTransfer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransfer(x uint64) (n int) {
	return sovTransfer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransfersMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransfersMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransfersMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Transfers{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transfers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transfers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transfers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transfers = append(m.Transfers, &Transfer{})
			if err := m.Transfers[len(m.Transfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromBlockHeight", wireType)
			}
			m.FromBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromSender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransfer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransfer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransfer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransfer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransfer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransfer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransfer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransfer = fmt.Errorf("proto: unexpected end of group")
)
