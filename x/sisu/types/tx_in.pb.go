// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/tx_in.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Note: all new fields in this proto MUST be included in SerializeWithoutSigner in the go file.
type TxsInMsg struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Data   *TxsIn `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TxsInMsg) Reset()         { *m = TxsInMsg{} }
func (m *TxsInMsg) String() string { return proto.CompactTextString(m) }
func (*TxsInMsg) ProtoMessage()    {}
func (*TxsInMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e2a900206ada091, []int{0}
}
func (m *TxsInMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxsInMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxsInMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxsInMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxsInMsg.Merge(m, src)
}
func (m *TxsInMsg) XXX_Size() int {
	return m.Size()
}
func (m *TxsInMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TxsInMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TxsInMsg proto.InternalMessageInfo

func (m *TxsInMsg) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *TxsInMsg) GetData() *TxsIn {
	if m != nil {
		return m.Data
	}
	return nil
}

type TxsIn struct {
	Chain    string         `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Height   int64          `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Hash     string         `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Requests []*TransferOut `protobuf:"bytes,4,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (m *TxsIn) Reset()         { *m = TxsIn{} }
func (m *TxsIn) String() string { return proto.CompactTextString(m) }
func (*TxsIn) ProtoMessage()    {}
func (*TxsIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e2a900206ada091, []int{1}
}
func (m *TxsIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxsIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxsIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxsIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxsIn.Merge(m, src)
}
func (m *TxsIn) XXX_Size() int {
	return m.Size()
}
func (m *TxsIn) XXX_DiscardUnknown() {
	xxx_messageInfo_TxsIn.DiscardUnknown(m)
}

var xxx_messageInfo_TxsIn proto.InternalMessageInfo

func (m *TxsIn) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *TxsIn) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *TxsIn) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TxsIn) GetRequests() []*TransferOut {
	if m != nil {
		return m.Requests
	}
	return nil
}

type TransferOut struct {
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ToChain   string `protobuf:"bytes,2,opt,name=to_chain,json=toChain,proto3" json:"to_chain,omitempty"`
	Token     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Recipient string `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount    string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Hash      string `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TransferOut) Reset()         { *m = TransferOut{} }
func (m *TransferOut) String() string { return proto.CompactTextString(m) }
func (*TransferOut) ProtoMessage()    {}
func (*TransferOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e2a900206ada091, []int{2}
}
func (m *TransferOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferOut.Merge(m, src)
}
func (m *TransferOut) XXX_Size() int {
	return m.Size()
}
func (m *TransferOut) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferOut.DiscardUnknown(m)
}

var xxx_messageInfo_TransferOut proto.InternalMessageInfo

func (m *TransferOut) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *TransferOut) GetToChain() string {
	if m != nil {
		return m.ToChain
	}
	return ""
}

func (m *TransferOut) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TransferOut) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *TransferOut) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *TransferOut) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*TxsInMsg)(nil), "types.TxsInMsg")
	proto.RegisterType((*TxsIn)(nil), "types.TxsIn")
	proto.RegisterType((*TransferOut)(nil), "types.TransferOut")
}

func init() { proto.RegisterFile("sisu/tx_in.proto", fileDescriptor_5e2a900206ada091) }

var fileDescriptor_5e2a900206ada091 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x4f, 0x4e, 0xc2, 0x40,
	0x14, 0xc6, 0x19, 0x68, 0x11, 0x1e, 0x2e, 0xcc, 0x84, 0x98, 0x9a, 0x98, 0xa6, 0x61, 0x85, 0x0b,
	0x4b, 0x82, 0x37, 0x10, 0x37, 0x2e, 0x8c, 0x49, 0xe3, 0xca, 0x0d, 0x29, 0x30, 0x76, 0x26, 0x84,
	0x19, 0x9c, 0x79, 0x8d, 0x70, 0x0b, 0x8f, 0xe0, 0x71, 0x5c, 0xb2, 0x74, 0x69, 0xe0, 0x22, 0x86,
	0x37, 0x15, 0x58, 0xb5, 0xbf, 0xf9, 0xde, 0x9f, 0xef, 0xcb, 0x83, 0x0b, 0xa7, 0x5c, 0x39, 0xc0,
	0xd5, 0x58, 0xe9, 0x74, 0x69, 0x0d, 0x1a, 0x1e, 0xe2, 0x7a, 0x29, 0x5c, 0xef, 0x01, 0x5a, 0x2f,
	0x2b, 0xf7, 0xa8, 0x9f, 0x5c, 0xc1, 0x2f, 0xa1, 0xe9, 0x54, 0xa1, 0x85, 0x8d, 0x58, 0xc2, 0xfa,
	0xed, 0xac, 0x22, 0x9e, 0x40, 0x30, 0xcb, 0x31, 0x8f, 0xea, 0x09, 0xeb, 0x77, 0x86, 0xe7, 0x29,
	0x75, 0xa6, 0xd4, 0x96, 0x91, 0xd2, 0x5b, 0x43, 0x48, 0xc8, 0xbb, 0x10, 0x4e, 0x65, 0xae, 0x74,
	0x35, 0xc1, 0xc3, 0x7e, 0xb0, 0x14, 0xaa, 0x90, 0x48, 0x23, 0x1a, 0x59, 0x45, 0x9c, 0x43, 0x20,
	0x73, 0x27, 0xa3, 0x06, 0x15, 0xd3, 0x3f, 0x4f, 0xa1, 0x65, 0xc5, 0x7b, 0x29, 0x1c, 0xba, 0x28,
	0x48, 0x1a, 0xfd, 0xce, 0x90, 0xff, 0x2f, 0xb4, 0xb9, 0x76, 0x6f, 0xc2, 0x3e, 0x97, 0x98, 0x1d,
	0x6a, 0x7a, 0x5f, 0x0c, 0x3a, 0x27, 0x0a, 0x85, 0x10, 0x7a, 0x76, 0x12, 0x82, 0x88, 0x5f, 0x41,
	0x0b, 0xcd, 0xd8, 0x9b, 0xab, 0x93, 0x72, 0x86, 0x66, 0x44, 0xf6, 0xba, 0x10, 0xa2, 0x99, 0x0b,
	0x5d, 0xf9, 0xf0, 0xc0, 0xaf, 0xa1, 0x6d, 0xc5, 0x54, 0x2d, 0x95, 0xd0, 0x18, 0x05, 0xa4, 0x1c,
	0x1f, 0xf6, 0x6b, 0xf2, 0x85, 0x29, 0x35, 0x46, 0xa1, 0x5f, 0xe3, 0xe9, 0x10, 0xa9, 0x79, 0x8c,
	0x74, 0x3f, 0xfa, 0xde, 0xc6, 0x6c, 0xb3, 0x8d, 0xd9, 0xef, 0x36, 0x66, 0x9f, 0xbb, 0xb8, 0xb6,
	0xd9, 0xc5, 0xb5, 0x9f, 0x5d, 0x5c, 0x7b, 0xbd, 0x29, 0x14, 0xca, 0x72, 0x92, 0x4e, 0xcd, 0x62,
	0xb0, 0xbf, 0xd0, 0xad, 0x16, 0xf8, 0x61, 0xec, 0x9c, 0x60, 0xb0, 0xf2, 0x1f, 0x4a, 0x3f, 0x69,
	0xd2, 0xd9, 0xee, 0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xf6, 0x6d, 0x37, 0xca, 0x01, 0x00,
	0x00,
}

func (m *TxsInMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxsInMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxsInMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxIn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTxIn(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxsIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxsIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxsIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxIn(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTxIn(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintTxIn(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTxIn(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTxIn(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTxIn(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTxIn(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintTxIn(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToChain) > 0 {
		i -= len(m.ToChain)
		copy(dAtA[i:], m.ToChain)
		i = encodeVarintTxIn(dAtA, i, uint64(len(m.ToChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTxIn(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxIn(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxIn(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxsInMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTxIn(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTxIn(uint64(l))
	}
	return n
}

func (m *TxsIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTxIn(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTxIn(uint64(m.Height))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTxIn(uint64(l))
	}
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovTxIn(uint64(l))
		}
	}
	return n
}

func (m *TransferOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTxIn(uint64(l))
	}
	l = len(m.ToChain)
	if l > 0 {
		n += 1 + l + sovTxIn(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovTxIn(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTxIn(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTxIn(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTxIn(uint64(l))
	}
	return n
}

func sovTxIn(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxIn(x uint64) (n int) {
	return sovTxIn(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxsInMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxIn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxsInMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxsInMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxIn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxIn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxIn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxIn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxIn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxIn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TxsIn{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxIn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxIn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxsIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxIn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxsIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxsIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxIn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxIn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxIn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxIn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxIn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxIn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxIn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxIn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxIn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxIn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &TransferOut{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxIn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxIn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxIn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxIn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxIn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxIn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxIn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxIn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxIn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxIn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxIn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxIn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxIn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxIn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxIn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxIn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxIn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxIn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxIn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxIn
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxIn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxIn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxIn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxIn(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxIn
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxIn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxIn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxIn
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxIn
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxIn
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxIn        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxIn          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxIn = fmt.Errorf("proto: unexpected end of group")
)
