// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/tx_in_old.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxInType int32

const (
	TxInType_TOKEN_TRANSFER TxInType = 0
)

var TxInType_name = map[int32]string{
	0: "TOKEN_TRANSFER",
}

var TxInType_value = map[string]int32{
	"TOKEN_TRANSFER": 0,
}

func (x TxInType) String() string {
	return proto.EnumName(TxInType_name, int32(x))
}

func (TxInType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfbe0f781bbb1f99, []int{0}
}

type TxInOld struct {
	// Id of this TxIn. For most block chains, this id is the transaction hash.
	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FromChain string   `protobuf:"bytes,2,opt,name=from_chain,json=fromChain,proto3" json:"from_chain,omitempty"`
	Hash      string   `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	TxType    TxInType `protobuf:"varint,4,opt,name=tx_type,json=txType,proto3,enum=types.TxInType" json:"tx_type,omitempty"`
}

func (m *TxInOld) Reset()         { *m = TxInOld{} }
func (m *TxInOld) String() string { return proto.CompactTextString(m) }
func (*TxInOld) ProtoMessage()    {}
func (*TxInOld) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfbe0f781bbb1f99, []int{0}
}
func (m *TxInOld) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxInOld) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxInOld.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxInOld) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxInOld.Merge(m, src)
}
func (m *TxInOld) XXX_Size() int {
	return m.Size()
}
func (m *TxInOld) XXX_DiscardUnknown() {
	xxx_messageInfo_TxInOld.DiscardUnknown(m)
}

var xxx_messageInfo_TxInOld proto.InternalMessageInfo

func (m *TxInOld) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TxInOld) GetFromChain() string {
	if m != nil {
		return m.FromChain
	}
	return ""
}

func (m *TxInOld) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TxInOld) GetTxType() TxInType {
	if m != nil {
		return m.TxType
	}
	return TxInType_TOKEN_TRANSFER
}

type TxInMsgOld struct {
	Signer string   `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Data   *TxInOld `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TxInMsgOld) Reset()         { *m = TxInMsgOld{} }
func (m *TxInMsgOld) String() string { return proto.CompactTextString(m) }
func (*TxInMsgOld) ProtoMessage()    {}
func (*TxInMsgOld) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfbe0f781bbb1f99, []int{1}
}
func (m *TxInMsgOld) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxInMsgOld) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxInMsgOld.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxInMsgOld) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxInMsgOld.Merge(m, src)
}
func (m *TxInMsgOld) XXX_Size() int {
	return m.Size()
}
func (m *TxInMsgOld) XXX_DiscardUnknown() {
	xxx_messageInfo_TxInMsgOld.DiscardUnknown(m)
}

var xxx_messageInfo_TxInMsgOld proto.InternalMessageInfo

func (m *TxInMsgOld) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *TxInMsgOld) GetData() *TxInOld {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("types.TxInType", TxInType_name, TxInType_value)
	proto.RegisterType((*TxInOld)(nil), "types.TxInOld")
	proto.RegisterType((*TxInMsgOld)(nil), "types.TxInMsgOld")
}

func init() { proto.RegisterFile("sisu/tx_in_old.proto", fileDescriptor_dfbe0f781bbb1f99) }

var fileDescriptor_dfbe0f781bbb1f99 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xb3, 0x35, 0xa6, 0x76, 0x84, 0x28, 0x8b, 0x48, 0x2e, 0x2e, 0x25, 0xa7, 0x28, 0x98,
	0x40, 0x7d, 0x02, 0x2d, 0x15, 0x45, 0x6c, 0x20, 0xe6, 0xe4, 0x25, 0xa4, 0xdd, 0x98, 0x2c, 0xa6,
	0xd9, 0x90, 0xdd, 0x6a, 0xfa, 0x16, 0x3e, 0x96, 0xc7, 0x1e, 0x3d, 0x4a, 0xf2, 0x22, 0xb2, 0x6b,
	0x05, 0x4f, 0x33, 0xf3, 0x0d, 0xfc, 0x1f, 0xfc, 0x70, 0x22, 0x98, 0x58, 0x07, 0xb2, 0x4d, 0x58,
	0x95, 0xf0, 0x92, 0xfa, 0x75, 0xc3, 0x25, 0xc7, 0xfb, 0x72, 0x53, 0x67, 0xc2, 0x7d, 0x83, 0x61,
	0xdc, 0xde, 0x57, 0x61, 0x49, 0xb1, 0x0d, 0x03, 0x46, 0x1d, 0x34, 0x46, 0xde, 0x28, 0x1a, 0x30,
	0x8a, 0xcf, 0x00, 0x5e, 0x1a, 0xbe, 0x4a, 0x96, 0x45, 0xca, 0x2a, 0x67, 0xa0, 0xf9, 0x48, 0x91,
	0xa9, 0x02, 0x18, 0x83, 0x59, 0xa4, 0xa2, 0x70, 0xf6, 0xf4, 0x43, 0xef, 0xd8, 0x83, 0xa1, 0x6c,
	0x13, 0x95, 0xec, 0x98, 0x63, 0xe4, 0xd9, 0x93, 0x23, 0x5f, 0x6b, 0x7c, 0xe5, 0x88, 0x37, 0x75,
	0x16, 0x59, 0xb2, 0x55, 0xd3, 0xbd, 0x03, 0x50, 0xec, 0x51, 0xe4, 0x4a, 0x7d, 0x0a, 0x96, 0x60,
	0x79, 0x95, 0x35, 0x3b, 0xfd, 0xee, 0xc2, 0x2e, 0x98, 0x34, 0x95, 0xa9, 0x96, 0x1f, 0x4e, 0xec,
	0x7f, 0x61, 0x61, 0x49, 0x23, 0xfd, 0xbb, 0x20, 0x70, 0xf0, 0x97, 0x8e, 0x31, 0xd8, 0x71, 0xf8,
	0x30, 0x9b, 0x27, 0x71, 0x74, 0x3d, 0x7f, 0xba, 0x9d, 0x45, 0xc7, 0xc6, 0xcd, 0xf4, 0xb3, 0x23,
	0x68, 0xdb, 0x11, 0xf4, 0xdd, 0x11, 0xf4, 0xd1, 0x13, 0x63, 0xdb, 0x13, 0xe3, 0xab, 0x27, 0xc6,
	0xf3, 0x79, 0xce, 0x64, 0xb1, 0x5e, 0xf8, 0x4b, 0xbe, 0x0a, 0x54, 0x47, 0x97, 0x55, 0x26, 0xdf,
	0x79, 0xf3, 0xaa, 0x8f, 0xa0, 0xfd, 0x1d, 0x5a, 0xb9, 0xb0, 0x74, 0x69, 0x57, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x08, 0x95, 0x8e, 0xa2, 0x4c, 0x01, 0x00, 0x00,
}

func (m *TxInOld) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxInOld) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxInOld) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxType != 0 {
		i = encodeVarintTxInOld(dAtA, i, uint64(m.TxType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTxInOld(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FromChain) > 0 {
		i -= len(m.FromChain)
		copy(dAtA[i:], m.FromChain)
		i = encodeVarintTxInOld(dAtA, i, uint64(len(m.FromChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTxInOld(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxInMsgOld) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxInMsgOld) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxInMsgOld) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxInOld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTxInOld(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxInOld(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxInOld(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxInOld) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTxInOld(uint64(l))
	}
	l = len(m.FromChain)
	if l > 0 {
		n += 1 + l + sovTxInOld(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTxInOld(uint64(l))
	}
	if m.TxType != 0 {
		n += 1 + sovTxInOld(uint64(m.TxType))
	}
	return n
}

func (m *TxInMsgOld) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTxInOld(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTxInOld(uint64(l))
	}
	return n
}

func sovTxInOld(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxInOld(x uint64) (n int) {
	return sovTxInOld(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxInOld) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxInOld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxInOld: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxInOld: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxInOld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxInOld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxInOld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxInOld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxInOld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxInOld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxInOld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxInOld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxInOld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			m.TxType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxInOld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxType |= TxInType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxInOld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxInOld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxInMsgOld) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxInOld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxInMsgOld: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxInMsgOld: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxInOld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxInOld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxInOld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxInOld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxInOld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxInOld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TxInOld{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxInOld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxInOld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxInOld(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxInOld
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxInOld
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxInOld
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxInOld
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxInOld
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxInOld
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxInOld        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxInOld          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxInOld = fmt.Errorf("proto: unexpected end of group")
)
