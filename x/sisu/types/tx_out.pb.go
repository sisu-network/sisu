// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/tx_out.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxOutType int32

const (
	TxOutType_NORMAL              TxOutType = 0
	TxOutType_CONTRACT_DEPLOYMENT TxOutType = 1
)

var TxOutType_name = map[int32]string{
	0: "NORMAL",
	1: "CONTRACT_DEPLOYMENT",
}

var TxOutType_value = map[string]int32{
	"NORMAL":              0,
	"CONTRACT_DEPLOYMENT": 1,
}

func (x TxOutType) String() string {
	return proto.EnumName(TxOutType_name, int32(x))
}

func (TxOutType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_155b13ca5b94a7d7, []int{0}
}

type TxOutWithSigner struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Data   *TxOut `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TxOutWithSigner) Reset()         { *m = TxOutWithSigner{} }
func (m *TxOutWithSigner) String() string { return proto.CompactTextString(m) }
func (*TxOutWithSigner) ProtoMessage()    {}
func (*TxOutWithSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_155b13ca5b94a7d7, []int{0}
}
func (m *TxOutWithSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOutWithSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOutWithSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxOutWithSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOutWithSigner.Merge(m, src)
}
func (m *TxOutWithSigner) XXX_Size() int {
	return m.Size()
}
func (m *TxOutWithSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOutWithSigner.DiscardUnknown(m)
}

var xxx_messageInfo_TxOutWithSigner proto.InternalMessageInfo

func (m *TxOutWithSigner) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *TxOutWithSigner) GetData() *TxOut {
	if m != nil {
		return m.Data
	}
	return nil
}

type TxOut struct {
	OutChain      string    `protobuf:"bytes,1,opt,name=outChain,proto3" json:"outChain,omitempty"`
	OutHash       string    `protobuf:"bytes,2,opt,name=outHash,proto3" json:"outHash,omitempty"`
	TxType        TxOutType `protobuf:"varint,3,opt,name=txType,proto3,enum=types.TxOutType" json:"txType,omitempty"`
	InChain       string    `protobuf:"bytes,4,opt,name=inChain,proto3" json:"inChain,omitempty"`
	InBlockHeight int64     `protobuf:"varint,5,opt,name=inBlockHeight,proto3" json:"inBlockHeight,omitempty"`
	InHash        string    `protobuf:"bytes,6,opt,name=inHash,proto3" json:"inHash,omitempty"`
	OutBytes      []byte    `protobuf:"bytes,7,opt,name=outBytes,proto3" json:"outBytes,omitempty"`
	// optional contract hash
	ContractHash string `protobuf:"bytes,8,opt,name=contractHash,proto3" json:"contractHash,omitempty"`
}

func (m *TxOut) Reset()         { *m = TxOut{} }
func (m *TxOut) String() string { return proto.CompactTextString(m) }
func (*TxOut) ProtoMessage()    {}
func (*TxOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_155b13ca5b94a7d7, []int{1}
}
func (m *TxOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOut.Merge(m, src)
}
func (m *TxOut) XXX_Size() int {
	return m.Size()
}
func (m *TxOut) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOut.DiscardUnknown(m)
}

var xxx_messageInfo_TxOut proto.InternalMessageInfo

func (m *TxOut) GetOutChain() string {
	if m != nil {
		return m.OutChain
	}
	return ""
}

func (m *TxOut) GetOutHash() string {
	if m != nil {
		return m.OutHash
	}
	return ""
}

func (m *TxOut) GetTxType() TxOutType {
	if m != nil {
		return m.TxType
	}
	return TxOutType_NORMAL
}

func (m *TxOut) GetInChain() string {
	if m != nil {
		return m.InChain
	}
	return ""
}

func (m *TxOut) GetInBlockHeight() int64 {
	if m != nil {
		return m.InBlockHeight
	}
	return 0
}

func (m *TxOut) GetInHash() string {
	if m != nil {
		return m.InHash
	}
	return ""
}

func (m *TxOut) GetOutBytes() []byte {
	if m != nil {
		return m.OutBytes
	}
	return nil
}

func (m *TxOut) GetContractHash() string {
	if m != nil {
		return m.ContractHash
	}
	return ""
}

// TxOut with and full transaction hash (including signature) to look up TxOut when a new tx comes in.
type TxOutSig struct {
	Chain       string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	HashWithSig string `protobuf:"bytes,2,opt,name=hashWithSig,proto3" json:"hashWithSig,omitempty"`
	HashNoSig   string `protobuf:"bytes,3,opt,name=hashNoSig,proto3" json:"hashNoSig,omitempty"`
}

func (m *TxOutSig) Reset()         { *m = TxOutSig{} }
func (m *TxOutSig) String() string { return proto.CompactTextString(m) }
func (*TxOutSig) ProtoMessage()    {}
func (*TxOutSig) Descriptor() ([]byte, []int) {
	return fileDescriptor_155b13ca5b94a7d7, []int{2}
}
func (m *TxOutSig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOutSig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOutSig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxOutSig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOutSig.Merge(m, src)
}
func (m *TxOutSig) XXX_Size() int {
	return m.Size()
}
func (m *TxOutSig) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOutSig.DiscardUnknown(m)
}

var xxx_messageInfo_TxOutSig proto.InternalMessageInfo

func (m *TxOutSig) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *TxOutSig) GetHashWithSig() string {
	if m != nil {
		return m.HashWithSig
	}
	return ""
}

func (m *TxOutSig) GetHashNoSig() string {
	if m != nil {
		return m.HashNoSig
	}
	return ""
}

type TxOutContractConfirmWithSigner struct {
	Signer string                `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Data   *TxOutContractConfirm `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TxOutContractConfirmWithSigner) Reset()         { *m = TxOutContractConfirmWithSigner{} }
func (m *TxOutContractConfirmWithSigner) String() string { return proto.CompactTextString(m) }
func (*TxOutContractConfirmWithSigner) ProtoMessage()    {}
func (*TxOutContractConfirmWithSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_155b13ca5b94a7d7, []int{3}
}
func (m *TxOutContractConfirmWithSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOutContractConfirmWithSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOutContractConfirmWithSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxOutContractConfirmWithSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOutContractConfirmWithSigner.Merge(m, src)
}
func (m *TxOutContractConfirmWithSigner) XXX_Size() int {
	return m.Size()
}
func (m *TxOutContractConfirmWithSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOutContractConfirmWithSigner.DiscardUnknown(m)
}

var xxx_messageInfo_TxOutContractConfirmWithSigner proto.InternalMessageInfo

func (m *TxOutContractConfirmWithSigner) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *TxOutContractConfirmWithSigner) GetData() *TxOutContractConfirm {
	if m != nil {
		return m.Data
	}
	return nil
}

type TxOutContractConfirm struct {
	OutChain        string `protobuf:"bytes,1,opt,name=outChain,proto3" json:"outChain,omitempty"`
	OutHash         string `protobuf:"bytes,2,opt,name=outHash,proto3" json:"outHash,omitempty"`
	BlockHeight     int64  `protobuf:"varint,3,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	ContractAddress string `protobuf:"bytes,4,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (m *TxOutContractConfirm) Reset()         { *m = TxOutContractConfirm{} }
func (m *TxOutContractConfirm) String() string { return proto.CompactTextString(m) }
func (*TxOutContractConfirm) ProtoMessage()    {}
func (*TxOutContractConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_155b13ca5b94a7d7, []int{4}
}
func (m *TxOutContractConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOutContractConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOutContractConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxOutContractConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOutContractConfirm.Merge(m, src)
}
func (m *TxOutContractConfirm) XXX_Size() int {
	return m.Size()
}
func (m *TxOutContractConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOutContractConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_TxOutContractConfirm proto.InternalMessageInfo

func (m *TxOutContractConfirm) GetOutChain() string {
	if m != nil {
		return m.OutChain
	}
	return ""
}

func (m *TxOutContractConfirm) GetOutHash() string {
	if m != nil {
		return m.OutHash
	}
	return ""
}

func (m *TxOutContractConfirm) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TxOutContractConfirm) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("types.TxOutType", TxOutType_name, TxOutType_value)
	proto.RegisterType((*TxOutWithSigner)(nil), "types.TxOutWithSigner")
	proto.RegisterType((*TxOut)(nil), "types.TxOut")
	proto.RegisterType((*TxOutSig)(nil), "types.TxOutSig")
	proto.RegisterType((*TxOutContractConfirmWithSigner)(nil), "types.TxOutContractConfirmWithSigner")
	proto.RegisterType((*TxOutContractConfirm)(nil), "types.TxOutContractConfirm")
}

func init() { proto.RegisterFile("sisu/tx_out.proto", fileDescriptor_155b13ca5b94a7d7) }

var fileDescriptor_155b13ca5b94a7d7 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0xad, 0xe9, 0x9a, 0xb5, 0x5f, 0x0b, 0x2b, 0x66, 0x82, 0x08, 0x50, 0x64, 0x45, 0x1c, 0x02,
	0x12, 0x2d, 0x1a, 0xbf, 0xa0, 0x0d, 0x93, 0x26, 0xb1, 0xb5, 0xc8, 0x8b, 0x84, 0xe0, 0x32, 0xd2,
	0x34, 0x24, 0xd6, 0x98, 0x5d, 0xc5, 0x8e, 0x48, 0xff, 0x05, 0x47, 0x7e, 0x12, 0xc7, 0x1d, 0x39,
	0xa2, 0xf6, 0x87, 0x80, 0xe2, 0x78, 0x25, 0xad, 0x38, 0xa0, 0x9d, 0xda, 0xf7, 0x9e, 0xfc, 0xbe,
	0xcf, 0xef, 0xc5, 0x70, 0x5f, 0x32, 0x99, 0x0f, 0x55, 0x71, 0x21, 0x72, 0x35, 0x58, 0x64, 0x42,
	0x09, 0xdc, 0x52, 0xcb, 0x45, 0x2c, 0xdd, 0xb7, 0x70, 0x10, 0x14, 0xd3, 0x5c, 0xbd, 0x67, 0x2a,
	0x3d, 0x67, 0x09, 0x8f, 0x33, 0xfc, 0x10, 0x2c, 0xa9, 0xff, 0xd9, 0x88, 0x20, 0xaf, 0x43, 0x0d,
	0xc2, 0x04, 0xf6, 0xe6, 0xa1, 0x0a, 0xed, 0x3b, 0x04, 0x79, 0xdd, 0xa3, 0xde, 0x40, 0x1b, 0x0c,
	0xf4, 0x69, 0xaa, 0x15, 0xf7, 0x37, 0x82, 0x96, 0xc6, 0xf8, 0x31, 0xb4, 0x45, 0xae, 0xfc, 0x34,
	0x64, 0xdc, 0xb8, 0x6c, 0x30, 0xb6, 0x61, 0x5f, 0xe4, 0xea, 0x24, 0x94, 0xa9, 0xb6, 0xea, 0xd0,
	0x1b, 0x88, 0x3d, 0xb0, 0x54, 0x11, 0x2c, 0x17, 0xb1, 0xdd, 0x24, 0xc8, 0xbb, 0x77, 0xd4, 0xaf,
	0xcf, 0x28, 0x79, 0x6a, 0xf4, 0xd2, 0x83, 0xf1, 0xca, 0x7e, 0xaf, 0xf2, 0x30, 0x10, 0x3f, 0x83,
	0xbb, 0x8c, 0x8f, 0xbf, 0x88, 0xe8, 0xf2, 0x24, 0x66, 0x49, 0xaa, 0xec, 0x16, 0x41, 0x5e, 0x93,
	0x6e, 0x93, 0xe5, 0x1d, 0x19, 0xd7, 0x2b, 0x58, 0xd5, 0x1d, 0x2b, 0x64, 0xf6, 0x1e, 0x2f, 0x55,
	0x2c, 0xed, 0x7d, 0x82, 0xbc, 0x1e, 0xdd, 0x60, 0xec, 0x42, 0x2f, 0x12, 0x5c, 0x65, 0x61, 0x54,
	0x2d, 0xdf, 0xd6, 0x27, 0xb7, 0x38, 0xf7, 0x13, 0xb4, 0xf5, 0xb2, 0xe7, 0x2c, 0xc1, 0x87, 0xd0,
	0x8a, 0x6a, 0x01, 0x54, 0x00, 0x13, 0xe8, 0xa6, 0xa1, 0x4c, 0x4d, 0xde, 0x26, 0x81, 0x3a, 0x85,
	0x9f, 0x42, 0xa7, 0x84, 0x13, 0x51, 0xea, 0x4d, 0xad, 0xff, 0x25, 0x5c, 0x06, 0x8e, 0x9e, 0xe0,
	0x9b, 0xb1, 0xbe, 0xe0, 0x9f, 0x59, 0x76, 0xf5, 0x1f, 0xfd, 0x0d, 0xb7, 0xfa, 0x7b, 0x52, 0xcf,
	0x76, 0xc7, 0xcc, 0xd4, 0xf9, 0x1d, 0xc1, 0xe1, 0xbf, 0xe4, 0x5b, 0xb6, 0x4b, 0xa0, 0x3b, 0xab,
	0xf5, 0xd2, 0xd4, 0xbd, 0xd4, 0x29, 0xec, 0xc1, 0xc1, 0x4d, 0x9a, 0xa3, 0xf9, 0x3c, 0x8b, 0xa5,
	0x34, 0xed, 0xee, 0xd2, 0x2f, 0x5e, 0x41, 0x67, 0xf3, 0x51, 0x60, 0x00, 0x6b, 0x32, 0xa5, 0x67,
	0xa3, 0xd3, 0x7e, 0x03, 0x3f, 0x82, 0x07, 0xfe, 0x74, 0x12, 0xd0, 0x91, 0x1f, 0x5c, 0xbc, 0x39,
	0x7e, 0x77, 0x3a, 0xfd, 0x70, 0x76, 0x3c, 0x09, 0xfa, 0x68, 0xec, 0xff, 0x58, 0x39, 0xe8, 0x7a,
	0xe5, 0xa0, 0x5f, 0x2b, 0x07, 0x7d, 0x5b, 0x3b, 0x8d, 0xeb, 0xb5, 0xd3, 0xf8, 0xb9, 0x76, 0x1a,
	0x1f, 0x9f, 0x27, 0x4c, 0xa5, 0xf9, 0x6c, 0x10, 0x89, 0xab, 0x61, 0xf9, 0x4e, 0x5e, 0xf2, 0x58,
	0x7d, 0x15, 0xd9, 0xa5, 0x06, 0xc3, 0xa2, 0xfa, 0xd1, 0x61, 0xcd, 0x2c, 0xfd, 0x76, 0x5e, 0xff,
	0x09, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x42, 0x76, 0x45, 0x50, 0x03, 0x00, 0x00,
}

func (m *TxOutWithSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOutWithSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxOutWithSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxOut(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTxOut(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractHash) > 0 {
		i -= len(m.ContractHash)
		copy(dAtA[i:], m.ContractHash)
		i = encodeVarintTxOut(dAtA, i, uint64(len(m.ContractHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OutBytes) > 0 {
		i -= len(m.OutBytes)
		copy(dAtA[i:], m.OutBytes)
		i = encodeVarintTxOut(dAtA, i, uint64(len(m.OutBytes)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InHash) > 0 {
		i -= len(m.InHash)
		copy(dAtA[i:], m.InHash)
		i = encodeVarintTxOut(dAtA, i, uint64(len(m.InHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.InBlockHeight != 0 {
		i = encodeVarintTxOut(dAtA, i, uint64(m.InBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.InChain) > 0 {
		i -= len(m.InChain)
		copy(dAtA[i:], m.InChain)
		i = encodeVarintTxOut(dAtA, i, uint64(len(m.InChain)))
		i--
		dAtA[i] = 0x22
	}
	if m.TxType != 0 {
		i = encodeVarintTxOut(dAtA, i, uint64(m.TxType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OutHash) > 0 {
		i -= len(m.OutHash)
		copy(dAtA[i:], m.OutHash)
		i = encodeVarintTxOut(dAtA, i, uint64(len(m.OutHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutChain) > 0 {
		i -= len(m.OutChain)
		copy(dAtA[i:], m.OutChain)
		i = encodeVarintTxOut(dAtA, i, uint64(len(m.OutChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxOutSig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOutSig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxOutSig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HashNoSig) > 0 {
		i -= len(m.HashNoSig)
		copy(dAtA[i:], m.HashNoSig)
		i = encodeVarintTxOut(dAtA, i, uint64(len(m.HashNoSig)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HashWithSig) > 0 {
		i -= len(m.HashWithSig)
		copy(dAtA[i:], m.HashWithSig)
		i = encodeVarintTxOut(dAtA, i, uint64(len(m.HashWithSig)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTxOut(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxOutContractConfirmWithSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOutContractConfirmWithSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxOutContractConfirmWithSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxOut(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTxOut(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxOutContractConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOutContractConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxOutContractConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTxOut(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTxOut(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OutHash) > 0 {
		i -= len(m.OutHash)
		copy(dAtA[i:], m.OutHash)
		i = encodeVarintTxOut(dAtA, i, uint64(len(m.OutHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutChain) > 0 {
		i -= len(m.OutChain)
		copy(dAtA[i:], m.OutChain)
		i = encodeVarintTxOut(dAtA, i, uint64(len(m.OutChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxOut(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxOut(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxOutWithSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTxOut(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTxOut(uint64(l))
	}
	return n
}

func (m *TxOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OutChain)
	if l > 0 {
		n += 1 + l + sovTxOut(uint64(l))
	}
	l = len(m.OutHash)
	if l > 0 {
		n += 1 + l + sovTxOut(uint64(l))
	}
	if m.TxType != 0 {
		n += 1 + sovTxOut(uint64(m.TxType))
	}
	l = len(m.InChain)
	if l > 0 {
		n += 1 + l + sovTxOut(uint64(l))
	}
	if m.InBlockHeight != 0 {
		n += 1 + sovTxOut(uint64(m.InBlockHeight))
	}
	l = len(m.InHash)
	if l > 0 {
		n += 1 + l + sovTxOut(uint64(l))
	}
	l = len(m.OutBytes)
	if l > 0 {
		n += 1 + l + sovTxOut(uint64(l))
	}
	l = len(m.ContractHash)
	if l > 0 {
		n += 1 + l + sovTxOut(uint64(l))
	}
	return n
}

func (m *TxOutSig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTxOut(uint64(l))
	}
	l = len(m.HashWithSig)
	if l > 0 {
		n += 1 + l + sovTxOut(uint64(l))
	}
	l = len(m.HashNoSig)
	if l > 0 {
		n += 1 + l + sovTxOut(uint64(l))
	}
	return n
}

func (m *TxOutContractConfirmWithSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTxOut(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTxOut(uint64(l))
	}
	return n
}

func (m *TxOutContractConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OutChain)
	if l > 0 {
		n += 1 + l + sovTxOut(uint64(l))
	}
	l = len(m.OutHash)
	if l > 0 {
		n += 1 + l + sovTxOut(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTxOut(uint64(m.BlockHeight))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTxOut(uint64(l))
	}
	return n
}

func sovTxOut(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxOut(x uint64) (n int) {
	return sovTxOut(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxOutWithSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOut
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOutWithSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOutWithSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TxOut{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxOut(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOut
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOut
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			m.TxType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxType |= TxOutType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBlockHeight", wireType)
			}
			m.InBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutBytes = append(m.OutBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.OutBytes == nil {
				m.OutBytes = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxOut(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOut
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxOutSig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOut
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOutSig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOutSig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashWithSig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashWithSig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashNoSig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashNoSig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxOut(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOut
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxOutContractConfirmWithSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOut
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOutContractConfirmWithSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOutContractConfirmWithSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TxOutContractConfirm{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxOut(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOut
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxOutContractConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOut
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOutContractConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOutContractConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOut
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOut
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxOut(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOut
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxOut(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxOut
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxOut
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxOut
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxOut
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxOut
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxOut        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxOut          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxOut = fmt.Errorf("proto: unexpected end of group")
)
