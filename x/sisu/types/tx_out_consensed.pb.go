// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/tx_out_consensed.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxOutConsensed struct {
	AssignedValidator string     `protobuf:"bytes,1,opt,name=assigned_validator,json=assignedValidator,proto3" json:"assigned_validator,omitempty"`
	TxOutId           string     `protobuf:"bytes,2,opt,name=tx_out_id,json=txOutId,proto3" json:"tx_out_id,omitempty"`
	Vote              VoteResult `protobuf:"varint,3,opt,name=vote,proto3,enum=types.VoteResult" json:"vote,omitempty"`
}

func (m *TxOutConsensed) Reset()         { *m = TxOutConsensed{} }
func (m *TxOutConsensed) String() string { return proto.CompactTextString(m) }
func (*TxOutConsensed) ProtoMessage()    {}
func (*TxOutConsensed) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0947d1dc93a8bb0, []int{0}
}
func (m *TxOutConsensed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOutConsensed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOutConsensed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxOutConsensed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOutConsensed.Merge(m, src)
}
func (m *TxOutConsensed) XXX_Size() int {
	return m.Size()
}
func (m *TxOutConsensed) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOutConsensed.DiscardUnknown(m)
}

var xxx_messageInfo_TxOutConsensed proto.InternalMessageInfo

func (m *TxOutConsensed) GetAssignedValidator() string {
	if m != nil {
		return m.AssignedValidator
	}
	return ""
}

func (m *TxOutConsensed) GetTxOutId() string {
	if m != nil {
		return m.TxOutId
	}
	return ""
}

func (m *TxOutConsensed) GetVote() VoteResult {
	if m != nil {
		return m.Vote
	}
	return VoteResult_REJECT
}

type TxOutConsensedMsg struct {
	Signer string          `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Data   *TxOutConsensed `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TxOutConsensedMsg) Reset()         { *m = TxOutConsensedMsg{} }
func (m *TxOutConsensedMsg) String() string { return proto.CompactTextString(m) }
func (*TxOutConsensedMsg) ProtoMessage()    {}
func (*TxOutConsensedMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0947d1dc93a8bb0, []int{1}
}
func (m *TxOutConsensedMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOutConsensedMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOutConsensedMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxOutConsensedMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOutConsensedMsg.Merge(m, src)
}
func (m *TxOutConsensedMsg) XXX_Size() int {
	return m.Size()
}
func (m *TxOutConsensedMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOutConsensedMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TxOutConsensedMsg proto.InternalMessageInfo

func (m *TxOutConsensedMsg) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *TxOutConsensedMsg) GetData() *TxOutConsensed {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*TxOutConsensed)(nil), "types.TxOutConsensed")
	proto.RegisterType((*TxOutConsensedMsg)(nil), "types.TxOutConsensedMsg")
}

func init() { proto.RegisterFile("sisu/tx_out_consensed.proto", fileDescriptor_b0947d1dc93a8bb0) }

var fileDescriptor_b0947d1dc93a8bb0 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0xce, 0x2c, 0x2e,
	0xd5, 0x2f, 0xa9, 0x88, 0xcf, 0x2f, 0x2d, 0x89, 0x4f, 0xce, 0xcf, 0x2b, 0x4e, 0xcd, 0x2b, 0x4e,
	0x4d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x96, 0x12,
	0x03, 0xab, 0x29, 0xcb, 0x2f, 0x49, 0x8d, 0x2f, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0x81, 0x48, 0x2b,
	0x35, 0x31, 0x72, 0xf1, 0x85, 0x54, 0xf8, 0x97, 0x96, 0x38, 0xc3, 0xf4, 0x09, 0xe9, 0x72, 0x09,
	0x25, 0x16, 0x17, 0x67, 0xa6, 0xe7, 0xa5, 0xa6, 0xc4, 0x97, 0x25, 0xe6, 0x64, 0xa6, 0x24, 0x96,
	0xe4, 0x17, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x09, 0xc2, 0x64, 0xc2, 0x60, 0x12, 0x42,
	0x52, 0x5c, 0x9c, 0x50, 0xab, 0x33, 0x53, 0x24, 0x98, 0xc0, 0xaa, 0xd8, 0x4b, 0x40, 0x26, 0x7a,
	0xa6, 0x08, 0xa9, 0x72, 0xb1, 0x80, 0xac, 0x94, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x33, 0x12, 0xd4,
	0x03, 0xbb, 0x45, 0x2f, 0x2c, 0xbf, 0x24, 0x35, 0x08, 0xec, 0x88, 0x20, 0xb0, 0xb4, 0x52, 0x18,
	0x97, 0x20, 0xaa, 0x1b, 0x7c, 0x8b, 0xd3, 0x85, 0xc4, 0xb8, 0xd8, 0xc0, 0x56, 0xc1, 0xac, 0x86,
	0xf2, 0x84, 0x34, 0xb9, 0x58, 0x52, 0x12, 0x4b, 0x12, 0xc1, 0x56, 0x71, 0x1b, 0x89, 0x42, 0xcd,
	0x44, 0xd5, 0x1f, 0x04, 0x56, 0xe2, 0xe4, 0x7c, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c,
	0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72,
	0x0c, 0x51, 0x9a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xa0, 0x90,
	0xd1, 0xcd, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0x06, 0x73, 0xf4, 0x2b, 0x20, 0x14, 0xd8, 0xe4,
	0x24, 0x36, 0x70, 0x40, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xf8, 0x4c, 0x4d, 0x66,
	0x01, 0x00, 0x00,
}

func (m *TxOutConsensed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOutConsensed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxOutConsensed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != 0 {
		i = encodeVarintTxOutConsensed(dAtA, i, uint64(m.Vote))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxOutId) > 0 {
		i -= len(m.TxOutId)
		copy(dAtA[i:], m.TxOutId)
		i = encodeVarintTxOutConsensed(dAtA, i, uint64(len(m.TxOutId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssignedValidator) > 0 {
		i -= len(m.AssignedValidator)
		copy(dAtA[i:], m.AssignedValidator)
		i = encodeVarintTxOutConsensed(dAtA, i, uint64(len(m.AssignedValidator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxOutConsensedMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOutConsensedMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxOutConsensedMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxOutConsensed(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTxOutConsensed(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxOutConsensed(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxOutConsensed(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxOutConsensed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssignedValidator)
	if l > 0 {
		n += 1 + l + sovTxOutConsensed(uint64(l))
	}
	l = len(m.TxOutId)
	if l > 0 {
		n += 1 + l + sovTxOutConsensed(uint64(l))
	}
	if m.Vote != 0 {
		n += 1 + sovTxOutConsensed(uint64(m.Vote))
	}
	return n
}

func (m *TxOutConsensedMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTxOutConsensed(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTxOutConsensed(uint64(l))
	}
	return n
}

func sovTxOutConsensed(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxOutConsensed(x uint64) (n int) {
	return sovTxOutConsensed(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxOutConsensed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOutConsensed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOutConsensed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOutConsensed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutConsensed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOutConsensed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOutConsensed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignedValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOutId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutConsensed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOutConsensed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOutConsensed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOutId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutConsensed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= VoteResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxOutConsensed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOutConsensed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxOutConsensedMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOutConsensed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOutConsensedMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOutConsensedMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutConsensed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOutConsensed
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOutConsensed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutConsensed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxOutConsensed
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxOutConsensed
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TxOutConsensed{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxOutConsensed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOutConsensed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxOutConsensed(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxOutConsensed
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxOutConsensed
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxOutConsensed
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxOutConsensed
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxOutConsensed
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxOutConsensed
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxOutConsensed        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxOutConsensed          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxOutConsensed = fmt.Errorf("proto: unexpected end of group")
)
