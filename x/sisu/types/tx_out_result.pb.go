// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/tx_out_result.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxOutResultType int32

const (
	TxOutResultType_UNKNOWN                   TxOutResultType = 0
	TxOutResultType_IN_BLOCK_SUCCESS          TxOutResultType = 1
	TxOutResultType_IN_BLOCK_FAILURE          TxOutResultType = 2
	TxOutResultType_NOT_ENOUGH_NATIVE_BALANCE TxOutResultType = 3
	TxOutResultType_TIMEOUT                   TxOutResultType = 4
)

var TxOutResultType_name = map[int32]string{
	0: "UNKNOWN",
	1: "IN_BLOCK_SUCCESS",
	2: "IN_BLOCK_FAILURE",
	3: "NOT_ENOUGH_NATIVE_BALANCE",
	4: "TIMEOUT",
}

var TxOutResultType_value = map[string]int32{
	"UNKNOWN":                   0,
	"IN_BLOCK_SUCCESS":          1,
	"IN_BLOCK_FAILURE":          2,
	"NOT_ENOUGH_NATIVE_BALANCE": 3,
	"TIMEOUT":                   4,
}

func (x TxOutResultType) String() string {
	return proto.EnumName(TxOutResultType_name, int32(x))
}

func (TxOutResultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_87749bdc54c135cb, []int{0}
}

type TxOutResultMsg struct {
	Signer string       `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Data   *TxOutResult `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TxOutResultMsg) Reset()         { *m = TxOutResultMsg{} }
func (m *TxOutResultMsg) String() string { return proto.CompactTextString(m) }
func (*TxOutResultMsg) ProtoMessage()    {}
func (*TxOutResultMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_87749bdc54c135cb, []int{0}
}
func (m *TxOutResultMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOutResultMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOutResultMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxOutResultMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOutResultMsg.Merge(m, src)
}
func (m *TxOutResultMsg) XXX_Size() int {
	return m.Size()
}
func (m *TxOutResultMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOutResultMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TxOutResultMsg proto.InternalMessageInfo

func (m *TxOutResultMsg) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *TxOutResultMsg) GetData() *TxOutResult {
	if m != nil {
		return m.Data
	}
	return nil
}

type TxOutResult struct {
	Result      TxOutResultType `protobuf:"varint,1,opt,name=result,proto3,enum=types.TxOutResultType" json:"result,omitempty"`
	OutChain    string          `protobuf:"bytes,2,opt,name=outChain,proto3" json:"outChain,omitempty"`
	OutHash     string          `protobuf:"bytes,3,opt,name=outHash,proto3" json:"outHash,omitempty"`
	BlockHeight int64           `protobuf:"varint,4,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Nonce       int64           `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *TxOutResult) Reset()         { *m = TxOutResult{} }
func (m *TxOutResult) String() string { return proto.CompactTextString(m) }
func (*TxOutResult) ProtoMessage()    {}
func (*TxOutResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_87749bdc54c135cb, []int{1}
}
func (m *TxOutResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOutResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOutResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxOutResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOutResult.Merge(m, src)
}
func (m *TxOutResult) XXX_Size() int {
	return m.Size()
}
func (m *TxOutResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOutResult.DiscardUnknown(m)
}

var xxx_messageInfo_TxOutResult proto.InternalMessageInfo

func (m *TxOutResult) GetResult() TxOutResultType {
	if m != nil {
		return m.Result
	}
	return TxOutResultType_UNKNOWN
}

func (m *TxOutResult) GetOutChain() string {
	if m != nil {
		return m.OutChain
	}
	return ""
}

func (m *TxOutResult) GetOutHash() string {
	if m != nil {
		return m.OutHash
	}
	return ""
}

func (m *TxOutResult) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TxOutResult) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func init() {
	proto.RegisterEnum("types.TxOutResultType", TxOutResultType_name, TxOutResultType_value)
	proto.RegisterType((*TxOutResultMsg)(nil), "types.TxOutResultMsg")
	proto.RegisterType((*TxOutResult)(nil), "types.TxOutResult")
}

func init() { proto.RegisterFile("sisu/tx_out_result.proto", fileDescriptor_87749bdc54c135cb) }

var fileDescriptor_87749bdc54c135cb = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcf, 0x6a, 0xea, 0x40,
	0x18, 0xc5, 0x33, 0xfe, 0xbd, 0x4e, 0xc0, 0x1b, 0x06, 0x91, 0xdc, 0x0b, 0x37, 0x04, 0x17, 0x17,
	0x5b, 0x68, 0x04, 0xfb, 0x04, 0x31, 0xa4, 0x35, 0xa8, 0x93, 0x12, 0x93, 0x16, 0xba, 0x09, 0xd1,
	0x86, 0x24, 0x68, 0x33, 0x92, 0xcc, 0xb4, 0xfa, 0x16, 0x7d, 0x8f, 0xbe, 0x48, 0x97, 0x2e, 0xbb,
	0x2c, 0xfa, 0x22, 0xc5, 0xd1, 0x16, 0xdb, 0xae, 0x86, 0xdf, 0x39, 0x73, 0xbe, 0x6f, 0x98, 0x03,
	0xe5, 0x3c, 0xc9, 0x59, 0x87, 0x2e, 0x7d, 0xc2, 0xa8, 0x9f, 0x85, 0x39, 0x9b, 0x53, 0x6d, 0x91,
	0x11, 0x4a, 0x50, 0x99, 0xae, 0x16, 0x61, 0xde, 0xba, 0x82, 0x75, 0x77, 0x69, 0x33, 0xea, 0x70,
	0x6f, 0x94, 0x47, 0xa8, 0x09, 0x2b, 0x79, 0x12, 0xa5, 0x61, 0x26, 0x03, 0x15, 0xb4, 0x6b, 0xce,
	0x81, 0xd0, 0x7f, 0x58, 0xba, 0x0b, 0x68, 0x20, 0x17, 0x54, 0xd0, 0x16, 0xbb, 0x48, 0xe3, 0x79,
	0xed, 0x28, 0xec, 0x70, 0xbf, 0xf5, 0x0c, 0xa0, 0x78, 0xa4, 0x22, 0x0d, 0x56, 0xf6, 0x8b, 0xf9,
	0xbc, 0x7a, 0xb7, 0xf9, 0x33, 0xe9, 0xae, 0x16, 0xa1, 0x73, 0xb8, 0x85, 0xfe, 0xc2, 0x5f, 0x84,
	0x51, 0x23, 0x0e, 0x92, 0x94, 0xef, 0xaa, 0x39, 0x9f, 0x8c, 0x64, 0x58, 0x25, 0x8c, 0xf6, 0x83,
	0x3c, 0x96, 0x8b, 0xdc, 0xfa, 0x40, 0xa4, 0x42, 0x71, 0x32, 0x27, 0xd3, 0x59, 0x3f, 0x4c, 0xa2,
	0x98, 0xca, 0x25, 0x15, 0xb4, 0x8b, 0xce, 0xb1, 0x84, 0x1a, 0xb0, 0x9c, 0x92, 0x74, 0x1a, 0xca,
	0x65, 0xee, 0xed, 0xe1, 0xf4, 0x01, 0xfe, 0xfe, 0xf6, 0x10, 0x24, 0xc2, 0xaa, 0x87, 0x07, 0xd8,
	0xbe, 0xc1, 0x92, 0x80, 0x1a, 0x50, 0xb2, 0xb0, 0xdf, 0x1b, 0xda, 0xc6, 0xc0, 0x1f, 0x7b, 0x86,
	0x61, 0x8e, 0xc7, 0x12, 0xf8, 0xa2, 0x5e, 0xe8, 0xd6, 0xd0, 0x73, 0x4c, 0xa9, 0x80, 0xfe, 0xc1,
	0x3f, 0xd8, 0x76, 0x7d, 0x13, 0xdb, 0xde, 0x65, 0xdf, 0xc7, 0xba, 0x6b, 0x5d, 0x9b, 0x7e, 0x4f,
	0x1f, 0xea, 0xd8, 0x30, 0xa5, 0xe2, 0x6e, 0xae, 0x6b, 0x8d, 0x4c, 0xdb, 0x73, 0xa5, 0x52, 0xcf,
	0x78, 0xd9, 0x28, 0x60, 0xbd, 0x51, 0xc0, 0xdb, 0x46, 0x01, 0x4f, 0x5b, 0x45, 0x58, 0x6f, 0x15,
	0xe1, 0x75, 0xab, 0x08, 0xb7, 0x27, 0x51, 0x42, 0x63, 0x36, 0xd1, 0xa6, 0xe4, 0xbe, 0xb3, 0x6b,
	0xef, 0x2c, 0x0d, 0xe9, 0x23, 0xc9, 0x66, 0x1c, 0x3a, 0xcb, 0xfd, 0xc1, 0xbf, 0x70, 0x52, 0xe1,
	0x55, 0x9e, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0x75, 0x18, 0x98, 0x6b, 0xe6, 0x01, 0x00, 0x00,
}

func (m *TxOutResultMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOutResultMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxOutResultMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxOutResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTxOutResult(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxOutResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOutResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxOutResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTxOutResult(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x28
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTxOutResult(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OutHash) > 0 {
		i -= len(m.OutHash)
		copy(dAtA[i:], m.OutHash)
		i = encodeVarintTxOutResult(dAtA, i, uint64(len(m.OutHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OutChain) > 0 {
		i -= len(m.OutChain)
		copy(dAtA[i:], m.OutChain)
		i = encodeVarintTxOutResult(dAtA, i, uint64(len(m.OutChain)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != 0 {
		i = encodeVarintTxOutResult(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxOutResult(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxOutResult(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxOutResultMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTxOutResult(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTxOutResult(uint64(l))
	}
	return n
}

func (m *TxOutResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovTxOutResult(uint64(m.Result))
	}
	l = len(m.OutChain)
	if l > 0 {
		n += 1 + l + sovTxOutResult(uint64(l))
	}
	l = len(m.OutHash)
	if l > 0 {
		n += 1 + l + sovTxOutResult(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTxOutResult(uint64(m.BlockHeight))
	}
	if m.Nonce != 0 {
		n += 1 + sovTxOutResult(uint64(m.Nonce))
	}
	return n
}

func sovTxOutResult(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxOutResult(x uint64) (n int) {
	return sovTxOutResult(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxOutResultMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOutResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOutResultMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOutResultMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOutResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOutResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxOutResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxOutResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TxOutResult{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxOutResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOutResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxOutResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOutResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOutResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOutResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= TxOutResultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOutResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOutResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOutResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOutResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxOutResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOutResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxOutResult(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxOutResult
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxOutResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxOutResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxOutResult
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxOutResult
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxOutResult
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxOutResult        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxOutResult          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxOutResult = fmt.Errorf("proto: unexpected end of group")
)
