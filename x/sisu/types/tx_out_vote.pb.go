// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/tx_out_vote.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxOutVote struct {
	AssignedValidator string     `protobuf:"bytes,1,opt,name=assigned_validator,json=assignedValidator,proto3" json:"assigned_validator,omitempty"`
	TxOutId           string     `protobuf:"bytes,2,opt,name=tx_out_id,json=txOutId,proto3" json:"tx_out_id,omitempty"`
	Vote              VoteResult `protobuf:"varint,3,opt,name=vote,proto3,enum=types.VoteResult" json:"vote,omitempty"`
}

func (m *TxOutVote) Reset()         { *m = TxOutVote{} }
func (m *TxOutVote) String() string { return proto.CompactTextString(m) }
func (*TxOutVote) ProtoMessage()    {}
func (*TxOutVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f4e671c7679bb9d, []int{0}
}
func (m *TxOutVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOutVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOutVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxOutVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOutVote.Merge(m, src)
}
func (m *TxOutVote) XXX_Size() int {
	return m.Size()
}
func (m *TxOutVote) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOutVote.DiscardUnknown(m)
}

var xxx_messageInfo_TxOutVote proto.InternalMessageInfo

func (m *TxOutVote) GetAssignedValidator() string {
	if m != nil {
		return m.AssignedValidator
	}
	return ""
}

func (m *TxOutVote) GetTxOutId() string {
	if m != nil {
		return m.TxOutId
	}
	return ""
}

func (m *TxOutVote) GetVote() VoteResult {
	if m != nil {
		return m.Vote
	}
	return VoteResult_REJECT
}

type TxOutVoteMsg struct {
	Signer string     `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Data   *TxOutVote `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TxOutVoteMsg) Reset()         { *m = TxOutVoteMsg{} }
func (m *TxOutVoteMsg) String() string { return proto.CompactTextString(m) }
func (*TxOutVoteMsg) ProtoMessage()    {}
func (*TxOutVoteMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f4e671c7679bb9d, []int{1}
}
func (m *TxOutVoteMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxOutVoteMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxOutVoteMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxOutVoteMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxOutVoteMsg.Merge(m, src)
}
func (m *TxOutVoteMsg) XXX_Size() int {
	return m.Size()
}
func (m *TxOutVoteMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TxOutVoteMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TxOutVoteMsg proto.InternalMessageInfo

func (m *TxOutVoteMsg) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *TxOutVoteMsg) GetData() *TxOutVote {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*TxOutVote)(nil), "types.TxOutVote")
	proto.RegisterType((*TxOutVoteMsg)(nil), "types.TxOutVoteMsg")
}

func init() { proto.RegisterFile("sisu/tx_out_vote.proto", fileDescriptor_2f4e671c7679bb9d) }

var fileDescriptor_2f4e671c7679bb9d = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0xce, 0x2c, 0x2e,
	0xd5, 0x2f, 0xa9, 0x88, 0xcf, 0x2f, 0x2d, 0x89, 0x2f, 0xcb, 0x2f, 0x49, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x96, 0x82, 0x48, 0x83, 0xc4, 0xe3, 0x8b,
	0x52, 0x8b, 0x4b, 0x73, 0x4a, 0x20, 0xd2, 0x4a, 0xb5, 0x5c, 0x9c, 0x21, 0x15, 0xfe, 0xa5, 0x25,
	0x61, 0xf9, 0x25, 0xa9, 0x42, 0xba, 0x5c, 0x42, 0x89, 0xc5, 0xc5, 0x99, 0xe9, 0x79, 0xa9, 0x29,
	0xf1, 0x65, 0x89, 0x39, 0x99, 0x29, 0x89, 0x25, 0xf9, 0x45, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c,
	0x41, 0x82, 0x30, 0x99, 0x30, 0x98, 0x84, 0x90, 0x14, 0x17, 0x27, 0xd4, 0xbe, 0xcc, 0x14, 0x09,
	0x26, 0xb0, 0x2a, 0xf6, 0x12, 0x90, 0x61, 0x9e, 0x29, 0x42, 0xaa, 0x5c, 0x2c, 0x20, 0xcb, 0x24,
	0x98, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x04, 0xf5, 0xc0, 0xae, 0xd0, 0x03, 0xd9, 0x12, 0x04, 0xb6,
	0x3e, 0x08, 0x2c, 0xad, 0xe4, 0xc3, 0xc5, 0x03, 0xb7, 0xde, 0xb7, 0x38, 0x5d, 0x48, 0x8c, 0x8b,
	0x0d, 0x6c, 0x0b, 0xcc, 0x56, 0x28, 0x4f, 0x48, 0x85, 0x8b, 0x25, 0x25, 0xb1, 0x24, 0x11, 0x6c,
	0x0b, 0xb7, 0x91, 0x00, 0xd4, 0x38, 0xb8, 0xd6, 0x20, 0xb0, 0xac, 0x93, 0xf3, 0x89, 0x47, 0x72,
	0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7,
	0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x69, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25,
	0xe7, 0xe7, 0xea, 0x83, 0x42, 0x42, 0x37, 0x2f, 0xb5, 0xa4, 0x3c, 0xbf, 0x28, 0x1b, 0xcc, 0xd1,
	0xaf, 0x80, 0x50, 0x60, 0x43, 0x93, 0xd8, 0xc0, 0x01, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x75, 0x88, 0x20, 0x7f, 0x51, 0x01, 0x00, 0x00,
}

func (m *TxOutVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOutVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxOutVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vote != 0 {
		i = encodeVarintTxOutVote(dAtA, i, uint64(m.Vote))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxOutId) > 0 {
		i -= len(m.TxOutId)
		copy(dAtA[i:], m.TxOutId)
		i = encodeVarintTxOutVote(dAtA, i, uint64(len(m.TxOutId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssignedValidator) > 0 {
		i -= len(m.AssignedValidator)
		copy(dAtA[i:], m.AssignedValidator)
		i = encodeVarintTxOutVote(dAtA, i, uint64(len(m.AssignedValidator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxOutVoteMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxOutVoteMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxOutVoteMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxOutVote(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTxOutVote(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxOutVote(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxOutVote(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxOutVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssignedValidator)
	if l > 0 {
		n += 1 + l + sovTxOutVote(uint64(l))
	}
	l = len(m.TxOutId)
	if l > 0 {
		n += 1 + l + sovTxOutVote(uint64(l))
	}
	if m.Vote != 0 {
		n += 1 + sovTxOutVote(uint64(m.Vote))
	}
	return n
}

func (m *TxOutVoteMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTxOutVote(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTxOutVote(uint64(l))
	}
	return n
}

func sovTxOutVote(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxOutVote(x uint64) (n int) {
	return sovTxOutVote(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxOutVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOutVote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOutVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOutVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOutVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOutVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignedValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOutId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOutVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOutVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOutId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= VoteResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxOutVote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOutVote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxOutVoteMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxOutVote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxOutVoteMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxOutVoteMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxOutVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxOutVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxOutVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxOutVote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxOutVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TxOutVote{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxOutVote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxOutVote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxOutVote(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxOutVote
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxOutVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxOutVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxOutVote
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxOutVote
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxOutVote
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxOutVote        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxOutVote          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxOutVote = fmt.Errorf("proto: unexpected end of group")
)
