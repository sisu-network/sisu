// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sisu/update_token_price.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdateTokenPrice struct {
	Signer      string        `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	TokenPrices []*TokenPrice `protobuf:"bytes,2,rep,name=tokenPrices,proto3" json:"tokenPrices,omitempty"`
}

func (m *UpdateTokenPrice) Reset()         { *m = UpdateTokenPrice{} }
func (m *UpdateTokenPrice) String() string { return proto.CompactTextString(m) }
func (*UpdateTokenPrice) ProtoMessage()    {}
func (*UpdateTokenPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_1787bd109bd5aabf, []int{0}
}
func (m *UpdateTokenPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTokenPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTokenPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTokenPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTokenPrice.Merge(m, src)
}
func (m *UpdateTokenPrice) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTokenPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTokenPrice.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTokenPrice proto.InternalMessageInfo

func (m *UpdateTokenPrice) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *UpdateTokenPrice) GetTokenPrices() []*TokenPrice {
	if m != nil {
		return m.TokenPrices
	}
	return nil
}

type TokenPrice struct {
	Id    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Price float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *TokenPrice) Reset()         { *m = TokenPrice{} }
func (m *TokenPrice) String() string { return proto.CompactTextString(m) }
func (*TokenPrice) ProtoMessage()    {}
func (*TokenPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_1787bd109bd5aabf, []int{1}
}
func (m *TokenPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPrice.Merge(m, src)
}
func (m *TokenPrice) XXX_Size() int {
	return m.Size()
}
func (m *TokenPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPrice.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPrice proto.InternalMessageInfo

func (m *TokenPrice) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TokenPrice) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

// The record that is saved into db per token.
type TokenPriceRecord struct {
	// Key: token, Value: BlockHeightPricePair
	Prices map[string]*BlockHeightPricePair `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TokenPriceRecord) Reset()         { *m = TokenPriceRecord{} }
func (m *TokenPriceRecord) String() string { return proto.CompactTextString(m) }
func (*TokenPriceRecord) ProtoMessage()    {}
func (*TokenPriceRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_1787bd109bd5aabf, []int{2}
}
func (m *TokenPriceRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenPriceRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenPriceRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenPriceRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPriceRecord.Merge(m, src)
}
func (m *TokenPriceRecord) XXX_Size() int {
	return m.Size()
}
func (m *TokenPriceRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPriceRecord.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPriceRecord proto.InternalMessageInfo

func (m *TokenPriceRecord) GetPrices() map[string]*BlockHeightPricePair {
	if m != nil {
		return m.Prices
	}
	return nil
}

type BlockHeightPricePair struct {
	BlockHeight uint64  `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Price       float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *BlockHeightPricePair) Reset()         { *m = BlockHeightPricePair{} }
func (m *BlockHeightPricePair) String() string { return proto.CompactTextString(m) }
func (*BlockHeightPricePair) ProtoMessage()    {}
func (*BlockHeightPricePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_1787bd109bd5aabf, []int{3}
}
func (m *BlockHeightPricePair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeightPricePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeightPricePair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeightPricePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeightPricePair.Merge(m, src)
}
func (m *BlockHeightPricePair) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeightPricePair) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeightPricePair.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeightPricePair proto.InternalMessageInfo

func (m *BlockHeightPricePair) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BlockHeightPricePair) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func init() {
	proto.RegisterType((*UpdateTokenPrice)(nil), "types.UpdateTokenPrice")
	proto.RegisterType((*TokenPrice)(nil), "types.TokenPrice")
	proto.RegisterType((*TokenPriceRecord)(nil), "types.TokenPriceRecord")
	proto.RegisterMapType((map[string]*BlockHeightPricePair)(nil), "types.TokenPriceRecord.PricesEntry")
	proto.RegisterType((*BlockHeightPricePair)(nil), "types.BlockHeightPricePair")
}

func init() { proto.RegisterFile("sisu/update_token_price.proto", fileDescriptor_1787bd109bd5aabf) }

var fileDescriptor_1787bd109bd5aabf = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcd, 0x4a, 0xeb, 0x40,
	0x14, 0xc7, 0x3b, 0xe9, 0x6d, 0xe1, 0x9e, 0x80, 0xd4, 0xa1, 0x48, 0x51, 0x1c, 0x42, 0xdc, 0xd4,
	0x85, 0x29, 0xb6, 0x1b, 0xd1, 0x5d, 0x45, 0x70, 0x25, 0x65, 0x50, 0x17, 0x6e, 0x4a, 0x9b, 0x0c,
	0xe9, 0x90, 0x9a, 0x09, 0x93, 0x89, 0x9a, 0xb7, 0xf0, 0x2d, 0x7c, 0x15, 0x97, 0x5d, 0xba, 0x94,
	0xe4, 0x45, 0x24, 0x33, 0xc1, 0x06, 0xec, 0x2a, 0x39, 0x87, 0xdf, 0xff, 0x63, 0x38, 0x70, 0x9c,
	0xf2, 0x34, 0x1b, 0x65, 0x49, 0xb0, 0x50, 0x6c, 0xae, 0x44, 0xc4, 0xe2, 0x79, 0x22, 0xb9, 0xcf,
	0xbc, 0x44, 0x0a, 0x25, 0x70, 0x47, 0xe5, 0x09, 0x4b, 0xdd, 0x39, 0xf4, 0x1e, 0x34, 0x72, 0x5f,
	0x11, 0xb3, 0x0a, 0xc0, 0x07, 0xd0, 0x4d, 0x79, 0x18, 0x33, 0x39, 0x40, 0x0e, 0x1a, 0xfe, 0xa7,
	0xf5, 0x84, 0x27, 0x60, 0xab, 0x5f, 0x2a, 0x1d, 0x58, 0x4e, 0x7b, 0x68, 0x8f, 0xf7, 0x3d, 0x6d,
	0xe4, 0x6d, 0xf5, 0xb4, 0x49, 0xb9, 0x63, 0x80, 0x86, 0xf5, 0x1e, 0x58, 0x3c, 0xa8, 0x6d, 0x2d,
	0x1e, 0xe0, 0x3e, 0x74, 0x74, 0xa9, 0x81, 0xe5, 0xa0, 0x21, 0xa2, 0x66, 0x70, 0x3f, 0x10, 0xf4,
	0x1a, 0x7e, 0xcc, 0x17, 0x32, 0xc0, 0x57, 0xd0, 0x4d, 0x4c, 0x30, 0xd2, 0xc1, 0x27, 0x7f, 0x83,
	0x35, 0xe8, 0x99, 0xe0, 0x9b, 0x58, 0xc9, 0x9c, 0xd6, 0x92, 0xc3, 0x47, 0xb0, 0x1b, 0x6b, 0xdc,
	0x83, 0x76, 0xc4, 0xf2, 0xba, 0x47, 0xf5, 0x8b, 0xcf, 0xa1, 0xf3, 0xb2, 0x58, 0x67, 0xa6, 0x88,
	0x3d, 0x3e, 0xaa, 0xcd, 0xa7, 0x6b, 0xe1, 0x47, 0xb7, 0x8c, 0x87, 0x2b, 0xa5, 0xf5, 0xb3, 0x05,
	0x97, 0xd4, 0x90, 0x97, 0xd6, 0x05, 0x72, 0xef, 0xa0, 0xbf, 0x0b, 0xc1, 0x0e, 0xd8, 0xcb, 0xed,
	0x5e, 0x07, 0xfd, 0xa3, 0xcd, 0xd5, 0xee, 0x97, 0x4f, 0xaf, 0x3f, 0x0b, 0x82, 0x36, 0x05, 0x41,
	0xdf, 0x05, 0x41, 0xef, 0x25, 0x69, 0x6d, 0x4a, 0xd2, 0xfa, 0x2a, 0x49, 0xeb, 0xe9, 0x34, 0xe4,
	0x6a, 0x95, 0x2d, 0x3d, 0x5f, 0x3c, 0x8f, 0xaa, 0xcb, 0x9e, 0xc5, 0x4c, 0xbd, 0x0a, 0x19, 0xe9,
	0x61, 0xf4, 0x66, 0x3e, 0xba, 0xf4, 0xb2, 0xab, 0x2f, 0x3c, 0xf9, 0x09, 0x00, 0x00, 0xff, 0xff,
	0xd5, 0xd7, 0xf1, 0x77, 0x02, 0x02, 0x00, 0x00,
}

func (m *UpdateTokenPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTokenPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTokenPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenPrices) > 0 {
		for iNdEx := len(m.TokenPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdateTokenPrice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintUpdateTokenPrice(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintUpdateTokenPrice(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenPriceRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPriceRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenPriceRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for k := range m.Prices {
			v := m.Prices[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintUpdateTokenPrice(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintUpdateTokenPrice(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintUpdateTokenPrice(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockHeightPricePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeightPricePair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeightPricePair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x11
	}
	if m.BlockHeight != 0 {
		i = encodeVarintUpdateTokenPrice(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUpdateTokenPrice(dAtA []byte, offset int, v uint64) int {
	offset -= sovUpdateTokenPrice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateTokenPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovUpdateTokenPrice(uint64(l))
	}
	if len(m.TokenPrices) > 0 {
		for _, e := range m.TokenPrices {
			l = e.Size()
			n += 1 + l + sovUpdateTokenPrice(uint64(l))
		}
	}
	return n
}

func (m *TokenPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovUpdateTokenPrice(uint64(l))
	}
	if m.Price != 0 {
		n += 9
	}
	return n
}

func (m *TokenPriceRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for k, v := range m.Prices {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovUpdateTokenPrice(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovUpdateTokenPrice(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovUpdateTokenPrice(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BlockHeightPricePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovUpdateTokenPrice(uint64(m.BlockHeight))
	}
	if m.Price != 0 {
		n += 9
	}
	return n
}

func sovUpdateTokenPrice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUpdateTokenPrice(x uint64) (n int) {
	return sovUpdateTokenPrice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateTokenPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdateTokenPrice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTokenPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTokenPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdateTokenPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdateTokenPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdateTokenPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdateTokenPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdateTokenPrice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdateTokenPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPrices = append(m.TokenPrices, &TokenPrice{})
			if err := m.TokenPrices[len(m.TokenPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpdateTokenPrice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdateTokenPrice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdateTokenPrice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdateTokenPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdateTokenPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdateTokenPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipUpdateTokenPrice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdateTokenPrice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenPriceRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdateTokenPrice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenPriceRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenPriceRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdateTokenPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdateTokenPrice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdateTokenPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prices == nil {
				m.Prices = make(map[string]*BlockHeightPricePair)
			}
			var mapkey string
			var mapvalue *BlockHeightPricePair
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUpdateTokenPrice
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUpdateTokenPrice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthUpdateTokenPrice
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthUpdateTokenPrice
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUpdateTokenPrice
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUpdateTokenPrice
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthUpdateTokenPrice
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BlockHeightPricePair{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUpdateTokenPrice(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthUpdateTokenPrice
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Prices[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpdateTokenPrice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdateTokenPrice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeightPricePair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdateTokenPrice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeightPricePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeightPricePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdateTokenPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipUpdateTokenPrice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdateTokenPrice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpdateTokenPrice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpdateTokenPrice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdateTokenPrice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdateTokenPrice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUpdateTokenPrice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUpdateTokenPrice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUpdateTokenPrice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUpdateTokenPrice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpdateTokenPrice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUpdateTokenPrice = fmt.Errorf("proto: unexpected end of group")
)
