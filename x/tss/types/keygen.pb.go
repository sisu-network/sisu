// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: keygen.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeygenResult_Result int32

const (
	KeygenResult_SUCCESS KeygenResult_Result = 0
	KeygenResult_FAILURE KeygenResult_Result = 1
)

var KeygenResult_Result_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILURE",
}

var KeygenResult_Result_value = map[string]int32{
	"SUCCESS": 0,
	"FAILURE": 1,
}

func (x KeygenResult_Result) String() string {
	return proto.EnumName(KeygenResult_Result_name, int32(x))
}

func (KeygenResult_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dbc836e6b96b1a93, []int{3, 0}
}

type KeygenWithSigner struct {
	Signer string  `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Data   *Keygen `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *KeygenWithSigner) Reset()         { *m = KeygenWithSigner{} }
func (m *KeygenWithSigner) String() string { return proto.CompactTextString(m) }
func (*KeygenWithSigner) ProtoMessage()    {}
func (*KeygenWithSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbc836e6b96b1a93, []int{0}
}
func (m *KeygenWithSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenWithSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeygenWithSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeygenWithSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenWithSigner.Merge(m, src)
}
func (m *KeygenWithSigner) XXX_Size() int {
	return m.Size()
}
func (m *KeygenWithSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenWithSigner.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenWithSigner proto.InternalMessageInfo

func (m *KeygenWithSigner) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *KeygenWithSigner) GetData() *Keygen {
	if m != nil {
		return m.Data
	}
	return nil
}

type Keygen struct {
	KeyType     string `protobuf:"bytes,1,opt,name=keyType,proto3" json:"keyType,omitempty"`
	Index       int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	PubKeyBytes []byte `protobuf:"bytes,3,opt,name=pubKeyBytes,proto3" json:"pubKeyBytes,omitempty"`
	Address     string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	StartBlock  int64  `protobuf:"varint,5,opt,name=startBlock,proto3" json:"startBlock,omitempty"`
}

func (m *Keygen) Reset()         { *m = Keygen{} }
func (m *Keygen) String() string { return proto.CompactTextString(m) }
func (*Keygen) ProtoMessage()    {}
func (*Keygen) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbc836e6b96b1a93, []int{1}
}
func (m *Keygen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keygen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Keygen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Keygen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keygen.Merge(m, src)
}
func (m *Keygen) XXX_Size() int {
	return m.Size()
}
func (m *Keygen) XXX_DiscardUnknown() {
	xxx_messageInfo_Keygen.DiscardUnknown(m)
}

var xxx_messageInfo_Keygen proto.InternalMessageInfo

func (m *Keygen) GetKeyType() string {
	if m != nil {
		return m.KeyType
	}
	return ""
}

func (m *Keygen) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Keygen) GetPubKeyBytes() []byte {
	if m != nil {
		return m.PubKeyBytes
	}
	return nil
}

func (m *Keygen) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Keygen) GetStartBlock() int64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

type KeygenResultWithSigner struct {
	Signer string        `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Keygen *Keygen       `protobuf:"bytes,2,opt,name=keygen,proto3" json:"keygen,omitempty"`
	Data   *KeygenResult `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *KeygenResultWithSigner) Reset()         { *m = KeygenResultWithSigner{} }
func (m *KeygenResultWithSigner) String() string { return proto.CompactTextString(m) }
func (*KeygenResultWithSigner) ProtoMessage()    {}
func (*KeygenResultWithSigner) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbc836e6b96b1a93, []int{2}
}
func (m *KeygenResultWithSigner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenResultWithSigner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeygenResultWithSigner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeygenResultWithSigner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenResultWithSigner.Merge(m, src)
}
func (m *KeygenResultWithSigner) XXX_Size() int {
	return m.Size()
}
func (m *KeygenResultWithSigner) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenResultWithSigner.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenResultWithSigner proto.InternalMessageInfo

func (m *KeygenResultWithSigner) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *KeygenResultWithSigner) GetKeygen() *Keygen {
	if m != nil {
		return m.Keygen
	}
	return nil
}

func (m *KeygenResultWithSigner) GetData() *KeygenResult {
	if m != nil {
		return m.Data
	}
	return nil
}

type KeygenResult struct {
	From   string              `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Result KeygenResult_Result `protobuf:"varint,2,opt,name=result,proto3,enum=types.KeygenResult_Result" json:"result,omitempty"`
}

func (m *KeygenResult) Reset()         { *m = KeygenResult{} }
func (m *KeygenResult) String() string { return proto.CompactTextString(m) }
func (*KeygenResult) ProtoMessage()    {}
func (*KeygenResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbc836e6b96b1a93, []int{3}
}
func (m *KeygenResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeygenResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeygenResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenResult.Merge(m, src)
}
func (m *KeygenResult) XXX_Size() int {
	return m.Size()
}
func (m *KeygenResult) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenResult.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenResult proto.InternalMessageInfo

func (m *KeygenResult) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *KeygenResult) GetResult() KeygenResult_Result {
	if m != nil {
		return m.Result
	}
	return KeygenResult_SUCCESS
}

func init() {
	proto.RegisterEnum("types.KeygenResult_Result", KeygenResult_Result_name, KeygenResult_Result_value)
	proto.RegisterType((*KeygenWithSigner)(nil), "types.KeygenWithSigner")
	proto.RegisterType((*Keygen)(nil), "types.Keygen")
	proto.RegisterType((*KeygenResultWithSigner)(nil), "types.KeygenResultWithSigner")
	proto.RegisterType((*KeygenResult)(nil), "types.KeygenResult")
}

func init() { proto.RegisterFile("keygen.proto", fileDescriptor_dbc836e6b96b1a93) }

var fileDescriptor_dbc836e6b96b1a93 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x1b, 0xb7, 0x66, 0xf8, 0x36, 0x65, 0x44, 0x19, 0xc1, 0x43, 0xa8, 0x05, 0xb1, 0xa7,
	0x1e, 0xe6, 0x27, 0x70, 0x63, 0x82, 0x4c, 0x2f, 0xa9, 0xc3, 0x73, 0x67, 0xe3, 0x1c, 0x9b, 0x6b,
	0x49, 0x32, 0x30, 0x9e, 0xfc, 0x08, 0x1e, 0xfc, 0x50, 0x1e, 0x77, 0xf4, 0x28, 0xdb, 0x17, 0x91,
	0xa5, 0x11, 0x2a, 0xec, 0xe0, 0xed, 0xfd, 0xff, 0xef, 0xf5, 0xf7, 0xfa, 0xfe, 0x04, 0x5a, 0x33,
	0x61, 0x26, 0x62, 0x11, 0x17, 0x32, 0xd7, 0x39, 0xf1, 0xb5, 0x29, 0x84, 0x0a, 0x6f, 0xa1, 0x3d,
	0xb4, 0xf6, 0xfd, 0x54, 0x3f, 0x25, 0xd3, 0xc9, 0x42, 0x48, 0xd2, 0x01, 0xac, 0x6c, 0x45, 0x51,
	0x80, 0xa2, 0x7d, 0xee, 0x14, 0x39, 0x85, 0x7a, 0x96, 0xea, 0x94, 0xee, 0x05, 0x28, 0x6a, 0x76,
	0x0f, 0x62, 0x4b, 0x88, 0xcb, 0xcf, 0xb9, 0x6d, 0x85, 0x1f, 0x08, 0x70, 0x69, 0x10, 0x0a, 0x8d,
	0x99, 0x30, 0x77, 0xa6, 0x10, 0x0e, 0xf3, 0x2b, 0xc9, 0x31, 0xf8, 0xd3, 0x45, 0x26, 0x5e, 0x2c,
	0xc8, 0xe7, 0xa5, 0x20, 0x01, 0x34, 0x8b, 0xe5, 0x78, 0x28, 0x4c, 0xcf, 0x68, 0xa1, 0x68, 0x2d,
	0x40, 0x51, 0x8b, 0x57, 0xad, 0x2d, 0x31, 0xcd, 0x32, 0x29, 0x94, 0xa2, 0xf5, 0x92, 0xe8, 0x24,
	0x61, 0x00, 0x4a, 0xa7, 0x52, 0xf7, 0xe6, 0xf9, 0xc3, 0x8c, 0xfa, 0x01, 0x8a, 0x6a, 0xbc, 0xe2,
	0x84, 0x6f, 0x08, 0x3a, 0xee, 0x3f, 0x85, 0x5a, 0xce, 0xf5, 0x3f, 0x8e, 0x3d, 0x03, 0x5c, 0xe6,
	0xb5, 0xfb, 0x5c, 0xd7, 0x24, 0xe7, 0x2e, 0x93, 0x9a, 0x1d, 0x3a, 0xfa, 0x3b, 0x64, 0x77, 0xb9,
	0x64, 0x5e, 0xa1, 0x55, 0x75, 0x09, 0x81, 0xfa, 0xa3, 0xcc, 0x9f, 0xdd, 0x56, 0x5b, 0x93, 0x2e,
	0x60, 0x69, 0xbb, 0x76, 0xe7, 0x61, 0xf7, 0x64, 0x07, 0x2e, 0x76, 0x54, 0x37, 0x19, 0x86, 0x80,
	0x1d, 0xb1, 0x09, 0x8d, 0x64, 0xd4, 0xef, 0x0f, 0x92, 0xa4, 0xed, 0x6d, 0xc5, 0xd5, 0xe5, 0xf5,
	0xcd, 0x88, 0x0f, 0xda, 0xa8, 0x47, 0x3f, 0xd7, 0x0c, 0xad, 0xd6, 0x0c, 0x7d, 0xaf, 0x19, 0x7a,
	0xdf, 0x30, 0x6f, 0xb5, 0x61, 0xde, 0xd7, 0x86, 0x79, 0x63, 0x6c, 0x1f, 0xc3, 0xc5, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x28, 0xe1, 0x8a, 0xf5, 0x1c, 0x02, 0x00, 0x00,
}

func (m *KeygenWithSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenWithSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenWithSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeygen(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Keygen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keygen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keygen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartBlock != 0 {
		i = encodeVarintKeygen(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PubKeyBytes) > 0 {
		i -= len(m.PubKeyBytes)
		copy(dAtA[i:], m.PubKeyBytes)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.PubKeyBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintKeygen(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.KeyType) > 0 {
		i -= len(m.KeyType)
		copy(dAtA[i:], m.KeyType)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.KeyType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeygenResultWithSigner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenResultWithSigner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenResultWithSigner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeygen(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Keygen != nil {
		{
			size, err := m.Keygen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeygen(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeygenResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintKeygen(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeygen(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeygen(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeygenWithSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovKeygen(uint64(l))
	}
	return n
}

func (m *Keygen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyType)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovKeygen(uint64(m.Index))
	}
	l = len(m.PubKeyBytes)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	if m.StartBlock != 0 {
		n += 1 + sovKeygen(uint64(m.StartBlock))
	}
	return n
}

func (m *KeygenResultWithSigner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	if m.Keygen != nil {
		l = m.Keygen.Size()
		n += 1 + l + sovKeygen(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovKeygen(uint64(l))
	}
	return n
}

func (m *KeygenResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovKeygen(uint64(m.Result))
	}
	return n
}

func sovKeygen(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeygen(x uint64) (n int) {
	return sovKeygen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeygenWithSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeygenWithSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeygenWithSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Keygen{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Keygen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keygen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keygen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeyBytes = append(m.PubKeyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKeyBytes == nil {
				m.PubKeyBytes = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeygenResultWithSigner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeygenResultWithSigner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeygenResultWithSigner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keygen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keygen == nil {
				m.Keygen = &Keygen{}
			}
			if err := m.Keygen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &KeygenResult{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeygenResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeygenResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeygenResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= KeygenResult_Result(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeygen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeygen
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeygen
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeygen
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeygen        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeygen          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeygen = fmt.Errorf("proto: unexpected end of group")
)
