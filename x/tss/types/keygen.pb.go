// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: keygen.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeygenResult_Result int32

const (
	KeygenResult_SUCCESS KeygenResult_Result = 0
	KeygenResult_FAILURE KeygenResult_Result = 1
)

var KeygenResult_Result_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILURE",
}

var KeygenResult_Result_value = map[string]int32{
	"SUCCESS": 0,
	"FAILURE": 1,
}

func (x KeygenResult_Result) String() string {
	return proto.EnumName(KeygenResult_Result_name, int32(x))
}

func (KeygenResult_Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dbc836e6b96b1a93, []int{1, 0}
}

// Note: all new fields in this proto MUST be included in SerializeWithoutSigner in the go file.
type KeygenProposal struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Chain  string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	// Random id for this proposal.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Block number that this proposal expires. All votes should be casted and saved by this time.
	ExpirationBlock int64 `protobuf:"varint,4,opt,name=expirationBlock,proto3" json:"expirationBlock,omitempty"`
}

func (m *KeygenProposal) Reset()         { *m = KeygenProposal{} }
func (m *KeygenProposal) String() string { return proto.CompactTextString(m) }
func (*KeygenProposal) ProtoMessage()    {}
func (*KeygenProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbc836e6b96b1a93, []int{0}
}
func (m *KeygenProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeygenProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeygenProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenProposal.Merge(m, src)
}
func (m *KeygenProposal) XXX_Size() int {
	return m.Size()
}
func (m *KeygenProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenProposal.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenProposal proto.InternalMessageInfo

func (m *KeygenProposal) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *KeygenProposal) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *KeygenProposal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *KeygenProposal) GetExpirationBlock() int64 {
	if m != nil {
		return m.ExpirationBlock
	}
	return 0
}

type KeygenResult struct {
	Signer      string              `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Chain       string              `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	PubKeyBytes []byte              `protobuf:"bytes,3,opt,name=pubKeyBytes,proto3" json:"pubKeyBytes,omitempty"`
	Address     string              `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Result      KeygenResult_Result `protobuf:"varint,5,opt,name=result,proto3,enum=types.KeygenResult_Result" json:"result,omitempty"`
}

func (m *KeygenResult) Reset()         { *m = KeygenResult{} }
func (m *KeygenResult) String() string { return proto.CompactTextString(m) }
func (*KeygenResult) ProtoMessage()    {}
func (*KeygenResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbc836e6b96b1a93, []int{1}
}
func (m *KeygenResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeygenResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeygenResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenResult.Merge(m, src)
}
func (m *KeygenResult) XXX_Size() int {
	return m.Size()
}
func (m *KeygenResult) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenResult.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenResult proto.InternalMessageInfo

func (m *KeygenResult) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *KeygenResult) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *KeygenResult) GetPubKeyBytes() []byte {
	if m != nil {
		return m.PubKeyBytes
	}
	return nil
}

func (m *KeygenResult) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *KeygenResult) GetResult() KeygenResult_Result {
	if m != nil {
		return m.Result
	}
	return KeygenResult_SUCCESS
}

func init() {
	proto.RegisterEnum("types.KeygenResult_Result", KeygenResult_Result_name, KeygenResult_Result_value)
	proto.RegisterType((*KeygenProposal)(nil), "types.KeygenProposal")
	proto.RegisterType((*KeygenResult)(nil), "types.KeygenResult")
}

func init() { proto.RegisterFile("keygen.proto", fileDescriptor_dbc836e6b96b1a93) }

var fileDescriptor_dbc836e6b96b1a93 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xc1, 0x6a, 0x83, 0x30,
	0x1c, 0x87, 0x8d, 0x9d, 0x96, 0xfe, 0x2b, 0xae, 0x84, 0x31, 0xc2, 0x0e, 0x41, 0x3c, 0x79, 0xf2,
	0xd0, 0x3d, 0xc1, 0x2c, 0x1d, 0x8c, 0xee, 0x30, 0x22, 0x7d, 0x00, 0x5b, 0x43, 0x17, 0x2a, 0x46,
	0x12, 0x0b, 0xf5, 0x2d, 0xf6, 0x58, 0x3b, 0x7a, 0xdc, 0x71, 0xe8, 0x8b, 0x8c, 0x45, 0x07, 0x65,
	0xb7, 0x9e, 0xc2, 0xf7, 0x11, 0xf8, 0x7d, 0xfc, 0xc1, 0x3b, 0xf2, 0xe6, 0xc0, 0xcb, 0xb8, 0x52,
	0xb2, 0x96, 0xd8, 0xa9, 0x9b, 0x8a, 0xeb, 0xf0, 0x0c, 0xfe, 0xc6, 0xe8, 0x37, 0x25, 0x2b, 0xa9,
	0xb3, 0x02, 0xdf, 0x83, 0xab, 0xc5, 0xa1, 0xe4, 0x8a, 0xa0, 0x00, 0x45, 0x33, 0x36, 0x12, 0xbe,
	0x03, 0x67, 0xff, 0x9e, 0x89, 0x92, 0xd8, 0x46, 0x0f, 0x80, 0x7d, 0xb0, 0x45, 0x4e, 0x26, 0x46,
	0xd9, 0x22, 0xc7, 0x11, 0xdc, 0xf2, 0x73, 0x25, 0x54, 0x56, 0x0b, 0x59, 0x26, 0x85, 0xdc, 0x1f,
	0xc9, 0x4d, 0x80, 0xa2, 0x09, 0xfb, 0xaf, 0xc3, 0x16, 0x81, 0x37, 0x4c, 0x33, 0xae, 0x4f, 0x45,
	0x7d, 0xe5, 0x70, 0x00, 0xf3, 0xea, 0xb4, 0xdb, 0xf0, 0x26, 0x69, 0x6a, 0xae, 0x4d, 0x81, 0xc7,
	0x2e, 0x15, 0x26, 0x30, 0xcd, 0xf2, 0x5c, 0x71, 0xad, 0x4d, 0xc2, 0x8c, 0xfd, 0x21, 0x5e, 0x82,
	0xab, 0xcc, 0x26, 0x71, 0x02, 0x14, 0xf9, 0xcb, 0x87, 0xd8, 0x1c, 0x23, 0xbe, 0xcc, 0x89, 0x87,
	0x87, 0x8d, 0x3f, 0xc3, 0x10, 0xdc, 0xb1, 0x73, 0x0e, 0xd3, 0x74, 0xbb, 0x5a, 0xad, 0xd3, 0x74,
	0x61, 0xfd, 0xc2, 0xf3, 0xd3, 0xcb, 0xeb, 0x96, 0xad, 0x17, 0x28, 0x21, 0x9f, 0x1d, 0x45, 0x6d,
	0x47, 0xd1, 0x77, 0x47, 0xd1, 0x47, 0x4f, 0xad, 0xb6, 0xa7, 0xd6, 0x57, 0x4f, 0xad, 0x9d, 0x6b,
	0x8e, 0xfe, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0xae, 0xc7, 0x30, 0xea, 0x84, 0x01, 0x00, 0x00,
}

func (m *KeygenProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationBlock != 0 {
		i = encodeVarintKeygen(dAtA, i, uint64(m.ExpirationBlock))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeygenResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintKeygen(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PubKeyBytes) > 0 {
		i -= len(m.PubKeyBytes)
		copy(dAtA[i:], m.PubKeyBytes)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.PubKeyBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintKeygen(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeygen(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeygen(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeygenProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	if m.ExpirationBlock != 0 {
		n += 1 + sovKeygen(uint64(m.ExpirationBlock))
	}
	return n
}

func (m *KeygenResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.PubKeyBytes)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovKeygen(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovKeygen(uint64(m.Result))
	}
	return n
}

func sovKeygen(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeygen(x uint64) (n int) {
	return sovKeygen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeygenProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeygenProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeygenProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationBlock", wireType)
			}
			m.ExpirationBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeygenResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeygenResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeygenResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeyBytes = append(m.PubKeyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKeyBytes == nil {
				m.PubKeyBytes = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= KeygenResult_Result(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeygen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeygen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeygen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeygen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeygen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeygen
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeygen
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeygen
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeygen        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeygen          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeygen = fmt.Errorf("proto: unexpected end of group")
)
