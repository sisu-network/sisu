// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: presign.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PartyID struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Moniker string `protobuf:"bytes,2,opt,name=moniker,proto3" json:"moniker,omitempty"`
	Key     []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Index   int32  `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *PartyID) Reset()         { *m = PartyID{} }
func (m *PartyID) String() string { return proto.CompactTextString(m) }
func (*PartyID) ProtoMessage()    {}
func (*PartyID) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9f14fd800591e71, []int{0}
}
func (m *PartyID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartyID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartyID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartyID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartyID.Merge(m, src)
}
func (m *PartyID) XXX_Size() int {
	return m.Size()
}
func (m *PartyID) XXX_DiscardUnknown() {
	xxx_messageInfo_PartyID.DiscardUnknown(m)
}

var xxx_messageInfo_PartyID proto.InternalMessageInfo

func (m *PartyID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PartyID) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *PartyID) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PartyID) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

// Cosmos message to broadcast PresignResult
type PresignResult struct {
	Signer      string     `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Chain       string     `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Success     bool       `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	PubkeyBytes []byte     `protobuf:"bytes,4,opt,name=pubkeyBytes,proto3" json:"pubkeyBytes,omitempty"`
	Address     string     `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Culprits    []*PartyID `protobuf:"bytes,6,rep,name=culprits,proto3" json:"culprits,omitempty"`
}

func (m *PresignResult) Reset()         { *m = PresignResult{} }
func (m *PresignResult) String() string { return proto.CompactTextString(m) }
func (*PresignResult) ProtoMessage()    {}
func (*PresignResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9f14fd800591e71, []int{1}
}
func (m *PresignResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PresignResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PresignResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PresignResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PresignResult.Merge(m, src)
}
func (m *PresignResult) XXX_Size() int {
	return m.Size()
}
func (m *PresignResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PresignResult.DiscardUnknown(m)
}

var xxx_messageInfo_PresignResult proto.InternalMessageInfo

func (m *PresignResult) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *PresignResult) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *PresignResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PresignResult) GetPubkeyBytes() []byte {
	if m != nil {
		return m.PubkeyBytes
	}
	return nil
}

func (m *PresignResult) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PresignResult) GetCulprits() []*PartyID {
	if m != nil {
		return m.Culprits
	}
	return nil
}

func init() {
	proto.RegisterType((*PartyID)(nil), "types.PartyID")
	proto.RegisterType((*PresignResult)(nil), "types.PresignResult")
}

func init() { proto.RegisterFile("presign.proto", fileDescriptor_e9f14fd800591e71) }

var fileDescriptor_e9f14fd800591e71 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xe3, 0xe4, 0x4b, 0xda, 0xef, 0xf6, 0x8f, 0x90, 0x85, 0x90, 0x27, 0x2b, 0xea, 0x14,
	0x31, 0x64, 0x80, 0x37, 0xa8, 0x58, 0xd8, 0x2a, 0xaf, 0x4c, 0x69, 0x72, 0x05, 0x56, 0x4a, 0x12,
	0xd9, 0x8e, 0x44, 0xde, 0x82, 0x37, 0x62, 0x65, 0xec, 0xc8, 0x88, 0x92, 0x17, 0x41, 0x76, 0x5c,
	0xc4, 0xe6, 0xdf, 0xb5, 0x8e, 0x7e, 0x47, 0x07, 0x36, 0x9d, 0x42, 0x2d, 0x9f, 0x9b, 0xbc, 0x53,
	0xad, 0x69, 0x69, 0x6c, 0x86, 0x0e, 0xf5, 0xee, 0x09, 0x16, 0x87, 0x42, 0x99, 0xe1, 0xf1, 0x81,
	0x6e, 0x21, 0x94, 0x15, 0x23, 0x29, 0xc9, 0xfe, 0x8b, 0x50, 0x56, 0x94, 0xc1, 0xe2, 0xb5, 0x6d,
	0x64, 0x8d, 0x8a, 0x85, 0xee, 0x78, 0x41, 0x7a, 0x05, 0x51, 0x8d, 0x03, 0x8b, 0x52, 0x92, 0xad,
	0x85, 0x7d, 0xd2, 0x6b, 0x88, 0x65, 0x53, 0xe1, 0x1b, 0xfb, 0x97, 0x92, 0x2c, 0x16, 0x33, 0xec,
	0x3e, 0x08, 0x6c, 0x0e, 0xb3, 0x55, 0xa0, 0xee, 0x4f, 0x86, 0xde, 0x40, 0x62, 0x09, 0x95, 0xf7,
	0x78, 0xb2, 0xf9, 0xf2, 0xa5, 0x90, 0x8d, 0x37, 0xcd, 0x60, 0x1b, 0xe8, 0xbe, 0x2c, 0x51, 0x6b,
	0xe7, 0x5a, 0x8a, 0x0b, 0xd2, 0x14, 0x56, 0x5d, 0x7f, 0xac, 0x71, 0xd8, 0x0f, 0x06, 0xb5, 0xb3,
	0xae, 0xc5, 0xdf, 0x93, 0xcd, 0x16, 0x55, 0xa5, 0x6c, 0x36, 0x9e, 0xdb, 0x7b, 0xa4, 0xb7, 0xb0,
	0x2c, 0xfb, 0x53, 0xa7, 0xa4, 0xd1, 0x2c, 0x49, 0xa3, 0x6c, 0x75, 0xb7, 0xcd, 0xdd, 0x18, 0xb9,
	0x5f, 0x42, 0xfc, 0xfe, 0xef, 0xd9, 0xe7, 0xc8, 0xc9, 0x79, 0xe4, 0xe4, 0x7b, 0xe4, 0xe4, 0x7d,
	0xe2, 0xc1, 0x79, 0xe2, 0xc1, 0xd7, 0xc4, 0x83, 0x63, 0xe2, 0x66, 0xbc, 0xff, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x02, 0x9f, 0x63, 0x27, 0x57, 0x01, 0x00, 0x00,
}

func (m *PartyID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartyID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartyID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintPresign(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintPresign(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintPresign(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPresign(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PresignResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PresignResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PresignResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Culprits) > 0 {
		for iNdEx := len(m.Culprits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Culprits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPresign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPresign(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PubkeyBytes) > 0 {
		i -= len(m.PubkeyBytes)
		copy(dAtA[i:], m.PubkeyBytes)
		i = encodeVarintPresign(dAtA, i, uint64(len(m.PubkeyBytes)))
		i--
		dAtA[i] = 0x22
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintPresign(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintPresign(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPresign(dAtA []byte, offset int, v uint64) int {
	offset -= sovPresign(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PartyID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPresign(uint64(l))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovPresign(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovPresign(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovPresign(uint64(m.Index))
	}
	return n
}

func (m *PresignResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovPresign(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovPresign(uint64(l))
	}
	if m.Success {
		n += 2
	}
	l = len(m.PubkeyBytes)
	if l > 0 {
		n += 1 + l + sovPresign(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPresign(uint64(l))
	}
	if len(m.Culprits) > 0 {
		for _, e := range m.Culprits {
			l = e.Size()
			n += 1 + l + sovPresign(uint64(l))
		}
	}
	return n
}

func sovPresign(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPresign(x uint64) (n int) {
	return sovPresign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PartyID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartyID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartyID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPresign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPresign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPresign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPresign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPresign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPresign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPresign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPresign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PresignResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PresignResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PresignResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPresign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPresign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPresign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPresign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPresign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPresign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubkeyBytes = append(m.PubkeyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.PubkeyBytes == nil {
				m.PubkeyBytes = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPresign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPresign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Culprits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPresign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPresign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Culprits = append(m.Culprits, &PartyID{})
			if err := m.Culprits[len(m.Culprits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPresign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPresign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPresign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPresign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPresign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPresign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPresign
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPresign
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPresign
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPresign        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPresign          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPresign = fmt.Errorf("proto: unexpected end of group")
)
